
Bai7_TouchScreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003328  0800b8dc  0800b8dc  0001b8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec04  0800ec04  000200e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec04  0800ec04  0001ec04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec0c  0800ec0c  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec0c  0800ec0c  0001ec0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec10  0800ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  0800ec14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e4  2**0
                  CONTENTS
 10 .bss          00000bc4  200000e4  200000e4  000200e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ca8  20000ca8  000200e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000236a3  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c6d  00000000  00000000  000437b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001700  00000000  00000000  00048428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00049b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a20  00000000  00000000  0004aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020859  00000000  00000000  00072a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfb4e  00000000  00000000  00093271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00172dbf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a20  00000000  00000000  00172e14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e4 	.word	0x200000e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8c4 	.word	0x0800b8c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	0800b8c4 	.word	0x0800b8c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_uldivmod>:
 8000b88:	b953      	cbnz	r3, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8a:	b94a      	cbnz	r2, 8000ba0 <__aeabi_uldivmod+0x18>
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	bf08      	it	eq
 8000b90:	2800      	cmpeq	r0, #0
 8000b92:	bf1c      	itt	ne
 8000b94:	f04f 31ff 	movne.w	r1, #4294967295
 8000b98:	f04f 30ff 	movne.w	r0, #4294967295
 8000b9c:	f000 b96e 	b.w	8000e7c <__aeabi_idiv0>
 8000ba0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba8:	f000 f806 	bl	8000bb8 <__udivmoddi4>
 8000bac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb4:	b004      	add	sp, #16
 8000bb6:	4770      	bx	lr

08000bb8 <__udivmoddi4>:
 8000bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bbc:	9d08      	ldr	r5, [sp, #32]
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	468c      	mov	ip, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f040 8083 	bne.w	8000cce <__udivmoddi4+0x116>
 8000bc8:	428a      	cmp	r2, r1
 8000bca:	4617      	mov	r7, r2
 8000bcc:	d947      	bls.n	8000c5e <__udivmoddi4+0xa6>
 8000bce:	fab2 f282 	clz	r2, r2
 8000bd2:	b142      	cbz	r2, 8000be6 <__udivmoddi4+0x2e>
 8000bd4:	f1c2 0020 	rsb	r0, r2, #32
 8000bd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bdc:	4091      	lsls	r1, r2
 8000bde:	4097      	lsls	r7, r2
 8000be0:	ea40 0c01 	orr.w	ip, r0, r1
 8000be4:	4094      	lsls	r4, r2
 8000be6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bea:	0c23      	lsrs	r3, r4, #16
 8000bec:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf0:	fa1f fe87 	uxth.w	lr, r7
 8000bf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000c00:	4299      	cmp	r1, r3
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x60>
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c0a:	f080 8119 	bcs.w	8000e40 <__udivmoddi4+0x288>
 8000c0e:	4299      	cmp	r1, r3
 8000c10:	f240 8116 	bls.w	8000e40 <__udivmoddi4+0x288>
 8000c14:	3e02      	subs	r6, #2
 8000c16:	443b      	add	r3, r7
 8000c18:	1a5b      	subs	r3, r3, r1
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c20:	fb08 3310 	mls	r3, r8, r0, r3
 8000c24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d909      	bls.n	8000c44 <__udivmoddi4+0x8c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	f080 8105 	bcs.w	8000e44 <__udivmoddi4+0x28c>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f240 8102 	bls.w	8000e44 <__udivmoddi4+0x28c>
 8000c40:	3802      	subs	r0, #2
 8000c42:	443c      	add	r4, r7
 8000c44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c48:	eba4 040e 	sub.w	r4, r4, lr
 8000c4c:	2600      	movs	r6, #0
 8000c4e:	b11d      	cbz	r5, 8000c58 <__udivmoddi4+0xa0>
 8000c50:	40d4      	lsrs	r4, r2
 8000c52:	2300      	movs	r3, #0
 8000c54:	e9c5 4300 	strd	r4, r3, [r5]
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xaa>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f282 	clz	r2, r2
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	d150      	bne.n	8000d0c <__udivmoddi4+0x154>
 8000c6a:	1bcb      	subs	r3, r1, r7
 8000c6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c70:	fa1f f887 	uxth.w	r8, r7
 8000c74:	2601      	movs	r6, #1
 8000c76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c7a:	0c21      	lsrs	r1, r4, #16
 8000c7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb08 f30c 	mul.w	r3, r8, ip
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0xe4>
 8000c8c:	1879      	adds	r1, r7, r1
 8000c8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0xe2>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	f200 80e9 	bhi.w	8000e6c <__udivmoddi4+0x2b4>
 8000c9a:	4684      	mov	ip, r0
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	b2a3      	uxth	r3, r4
 8000ca0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ca4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cac:	fb08 f800 	mul.w	r8, r8, r0
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x10c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x10a>
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	f200 80d9 	bhi.w	8000e74 <__udivmoddi4+0x2bc>
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	eba4 0408 	sub.w	r4, r4, r8
 8000cc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ccc:	e7bf      	b.n	8000c4e <__udivmoddi4+0x96>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d909      	bls.n	8000ce6 <__udivmoddi4+0x12e>
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	f000 80b1 	beq.w	8000e3a <__udivmoddi4+0x282>
 8000cd8:	2600      	movs	r6, #0
 8000cda:	e9c5 0100 	strd	r0, r1, [r5]
 8000cde:	4630      	mov	r0, r6
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	fab3 f683 	clz	r6, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d14a      	bne.n	8000d84 <__udivmoddi4+0x1cc>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0x140>
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	f200 80b8 	bhi.w	8000e68 <__udivmoddi4+0x2b0>
 8000cf8:	1a84      	subs	r4, r0, r2
 8000cfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	468c      	mov	ip, r1
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0a8      	beq.n	8000c58 <__udivmoddi4+0xa0>
 8000d06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d0a:	e7a5      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f603 	lsr.w	r6, r0, r3
 8000d14:	4097      	lsls	r7, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d1e:	40d9      	lsrs	r1, r3
 8000d20:	4330      	orrs	r0, r6
 8000d22:	0c03      	lsrs	r3, r0, #16
 8000d24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d28:	fa1f f887 	uxth.w	r8, r7
 8000d2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d34:	fb06 f108 	mul.w	r1, r6, r8
 8000d38:	4299      	cmp	r1, r3
 8000d3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x19c>
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d46:	f080 808d 	bcs.w	8000e64 <__udivmoddi4+0x2ac>
 8000d4a:	4299      	cmp	r1, r3
 8000d4c:	f240 808a 	bls.w	8000e64 <__udivmoddi4+0x2ac>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	443b      	add	r3, r7
 8000d54:	1a5b      	subs	r3, r3, r1
 8000d56:	b281      	uxth	r1, r0
 8000d58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb00 f308 	mul.w	r3, r0, r8
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x1c4>
 8000d6c:	1879      	adds	r1, r7, r1
 8000d6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d72:	d273      	bcs.n	8000e5c <__udivmoddi4+0x2a4>
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d971      	bls.n	8000e5c <__udivmoddi4+0x2a4>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4439      	add	r1, r7
 8000d7c:	1acb      	subs	r3, r1, r3
 8000d7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d82:	e778      	b.n	8000c76 <__udivmoddi4+0xbe>
 8000d84:	f1c6 0c20 	rsb	ip, r6, #32
 8000d88:	fa03 f406 	lsl.w	r4, r3, r6
 8000d8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d90:	431c      	orrs	r4, r3
 8000d92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d96:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000da2:	431f      	orrs	r7, r3
 8000da4:	0c3b      	lsrs	r3, r7, #16
 8000da6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000daa:	fa1f f884 	uxth.w	r8, r4
 8000dae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000db2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000db6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dba:	458a      	cmp	sl, r1
 8000dbc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x220>
 8000dc6:	1861      	adds	r1, r4, r1
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	d248      	bcs.n	8000e60 <__udivmoddi4+0x2a8>
 8000dce:	458a      	cmp	sl, r1
 8000dd0:	d946      	bls.n	8000e60 <__udivmoddi4+0x2a8>
 8000dd2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dd6:	4421      	add	r1, r4
 8000dd8:	eba1 010a 	sub.w	r1, r1, sl
 8000ddc:	b2bf      	uxth	r7, r7
 8000dde:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000de6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dea:	fb00 f808 	mul.w	r8, r0, r8
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x24a>
 8000df2:	19e7      	adds	r7, r4, r7
 8000df4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df8:	d22e      	bcs.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfa:	45b8      	cmp	r8, r7
 8000dfc:	d92c      	bls.n	8000e58 <__udivmoddi4+0x2a0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4427      	add	r7, r4
 8000e02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e06:	eba7 0708 	sub.w	r7, r7, r8
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	454f      	cmp	r7, r9
 8000e10:	46c6      	mov	lr, r8
 8000e12:	4649      	mov	r1, r9
 8000e14:	d31a      	bcc.n	8000e4c <__udivmoddi4+0x294>
 8000e16:	d017      	beq.n	8000e48 <__udivmoddi4+0x290>
 8000e18:	b15d      	cbz	r5, 8000e32 <__udivmoddi4+0x27a>
 8000e1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e26:	40f2      	lsrs	r2, r6
 8000e28:	ea4c 0202 	orr.w	r2, ip, r2
 8000e2c:	40f7      	lsrs	r7, r6
 8000e2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e32:	2600      	movs	r6, #0
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e70b      	b.n	8000c58 <__udivmoddi4+0xa0>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e9      	b.n	8000c18 <__udivmoddi4+0x60>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6fd      	b.n	8000c44 <__udivmoddi4+0x8c>
 8000e48:	4543      	cmp	r3, r8
 8000e4a:	d2e5      	bcs.n	8000e18 <__udivmoddi4+0x260>
 8000e4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e50:	eb69 0104 	sbc.w	r1, r9, r4
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7df      	b.n	8000e18 <__udivmoddi4+0x260>
 8000e58:	4608      	mov	r0, r1
 8000e5a:	e7d2      	b.n	8000e02 <__udivmoddi4+0x24a>
 8000e5c:	4660      	mov	r0, ip
 8000e5e:	e78d      	b.n	8000d7c <__udivmoddi4+0x1c4>
 8000e60:	4681      	mov	r9, r0
 8000e62:	e7b9      	b.n	8000dd8 <__udivmoddi4+0x220>
 8000e64:	4666      	mov	r6, ip
 8000e66:	e775      	b.n	8000d54 <__udivmoddi4+0x19c>
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e74a      	b.n	8000d02 <__udivmoddi4+0x14a>
 8000e6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e70:	4439      	add	r1, r7
 8000e72:	e713      	b.n	8000c9c <__udivmoddi4+0xe4>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	e724      	b.n	8000cc4 <__udivmoddi4+0x10c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000e94:	4a3d      	ldr	r2, [pc, #244]	; (8000f8c <MX_ADC1_Init+0x10c>)
 8000e96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ea4:	4b38      	ldr	r3, [pc, #224]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eaa:	4b37      	ldr	r3, [pc, #220]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebe:	4b32      	ldr	r3, [pc, #200]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <MX_ADC1_Init+0x110>)
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ecc:	2205      	movs	r2, #5
 8000ece:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed0:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000ee0:	f004 fe56 	bl	8005b90 <HAL_ADC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000eea:	f002 fa81 	bl	80033f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000eee:	2308      	movs	r3, #8
 8000ef0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	4619      	mov	r1, r3
 8000efe:	4822      	ldr	r0, [pc, #136]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f00:	f004 fe8a 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f0a:	f002 fa71 	bl	80033f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f12:	2302      	movs	r3, #2
 8000f14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481b      	ldr	r0, [pc, #108]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f1c:	f004 fe7c 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f26:	f002 fa63 	bl	80033f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f2a:	230a      	movs	r3, #10
 8000f2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f38:	f004 fe6e 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f42:	f002 fa55 	bl	80033f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f46:	230b      	movs	r3, #11
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f54:	f004 fe60 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000f5e:	f002 fa47 	bl	80033f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f62:	230c      	movs	r3, #12
 8000f64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f66:	2305      	movs	r3, #5
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_ADC1_Init+0x108>)
 8000f70:	f004 fe52 	bl	8005c18 <HAL_ADC_ConfigChannel>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000f7a:	f002 fa39 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200009bc 	.word	0x200009bc
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	0f000001 	.word	0x0f000001

08000f94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <HAL_ADC_MspInit+0x110>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d171      	bne.n	800109a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a33      	ldr	r2, [pc, #204]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_ADC_MspInit+0x114>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800100a:	2307      	movs	r3, #7
 800100c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100e:	2303      	movs	r3, #3
 8001010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <HAL_ADC_MspInit+0x118>)
 800101e:	f005 fc15 	bl	800684c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001022:	2303      	movs	r3, #3
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001026:	2303      	movs	r3, #3
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	481e      	ldr	r0, [pc, #120]	; (80010b0 <HAL_ADC_MspInit+0x11c>)
 8001036:	f005 fc09 	bl	800684c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800103c:	4a1e      	ldr	r2, [pc, #120]	; (80010b8 <HAL_ADC_MspInit+0x124>)
 800103e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800105c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001060:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001068:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001080:	f005 f8fa 	bl	8006278 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800108a:	f002 f9b1 	bl	80033f0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_ADC_MspInit+0x120>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3728      	adds	r7, #40	; 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40012000 	.word	0x40012000
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020400 	.word	0x40020400
 80010b4:	20000a04 	.word	0x20000a04
 80010b8:	40026410 	.word	0x40026410

080010bc <at24c_init>:


static uint8_t at24c_Check(void);

void at24c_init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	at24c_Check();
 80010c0:	f000 f83c 	bl	800113c <at24c_Check>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <at24c_ReadOneByte>:

uint8_t at24c_ReadOneByte(uint16_t ReadAddr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
	uint8_t temp=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, ReadAddr, I2C_MEMADD_SIZE_16BIT, &temp, 1, 10);
 80010d6:	88fa      	ldrh	r2, [r7, #6]
 80010d8:	230a      	movs	r3, #10
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	f107 030f 	add.w	r3, r7, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2310      	movs	r3, #16
 80010e8:	21a0      	movs	r1, #160	; 0xa0
 80010ea:	4804      	ldr	r0, [pc, #16]	; (80010fc <at24c_ReadOneByte+0x34>)
 80010ec:	f005 ffba 	bl	8007064 <HAL_I2C_Mem_Read>
	return temp;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000ad4 	.word	0x20000ad4

08001100 <at24c_WriteOneByte>:

void at24c_WriteOneByte(uint16_t WriteAddr,uint8_t DataToWrite)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	80fb      	strh	r3, [r7, #6]
 800110c:	4613      	mov	r3, r2
 800110e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, WriteAddr, I2C_MEMADD_SIZE_16BIT, &DataToWrite, 1, 10);
 8001110:	88fa      	ldrh	r2, [r7, #6]
 8001112:	230a      	movs	r3, #10
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	1d7b      	adds	r3, r7, #5
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2310      	movs	r3, #16
 8001120:	21a0      	movs	r1, #160	; 0xa0
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <at24c_WriteOneByte+0x38>)
 8001124:	f005 fea4 	bl	8006e70 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8001128:	2005      	movs	r0, #5
 800112a:	f004 fd0d 	bl	8005b48 <HAL_Delay>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000ad4 	.word	0x20000ad4

0800113c <at24c_Check>:

uint8_t at24c_Check(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp=at24c_ReadOneByte(65535);
 8001142:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001146:	f7ff ffbf 	bl	80010c8 <at24c_ReadOneByte>
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	if(temp==0X55)return 0;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b55      	cmp	r3, #85	; 0x55
 8001152:	d101      	bne.n	8001158 <at24c_Check+0x1c>
 8001154:	2300      	movs	r3, #0
 8001156:	e010      	b.n	800117a <at24c_Check+0x3e>
	else
	{
		at24c_WriteOneByte(65535,0X55);
 8001158:	2155      	movs	r1, #85	; 0x55
 800115a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800115e:	f7ff ffcf 	bl	8001100 <at24c_WriteOneByte>
	    temp=at24c_ReadOneByte(65535);
 8001162:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001166:	f7ff ffaf 	bl	80010c8 <at24c_ReadOneByte>
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
		if(temp==0X55)return 0;
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b55      	cmp	r3, #85	; 0x55
 8001172:	d101      	bne.n	8001178 <at24c_Check+0x3c>
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <at24c_Check+0x3e>
	}
	return 1;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <at24c_Read>:


void at24c_Read(uint16_t ReadAddr,uint8_t *pBuffer,uint16_t NumToRead)
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	6039      	str	r1, [r7, #0]
 800118c:	80fb      	strh	r3, [r7, #6]
 800118e:	4613      	mov	r3, r2
 8001190:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 8001192:	e00d      	b.n	80011b0 <at24c_Read+0x2e>
	{
		*pBuffer++=at24c_ReadOneByte(ReadAddr++);
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	1c5a      	adds	r2, r3, #1
 8001198:	80fa      	strh	r2, [r7, #6]
 800119a:	683c      	ldr	r4, [r7, #0]
 800119c:	1c62      	adds	r2, r4, #1
 800119e:	603a      	str	r2, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff91 	bl	80010c8 <at24c_ReadOneByte>
 80011a6:	4603      	mov	r3, r0
 80011a8:	7023      	strb	r3, [r4, #0]
		NumToRead--;
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	80bb      	strh	r3, [r7, #4]
	while(NumToRead)
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ee      	bne.n	8001194 <at24c_Read+0x12>
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd90      	pop	{r4, r7, pc}

080011c0 <at24c_Write>:

void at24c_Write(uint16_t WriteAddr,uint8_t *pBuffer,uint16_t NumToWrite)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
	while(NumToWrite--)
 80011d0:	e00c      	b.n	80011ec <at24c_Write+0x2c>
	{
		at24c_WriteOneByte(WriteAddr,*pBuffer);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff90 	bl	8001100 <at24c_WriteOneByte>
		WriteAddr++;
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3301      	adds	r3, #1
 80011e4:	80fb      	strh	r3, [r7, #6]
		pBuffer++;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
	while(NumToWrite--)
 80011ec:	88bb      	ldrh	r3, [r7, #4]
 80011ee:	1e5a      	subs	r2, r3, #1
 80011f0:	80ba      	strh	r2, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1ed      	bne.n	80011d2 <at24c_Write+0x12>
	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	2108      	movs	r1, #8
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <button_init+0x14>)
 800120a:	f005 fcd3 	bl	8006bb4 <HAL_GPIO_WritePin>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020c00 	.word	0x40020c00

08001218 <button_Scan>:

void button_Scan(){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2108      	movs	r1, #8
 8001222:	482f      	ldr	r0, [pc, #188]	; (80012e0 <button_Scan+0xc8>)
 8001224:	f005 fcc6 	bl	8006bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	2108      	movs	r1, #8
 800122c:	482c      	ldr	r0, [pc, #176]	; (80012e0 <button_Scan+0xc8>)
 800122e:	f005 fcc1 	bl	8006bb4 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8001232:	230a      	movs	r3, #10
 8001234:	2202      	movs	r2, #2
 8001236:	492b      	ldr	r1, [pc, #172]	; (80012e4 <button_Scan+0xcc>)
 8001238:	482b      	ldr	r0, [pc, #172]	; (80012e8 <button_Scan+0xd0>)
 800123a:	f007 faba 	bl	80087b2 <HAL_SPI_Receive>
	  int button_index = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8001242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001246:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	e03f      	b.n	80012ce <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db06      	blt.n	8001262 <button_Scan+0x4a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b03      	cmp	r3, #3
 8001258:	dc03      	bgt.n	8001262 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3304      	adds	r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	e018      	b.n	8001294 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b03      	cmp	r3, #3
 8001266:	dd07      	ble.n	8001278 <button_Scan+0x60>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b07      	cmp	r3, #7
 800126c:	dc04      	bgt.n	8001278 <button_Scan+0x60>
			  button_index = 7 - i;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f1c3 0307 	rsb	r3, r3, #7
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e00d      	b.n	8001294 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b07      	cmp	r3, #7
 800127c:	dd06      	ble.n	800128c <button_Scan+0x74>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2b0b      	cmp	r3, #11
 8001282:	dc03      	bgt.n	800128c <button_Scan+0x74>
			  button_index = i + 4;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3304      	adds	r3, #4
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e003      	b.n	8001294 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f1c3 0317 	rsb	r3, r3, #23
 8001292:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <button_Scan+0xcc>)
 8001296:	881a      	ldrh	r2, [r3, #0]
 8001298:	897b      	ldrh	r3, [r7, #10]
 800129a:	4013      	ands	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <button_Scan+0x96>
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <button_Scan+0xd4>)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2100      	movs	r1, #0
 80012a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80012ac:	e009      	b.n	80012c2 <button_Scan+0xaa>
		  else button_count[button_index]++;
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <button_Scan+0xd4>)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b299      	uxth	r1, r3
 80012ba:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <button_Scan+0xd4>)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 80012c2:	897b      	ldrh	r3, [r7, #10]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	ddbc      	ble.n	800124e <button_Scan+0x36>
	  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	20000100 	.word	0x20000100
 80012e8:	20000b64 	.word	0x20000b64
 80012ec:	20000a64 	.word	0x20000a64

080012f0 <buzzer_init>:

#include "buzzer.h"

uint8_t duty_cycle = 0;

void buzzer_init(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80012f4:	2100      	movs	r1, #0
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <buzzer_init+0x10>)
 80012f8:	f008 f804 	bl	8009304 <HAL_TIM_PWM_Start>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000bbc 	.word	0x20000bbc

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_DMA_Init+0x3c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <MX_DMA_Init+0x3c>)
 8001314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_DMA_Init+0x3c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2038      	movs	r0, #56	; 0x38
 800132c:	f004 ff6d 	bl	800620a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001330:	2038      	movs	r0, #56	; 0x38
 8001332:	f004 ff86 	bl	8006242 <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <fsm_mode>:
int colon = 0;
int send_flag = 0;

struct player *leaderboard = NULL;

void fsm_mode(){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	switch(mode){
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <fsm_mode+0x70>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d82e      	bhi.n	80013ae <fsm_mode+0x6a>
 8001350:	a201      	add	r2, pc, #4	; (adr r2, 8001358 <fsm_mode+0x14>)
 8001352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001356:	bf00      	nop
 8001358:	08001369 	.word	0x08001369
 800135c:	08001377 	.word	0x08001377
 8001360:	08001389 	.word	0x08001389
 8001364:	0800139b 	.word	0x0800139b
	case NORMAL:
		wall = 0;
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <fsm_mode+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
		walls = 0;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <fsm_mode+0x78>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
		break;
 8001374:	e01b      	b.n	80013ae <fsm_mode+0x6a>
	case WALL:
		wall = 1;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <fsm_mode+0x74>)
 8001378:	2201      	movs	r2, #1
 800137a:	601a      	str	r2, [r3, #0]
		walls = 0;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <fsm_mode+0x78>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		spawn_wall();
 8001382:	f002 fc2b 	bl	8003bdc <spawn_wall>
		break;
 8001386:	e012      	b.n	80013ae <fsm_mode+0x6a>
	case WALLS:
		wall = 1;
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <fsm_mode+0x74>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
		walls = 1;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <fsm_mode+0x78>)
 8001390:	2201      	movs	r2, #1
 8001392:	601a      	str	r2, [r3, #0]
		spawn_wall();
 8001394:	f002 fc22 	bl	8003bdc <spawn_wall>
		break;
 8001398:	e009      	b.n	80013ae <fsm_mode+0x6a>
	case TIMER:
		wall = 0;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <fsm_mode+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
		walls = 0;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <fsm_mode+0x78>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
		countdown = 180;
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <fsm_mode+0x7c>)
 80013a8:	22b4      	movs	r2, #180	; 0xb4
 80013aa:	601a      	str	r2, [r3, #0]
		break;
 80013ac:	bf00      	nop
	}
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000010c 	.word	0x2000010c
 80013b8:	20000114 	.word	0x20000114
 80013bc:	20000118 	.word	0x20000118
 80013c0:	20000008 	.word	0x20000008

080013c4 <enter_ID>:
//		default:
//			break;
//	}
//}

void enter_ID(){//nhap id nguoi choi
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	if(button_count[0] == 1)
 80013c8:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <enter_ID+0x13c>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d108      	bne.n	80013e2 <enter_ID+0x1e>
		ID = ID*10+1;
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <enter_ID+0x140>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	3301      	adds	r3, #1
 80013de:	4a49      	ldr	r2, [pc, #292]	; (8001504 <enter_ID+0x140>)
 80013e0:	6013      	str	r3, [r2, #0]
	if(button_count[1] == 1)
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <enter_ID+0x13c>)
 80013e4:	885b      	ldrh	r3, [r3, #2]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d108      	bne.n	80013fc <enter_ID+0x38>
		ID = ID*10+2;
 80013ea:	4b46      	ldr	r3, [pc, #280]	; (8001504 <enter_ID+0x140>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	3302      	adds	r3, #2
 80013f8:	4a42      	ldr	r2, [pc, #264]	; (8001504 <enter_ID+0x140>)
 80013fa:	6013      	str	r3, [r2, #0]
	if(button_count[2] == 1)
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <enter_ID+0x13c>)
 80013fe:	889b      	ldrh	r3, [r3, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d108      	bne.n	8001416 <enter_ID+0x52>
		ID = ID*10+3;
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <enter_ID+0x140>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	3303      	adds	r3, #3
 8001412:	4a3c      	ldr	r2, [pc, #240]	; (8001504 <enter_ID+0x140>)
 8001414:	6013      	str	r3, [r2, #0]
	if(button_count[4] == 1)
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <enter_ID+0x13c>)
 8001418:	891b      	ldrh	r3, [r3, #8]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <enter_ID+0x6c>
		ID = ID*10+4;
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <enter_ID+0x140>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	3304      	adds	r3, #4
 800142c:	4a35      	ldr	r2, [pc, #212]	; (8001504 <enter_ID+0x140>)
 800142e:	6013      	str	r3, [r2, #0]
	if(button_count[5] == 1)
 8001430:	4b33      	ldr	r3, [pc, #204]	; (8001500 <enter_ID+0x13c>)
 8001432:	895b      	ldrh	r3, [r3, #10]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <enter_ID+0x86>
		ID = ID*10+5;
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <enter_ID+0x140>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	3305      	adds	r3, #5
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <enter_ID+0x140>)
 8001448:	6013      	str	r3, [r2, #0]
	if(button_count[6] == 1)
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <enter_ID+0x13c>)
 800144c:	899b      	ldrh	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d108      	bne.n	8001464 <enter_ID+0xa0>
		ID = ID*10+6;
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <enter_ID+0x140>)
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	3306      	adds	r3, #6
 8001460:	4a28      	ldr	r2, [pc, #160]	; (8001504 <enter_ID+0x140>)
 8001462:	6013      	str	r3, [r2, #0]
	if(button_count[8] == 1)
 8001464:	4b26      	ldr	r3, [pc, #152]	; (8001500 <enter_ID+0x13c>)
 8001466:	8a1b      	ldrh	r3, [r3, #16]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d108      	bne.n	800147e <enter_ID+0xba>
		ID = ID*10+7;
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <enter_ID+0x140>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	3307      	adds	r3, #7
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <enter_ID+0x140>)
 800147c:	6013      	str	r3, [r2, #0]
	if(button_count[9] == 1)
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <enter_ID+0x13c>)
 8001480:	8a5b      	ldrh	r3, [r3, #18]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d108      	bne.n	8001498 <enter_ID+0xd4>
		ID = ID*10+8;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <enter_ID+0x140>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3308      	adds	r3, #8
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <enter_ID+0x140>)
 8001496:	6013      	str	r3, [r2, #0]
	if(button_count[10] == 1)
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <enter_ID+0x13c>)
 800149a:	8a9b      	ldrh	r3, [r3, #20]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <enter_ID+0xee>
		ID = ID*10+9;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <enter_ID+0x140>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	3309      	adds	r3, #9
 80014ae:	4a15      	ldr	r2, [pc, #84]	; (8001504 <enter_ID+0x140>)
 80014b0:	6013      	str	r3, [r2, #0]
	if(button_count[13] == 1)
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <enter_ID+0x13c>)
 80014b4:	8b5b      	ldrh	r3, [r3, #26]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d108      	bne.n	80014cc <enter_ID+0x108>
		ID = ID*10;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <enter_ID+0x140>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <enter_ID+0x140>)
 80014ca:	601a      	str	r2, [r3, #0]
	if(ID > 9999)
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <enter_ID+0x140>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80014d4:	4293      	cmp	r3, r2
 80014d6:	dd0e      	ble.n	80014f6 <enter_ID+0x132>
		ID = ID % 10;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <enter_ID+0x140>)
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <enter_ID+0x144>)
 80014de:	fb83 2301 	smull	r2, r3, r3, r1
 80014e2:	109a      	asrs	r2, r3, #2
 80014e4:	17cb      	asrs	r3, r1, #31
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	1aca      	subs	r2, r1, r3
 80014f2:	4b04      	ldr	r3, [pc, #16]	; (8001504 <enter_ID+0x140>)
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	20000a64 	.word	0x20000a64
 8001504:	20000108 	.word	0x20000108
 8001508:	66666667 	.word	0x66666667

0800150c <change_mode>:

void change_mode(){// doi che do choi
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 8001512:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <change_mode+0x1f0>)
 8001514:	8b1b      	ldrh	r3, [r3, #24]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d11d      	bne.n	8001556 <change_mode+0x4a>
		lcd_Clear(BLACK);
 800151a:	2000      	movs	r0, #0
 800151c:	f001 f832 	bl	8002584 <lcd_Clear>
		lcd_Fill(50, 250, 190, 300, GREEN);
 8001520:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800152a:	22be      	movs	r2, #190	; 0xbe
 800152c:	21fa      	movs	r1, #250	; 0xfa
 800152e:	2032      	movs	r0, #50	; 0x32
 8001530:	f001 f85a 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 8001534:	2301      	movs	r3, #1
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2318      	movs	r3, #24
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	2300      	movs	r3, #0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	4a6f      	ldr	r2, [pc, #444]	; (8001700 <change_mode+0x1f4>)
 8001544:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001548:	205a      	movs	r0, #90	; 0x5a
 800154a:	f001 fd05 	bl	8002f58 <lcd_ShowStr>
		status = INIT;
 800154e:	4b6d      	ldr	r3, [pc, #436]	; (8001704 <change_mode+0x1f8>)
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
		return;
 8001554:	e0d0      	b.n	80016f8 <change_mode+0x1ec>
	}
	lcd_ShowStr(0, 10, "1. NORMAL", WHITE, BLACK, 16, 0);
 8001556:	2300      	movs	r3, #0
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2310      	movs	r3, #16
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001566:	4a68      	ldr	r2, [pc, #416]	; (8001708 <change_mode+0x1fc>)
 8001568:	210a      	movs	r1, #10
 800156a:	2000      	movs	r0, #0
 800156c:	f001 fcf4 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. WALL", WHITE, BLACK, 16, 0);
 8001570:	2300      	movs	r3, #0
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	2310      	movs	r3, #16
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001580:	4a62      	ldr	r2, [pc, #392]	; (800170c <change_mode+0x200>)
 8001582:	211e      	movs	r1, #30
 8001584:	2000      	movs	r0, #0
 8001586:	f001 fce7 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. WALLS", WHITE, BLACK, 16, 0);
 800158a:	2300      	movs	r3, #0
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2310      	movs	r3, #16
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800159a:	4a5d      	ldr	r2, [pc, #372]	; (8001710 <change_mode+0x204>)
 800159c:	2132      	movs	r1, #50	; 0x32
 800159e:	2000      	movs	r0, #0
 80015a0:	f001 fcda 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 70, "4. TIMER", WHITE, BLACK, 16, 0);
 80015a4:	2300      	movs	r3, #0
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2310      	movs	r3, #16
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b4:	4a57      	ldr	r2, [pc, #348]	; (8001714 <change_mode+0x208>)
 80015b6:	2146      	movs	r1, #70	; 0x46
 80015b8:	2000      	movs	r0, #0
 80015ba:	f001 fccd 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 90, "E. EXIT", WHITE, BLACK, 16, 0);
 80015be:	2300      	movs	r3, #0
 80015c0:	9302      	str	r3, [sp, #8]
 80015c2:	2310      	movs	r3, #16
 80015c4:	9301      	str	r3, [sp, #4]
 80015c6:	2300      	movs	r3, #0
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ce:	4a52      	ldr	r2, [pc, #328]	; (8001718 <change_mode+0x20c>)
 80015d0:	215a      	movs	r1, #90	; 0x5a
 80015d2:	2000      	movs	r0, #0
 80015d4:	f001 fcc0 	bl	8002f58 <lcd_ShowStr>

	if(button_count[0] == 1){
 80015d8:	4b48      	ldr	r3, [pc, #288]	; (80016fc <change_mode+0x1f0>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d11f      	bne.n	8001620 <change_mode+0x114>
		mode = NORMAL;
 80015e0:	4b4e      	ldr	r3, [pc, #312]	; (800171c <change_mode+0x210>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 80015e6:	2000      	movs	r0, #0
 80015e8:	f000 ffcc 	bl	8002584 <lcd_Clear>
		status = INIT;
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <change_mode+0x1f8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 80015f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80015fc:	22be      	movs	r2, #190	; 0xbe
 80015fe:	21fa      	movs	r1, #250	; 0xfa
 8001600:	2032      	movs	r0, #50	; 0x32
 8001602:	f000 fff1 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 8001606:	2301      	movs	r3, #1
 8001608:	9302      	str	r3, [sp, #8]
 800160a:	2318      	movs	r3, #24
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	2300      	movs	r3, #0
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <change_mode+0x1f4>)
 8001616:	f44f 7182 	mov.w	r1, #260	; 0x104
 800161a:	205a      	movs	r0, #90	; 0x5a
 800161c:	f001 fc9c 	bl	8002f58 <lcd_ShowStr>
	}
	if(button_count[1] == 1){
 8001620:	4b36      	ldr	r3, [pc, #216]	; (80016fc <change_mode+0x1f0>)
 8001622:	885b      	ldrh	r3, [r3, #2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d11f      	bne.n	8001668 <change_mode+0x15c>
		mode = WALL;
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <change_mode+0x210>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 ffa8 	bl	8002584 <lcd_Clear>
		status = INIT;
 8001634:	4b33      	ldr	r3, [pc, #204]	; (8001704 <change_mode+0x1f8>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 800163a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001644:	22be      	movs	r2, #190	; 0xbe
 8001646:	21fa      	movs	r1, #250	; 0xfa
 8001648:	2032      	movs	r0, #50	; 0x32
 800164a:	f000 ffcd 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 800164e:	2301      	movs	r3, #1
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	2318      	movs	r3, #24
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	4a28      	ldr	r2, [pc, #160]	; (8001700 <change_mode+0x1f4>)
 800165e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001662:	205a      	movs	r0, #90	; 0x5a
 8001664:	f001 fc78 	bl	8002f58 <lcd_ShowStr>
	}
	if(button_count[2] == 1){
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <change_mode+0x1f0>)
 800166a:	889b      	ldrh	r3, [r3, #4]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d11f      	bne.n	80016b0 <change_mode+0x1a4>
		mode = WALLS;
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <change_mode+0x210>)
 8001672:	2202      	movs	r2, #2
 8001674:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001676:	2000      	movs	r0, #0
 8001678:	f000 ff84 	bl	8002584 <lcd_Clear>
		status = INIT;
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <change_mode+0x1f8>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 8001682:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800168c:	22be      	movs	r2, #190	; 0xbe
 800168e:	21fa      	movs	r1, #250	; 0xfa
 8001690:	2032      	movs	r0, #50	; 0x32
 8001692:	f000 ffa9 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 8001696:	2301      	movs	r3, #1
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2318      	movs	r3, #24
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	4a16      	ldr	r2, [pc, #88]	; (8001700 <change_mode+0x1f4>)
 80016a6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016aa:	205a      	movs	r0, #90	; 0x5a
 80016ac:	f001 fc54 	bl	8002f58 <lcd_ShowStr>
	}
	if(button_count[4] == 1){
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <change_mode+0x1f0>)
 80016b2:	891b      	ldrh	r3, [r3, #8]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d11f      	bne.n	80016f8 <change_mode+0x1ec>
		mode = TIMER;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <change_mode+0x210>)
 80016ba:	2203      	movs	r2, #3
 80016bc:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 ff60 	bl	8002584 <lcd_Clear>
		status = INIT;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <change_mode+0x1f8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 80016ca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016d4:	22be      	movs	r2, #190	; 0xbe
 80016d6:	21fa      	movs	r1, #250	; 0xfa
 80016d8:	2032      	movs	r0, #50	; 0x32
 80016da:	f000 ff85 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 80016de:	2301      	movs	r3, #1
 80016e0:	9302      	str	r3, [sp, #8]
 80016e2:	2318      	movs	r3, #24
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	2300      	movs	r3, #0
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2300      	movs	r3, #0
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <change_mode+0x1f4>)
 80016ee:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016f2:	205a      	movs	r0, #90	; 0x5a
 80016f4:	f001 fc30 	bl	8002f58 <lcd_ShowStr>
	}
}
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000a64 	.word	0x20000a64
 8001700:	0800b8dc 	.word	0x0800b8dc
 8001704:	20000104 	.word	0x20000104
 8001708:	0800b8e4 	.word	0x0800b8e4
 800170c:	0800b8f0 	.word	0x0800b8f0
 8001710:	0800b8f8 	.word	0x0800b8f8
 8001714:	0800b904 	.word	0x0800b904
 8001718:	0800b910 	.word	0x0800b910
 800171c:	2000010c 	.word	0x2000010c

08001720 <change_speed>:

void change_speed(){// doi toc do ran
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af04      	add	r7, sp, #16
	if(button_count[12] == 1){
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <change_speed+0x194>)
 8001728:	8b1b      	ldrh	r3, [r3, #24]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d11d      	bne.n	800176a <change_speed+0x4a>
		lcd_Clear(BLACK);
 800172e:	2000      	movs	r0, #0
 8001730:	f000 ff28 	bl	8002584 <lcd_Clear>
		status = INIT;
 8001734:	4b60      	ldr	r3, [pc, #384]	; (80018b8 <change_speed+0x198>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 800173a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001744:	22be      	movs	r2, #190	; 0xbe
 8001746:	21fa      	movs	r1, #250	; 0xfa
 8001748:	2032      	movs	r0, #50	; 0x32
 800174a:	f000 ff4d 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 800174e:	2301      	movs	r3, #1
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2318      	movs	r3, #24
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2300      	movs	r3, #0
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	4a57      	ldr	r2, [pc, #348]	; (80018bc <change_speed+0x19c>)
 800175e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001762:	205a      	movs	r0, #90	; 0x5a
 8001764:	f001 fbf8 	bl	8002f58 <lcd_ShowStr>
		return;
 8001768:	e0a1      	b.n	80018ae <change_speed+0x18e>
	}
	lcd_ShowStr(0, 10, "1. EASY", WHITE, BLACK, 16, 0);
 800176a:	2300      	movs	r3, #0
 800176c:	9302      	str	r3, [sp, #8]
 800176e:	2310      	movs	r3, #16
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	2300      	movs	r3, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177a:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <change_speed+0x1a0>)
 800177c:	210a      	movs	r1, #10
 800177e:	2000      	movs	r0, #0
 8001780:	f001 fbea 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 30, "2. MEDIUM", WHITE, BLACK, 16, 0);
 8001784:	2300      	movs	r3, #0
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2310      	movs	r3, #16
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2300      	movs	r3, #0
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001794:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <change_speed+0x1a4>)
 8001796:	211e      	movs	r1, #30
 8001798:	2000      	movs	r0, #0
 800179a:	f001 fbdd 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 50, "3. HARD", WHITE, BLACK, 16, 0);
 800179e:	2300      	movs	r3, #0
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2310      	movs	r3, #16
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ae:	4a46      	ldr	r2, [pc, #280]	; (80018c8 <change_speed+0x1a8>)
 80017b0:	2132      	movs	r1, #50	; 0x32
 80017b2:	2000      	movs	r0, #0
 80017b4:	f001 fbd0 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(0, 70, "E. EXIT", WHITE, BLACK, 16, 0);
 80017b8:	2300      	movs	r3, #0
 80017ba:	9302      	str	r3, [sp, #8]
 80017bc:	2310      	movs	r3, #16
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c8:	4a40      	ldr	r2, [pc, #256]	; (80018cc <change_speed+0x1ac>)
 80017ca:	2146      	movs	r1, #70	; 0x46
 80017cc:	2000      	movs	r0, #0
 80017ce:	f001 fbc3 	bl	8002f58 <lcd_ShowStr>

	if(button_count[0] == 1){
 80017d2:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <change_speed+0x194>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d120      	bne.n	800181c <change_speed+0xfc>
		speed = 1000;
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <change_speed+0x1b0>)
 80017dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e0:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 fece 	bl	8002584 <lcd_Clear>
		status = INIT;
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <change_speed+0x198>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 80017ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017f8:	22be      	movs	r2, #190	; 0xbe
 80017fa:	21fa      	movs	r1, #250	; 0xfa
 80017fc:	2032      	movs	r0, #50	; 0x32
 80017fe:	f000 fef3 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 8001802:	2301      	movs	r3, #1
 8001804:	9302      	str	r3, [sp, #8]
 8001806:	2318      	movs	r3, #24
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <change_speed+0x19c>)
 8001812:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001816:	205a      	movs	r0, #90	; 0x5a
 8001818:	f001 fb9e 	bl	8002f58 <lcd_ShowStr>
	}
	if(button_count[1] == 1){
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <change_speed+0x194>)
 800181e:	885b      	ldrh	r3, [r3, #2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d120      	bne.n	8001866 <change_speed+0x146>
		speed = 500;
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <change_speed+0x1b0>)
 8001826:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800182a:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 800182c:	2000      	movs	r0, #0
 800182e:	f000 fea9 	bl	8002584 <lcd_Clear>
		status = INIT;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <change_speed+0x198>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 250, 190, 300, GREEN);
 8001838:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001842:	22be      	movs	r2, #190	; 0xbe
 8001844:	21fa      	movs	r1, #250	; 0xfa
 8001846:	2032      	movs	r0, #50	; 0x32
 8001848:	f000 fece 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 800184c:	2301      	movs	r3, #1
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2318      	movs	r3, #24
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2300      	movs	r3, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <change_speed+0x19c>)
 800185c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001860:	205a      	movs	r0, #90	; 0x5a
 8001862:	f001 fb79 	bl	8002f58 <lcd_ShowStr>
	}
	if(button_count[2] == 1){
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <change_speed+0x194>)
 8001868:	889b      	ldrh	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d11f      	bne.n	80018ae <change_speed+0x18e>
		speed = 100;
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <change_speed+0x1b0>)
 8001870:	2264      	movs	r2, #100	; 0x64
 8001872:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001874:	2000      	movs	r0, #0
 8001876:	f000 fe85 	bl	8002584 <lcd_Clear>
		status = INIT;
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <change_speed+0x198>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
		lcd_Fill(50, 200, 190, 300, GREEN);
 8001880:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800188a:	22be      	movs	r2, #190	; 0xbe
 800188c:	21c8      	movs	r1, #200	; 0xc8
 800188e:	2032      	movs	r0, #50	; 0x32
 8001890:	f000 feaa 	bl	80025e8 <lcd_Fill>
		lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 8001894:	2301      	movs	r3, #1
 8001896:	9302      	str	r3, [sp, #8]
 8001898:	2318      	movs	r3, #24
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2300      	movs	r3, #0
 80018a2:	4a06      	ldr	r2, [pc, #24]	; (80018bc <change_speed+0x19c>)
 80018a4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80018a8:	205a      	movs	r0, #90	; 0x5a
 80018aa:	f001 fb55 	bl	8002f58 <lcd_ShowStr>
	}
}
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000a64 	.word	0x20000a64
 80018b8:	20000104 	.word	0x20000104
 80018bc:	0800b8dc 	.word	0x0800b8dc
 80018c0:	0800b918 	.word	0x0800b918
 80018c4:	0800b920 	.word	0x0800b920
 80018c8:	0800b92c 	.word	0x0800b92c
 80018cc:	0800b910 	.word	0x0800b910
 80018d0:	20000000 	.word	0x20000000

080018d4 <displayLeaderBoard>:

void displayLeaderBoard(struct player *head){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af04      	add	r7, sp, #16
 80018da:	6078      	str	r0, [r7, #4]
	struct player *temp = head;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60fb      	str	r3, [r7, #12]
	int count_leaderboard = 1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
//	}
//	uart_EspSendString("/");
//
//	temp = head;
//	count_leaderboard = 1;
	lcd_ShowStr(15, 10, "ID", WHITE, BLACK, 24, 0);
 80018e4:	2300      	movs	r3, #0
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	2318      	movs	r3, #24
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f4:	4a66      	ldr	r2, [pc, #408]	; (8001a90 <displayLeaderBoard+0x1bc>)
 80018f6:	210a      	movs	r1, #10
 80018f8:	200f      	movs	r0, #15
 80018fa:	f001 fb2d 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(80, 10, "SCORE", WHITE, BLACK, 24, 0);
 80018fe:	2300      	movs	r3, #0
 8001900:	9302      	str	r3, [sp, #8]
 8001902:	2318      	movs	r3, #24
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2300      	movs	r3, #0
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190e:	4a61      	ldr	r2, [pc, #388]	; (8001a94 <displayLeaderBoard+0x1c0>)
 8001910:	210a      	movs	r1, #10
 8001912:	2050      	movs	r0, #80	; 0x50
 8001914:	f001 fb20 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowStr(170, 10, "MODE", WHITE, BLACK, 24, 0);
 8001918:	2300      	movs	r3, #0
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2318      	movs	r3, #24
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2300      	movs	r3, #0
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001928:	4a5b      	ldr	r2, [pc, #364]	; (8001a98 <displayLeaderBoard+0x1c4>)
 800192a:	210a      	movs	r1, #10
 800192c:	20aa      	movs	r0, #170	; 0xaa
 800192e:	f001 fb13 	bl	8002f58 <lcd_ShowStr>
	while(temp != NULL && 50+(count_leaderboard-1)*20 < 300){
 8001932:	e09c      	b.n	8001a6e <displayLeaderBoard+0x19a>
		lcd_ShowIntNum(15, 50+(count_leaderboard-1)*20, temp->player_ID, 4, WHITE, BLACK, 16);
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	3b01      	subs	r3, #1
 8001938:	b29b      	uxth	r3, r3
 800193a:	461a      	mov	r2, r3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	b29b      	uxth	r3, r3
 8001944:	3332      	adds	r3, #50	; 0x32
 8001946:	b299      	uxth	r1, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b29a      	uxth	r2, r3
 800194e:	2310      	movs	r3, #16
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	2300      	movs	r3, #0
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2304      	movs	r3, #4
 800195e:	200f      	movs	r0, #15
 8001960:	f001 f800 	bl	8002964 <lcd_ShowIntNum>
		lcd_ShowIntNum(83, 50+(count_leaderboard-1)*20, temp->player_score, 4, WHITE, BLACK, 16);
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	3b01      	subs	r3, #1
 8001968:	b29b      	uxth	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	b29b      	uxth	r3, r3
 8001974:	3332      	adds	r3, #50	; 0x32
 8001976:	b299      	uxth	r1, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	b29a      	uxth	r2, r3
 800197e:	2310      	movs	r3, #16
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	2300      	movs	r3, #0
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2304      	movs	r3, #4
 800198e:	2053      	movs	r0, #83	; 0x53
 8001990:	f000 ffe8 	bl	8002964 <lcd_ShowIntNum>
		if(temp->player_mode == NORMAL)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d116      	bne.n	80019ca <displayLeaderBoard+0xf6>
			lcd_ShowStr(170, 50+(count_leaderboard-1)*20, "NORMAL", WHITE, BLACK, 16, 0);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3332      	adds	r3, #50	; 0x32
 80019ae:	b299      	uxth	r1, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2310      	movs	r3, #16
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2300      	movs	r3, #0
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c0:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <displayLeaderBoard+0x1c8>)
 80019c2:	20aa      	movs	r0, #170	; 0xaa
 80019c4:	f001 fac8 	bl	8002f58 <lcd_ShowStr>
 80019c8:	e04b      	b.n	8001a62 <displayLeaderBoard+0x18e>
		else if(temp->player_mode == WALL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d116      	bne.n	8001a00 <displayLeaderBoard+0x12c>
			lcd_ShowStr(170, 50+(count_leaderboard-1)*20, "WALL", WHITE, BLACK, 16, 0);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3332      	adds	r3, #50	; 0x32
 80019e4:	b299      	uxth	r1, r3
 80019e6:	2300      	movs	r3, #0
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2310      	movs	r3, #16
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2300      	movs	r3, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f6:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <displayLeaderBoard+0x1cc>)
 80019f8:	20aa      	movs	r0, #170	; 0xaa
 80019fa:	f001 faad 	bl	8002f58 <lcd_ShowStr>
 80019fe:	e030      	b.n	8001a62 <displayLeaderBoard+0x18e>
		else if(temp->player_mode == WALLS)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d116      	bne.n	8001a36 <displayLeaderBoard+0x162>
			lcd_ShowStr(170, 50+(count_leaderboard-1)*20, "WALLS", WHITE, BLACK, 16, 0);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	461a      	mov	r2, r3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	3332      	adds	r3, #50	; 0x32
 8001a1a:	b299      	uxth	r1, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	2310      	movs	r3, #16
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <displayLeaderBoard+0x1d0>)
 8001a2e:	20aa      	movs	r0, #170	; 0xaa
 8001a30:	f001 fa92 	bl	8002f58 <lcd_ShowStr>
 8001a34:	e015      	b.n	8001a62 <displayLeaderBoard+0x18e>
		else
			lcd_ShowStr(170, 50+(count_leaderboard-1)*20, "TIMER", WHITE, BLACK, 16, 0);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3332      	adds	r3, #50	; 0x32
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9302      	str	r3, [sp, #8]
 8001a4e:	2310      	movs	r3, #16
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5a:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <displayLeaderBoard+0x1d4>)
 8001a5c:	20aa      	movs	r0, #170	; 0xaa
 8001a5e:	f001 fa7b 	bl	8002f58 <lcd_ShowStr>
		temp=temp->next;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	60fb      	str	r3, [r7, #12]
		count_leaderboard++;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
	while(temp != NULL && 50+(count_leaderboard-1)*20 < 300){
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d008      	beq.n	8001a86 <displayLeaderBoard+0x1b2>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	4613      	mov	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	2bf9      	cmp	r3, #249	; 0xf9
 8001a82:	f77f af57 	ble.w	8001934 <displayLeaderBoard+0x60>
	}
}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0800b934 	.word	0x0800b934
 8001a94:	0800b938 	.word	0x0800b938
 8001a98:	0800b940 	.word	0x0800b940
 8001a9c:	0800b948 	.word	0x0800b948
 8001aa0:	0800b950 	.word	0x0800b950
 8001aa4:	0800b958 	.word	0x0800b958
 8001aa8:	0800b960 	.word	0x0800b960

08001aac <fsm_machine>:

void fsm_machine(){
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aae:	b09f      	sub	sp, #124	; 0x7c
 8001ab0:	af04      	add	r7, sp, #16
	switch (status) {
 8001ab2:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <fsm_machine+0x13c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	f200 826e 	bhi.w	8001f98 <fsm_machine+0x4ec>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <fsm_machine+0x18>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001b2f 	.word	0x08001b2f
 8001ac8:	08001bc1 	.word	0x08001bc1
 8001acc:	08001f11 	.word	0x08001f11
 8001ad0:	08001b23 	.word	0x08001b23
 8001ad4:	08001b29 	.word	0x08001b29
 8001ad8:	08001add 	.word	0x08001add
	case DISPLAY_LEADERBOARD:
//		displayLeaderBoard(leaderboard);
		if(button_count[12] == 1){
 8001adc:	4b43      	ldr	r3, [pc, #268]	; (8001bec <fsm_machine+0x140>)
 8001ade:	8b1b      	ldrh	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	f040 825b 	bne.w	8001f9c <fsm_machine+0x4f0>
			lcd_Clear(BLACK);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f000 fd4c 	bl	8002584 <lcd_Clear>
			lcd_Fill(50, 250, 190, 300, GREEN);
 8001aec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001af6:	22be      	movs	r2, #190	; 0xbe
 8001af8:	21fa      	movs	r1, #250	; 0xfa
 8001afa:	2032      	movs	r0, #50	; 0x32
 8001afc:	f000 fd74 	bl	80025e8 <lcd_Fill>
			lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 8001b00:	2301      	movs	r3, #1
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	2318      	movs	r3, #24
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <fsm_machine+0x144>)
 8001b10:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001b14:	205a      	movs	r0, #90	; 0x5a
 8001b16:	f001 fa1f 	bl	8002f58 <lcd_ShowStr>
			status = INIT;
 8001b1a:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <fsm_machine+0x13c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b20:	e23c      	b.n	8001f9c <fsm_machine+0x4f0>
	case CHANGE_MODE:
		change_mode();
 8001b22:	f7ff fcf3 	bl	800150c <change_mode>
		break;
 8001b26:	e240      	b.n	8001faa <fsm_machine+0x4fe>
	case CHANGE_SPEED:
		change_speed();
 8001b28:	f7ff fdfa 	bl	8001720 <change_speed>
		break;
 8001b2c:	e23d      	b.n	8001faa <fsm_machine+0x4fe>
	case INIT:
		screen_init();
 8001b2e:	f001 fc65 	bl	80033fc <screen_init>
		enter_ID();
 8001b32:	f7ff fc47 	bl	80013c4 <enter_ID>
		//test_Adc();

		if(button_count[14] == 1){
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <fsm_machine+0x140>)
 8001b38:	8b9b      	ldrh	r3, [r3, #28]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d105      	bne.n	8001b4a <fsm_machine+0x9e>
			lcd_Clear(BLACK);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f000 fd20 	bl	8002584 <lcd_Clear>
			status = CHANGE_MODE;
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <fsm_machine+0x13c>)
 8001b46:	2203      	movs	r2, #3
 8001b48:	601a      	str	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <fsm_machine+0x140>)
 8001b4c:	8b1b      	ldrh	r3, [r3, #24]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d105      	bne.n	8001b5e <fsm_machine+0xb2>
			lcd_Clear(BLACK);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 fd16 	bl	8002584 <lcd_Clear>
			status = CHANGE_SPEED;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <fsm_machine+0x13c>)
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	601a      	str	r2, [r3, #0]
		}
		if(button_count[15] == 1){
 8001b5e:	4b23      	ldr	r3, [pc, #140]	; (8001bec <fsm_machine+0x140>)
 8001b60:	8bdb      	ldrh	r3, [r3, #30]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10a      	bne.n	8001b7c <fsm_machine+0xd0>
			lcd_Clear(BLACK);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f000 fd0c 	bl	8002584 <lcd_Clear>
			displayLeaderBoard(leaderboard);
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <fsm_machine+0x148>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff feaf 	bl	80018d4 <displayLeaderBoard>
			status = DISPLAY_LEADERBOARD;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <fsm_machine+0x13c>)
 8001b78:	2205      	movs	r2, #5
 8001b7a:	601a      	str	r2, [r3, #0]
		}

		if(isButtonStart()){
 8001b7c:	f003 fe4a 	bl	8005814 <isButtonStart>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 820c 	beq.w	8001fa0 <fsm_machine+0x4f4>
			status = PLAY;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <fsm_machine+0x13c>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//gui len Wifi
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <fsm_machine+0x14c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <fsm_machine+0x150>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	1d38      	adds	r0, r7, #4
 8001b98:	4919      	ldr	r1, [pc, #100]	; (8001c00 <fsm_machine+0x154>)
 8001b9a:	f008 fcd9 	bl	800a550 <siprintf>
//			uart_EspSendString(res);
			count = 0;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <fsm_machine+0x158>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f000 fced 	bl	8002584 <lcd_Clear>
			re_init();
 8001baa:	f001 ffa1 	bl	8003af0 <re_init>
			screen_play();
 8001bae:	f001 fc3b 	bl	8003428 <screen_play>
			fsm_mode();
 8001bb2:	f7ff fbc7 	bl	8001344 <fsm_mode>
			setTimer4(1000);
 8001bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bba:	f002 faf1 	bl	80041a0 <setTimer4>
		}
		break;
 8001bbe:	e1ef      	b.n	8001fa0 <fsm_machine+0x4f4>
	case PLAY:
		if(flag_timer4 == 1){
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <fsm_machine+0x15c>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 80b4 	bne.w	8001d32 <fsm_machine+0x286>
			setTimer4(1000);
 8001bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bce:	f002 fae7 	bl	80041a0 <setTimer4>
			if(colon == 0){
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <fsm_machine+0x160>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d11a      	bne.n	8001c10 <fsm_machine+0x164>
				led7_SetColon(1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f001 fb1a 	bl	8003214 <led7_SetColon>
				colon = 1;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <fsm_machine+0x160>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e019      	b.n	8001c1c <fsm_machine+0x170>
 8001be8:	20000104 	.word	0x20000104
 8001bec:	20000a64 	.word	0x20000a64
 8001bf0:	0800b8dc 	.word	0x0800b8dc
 8001bf4:	20000128 	.word	0x20000128
 8001bf8:	20000108 	.word	0x20000108
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	0800b968 	.word	0x0800b968
 8001c04:	20000110 	.word	0x20000110
 8001c08:	20000998 	.word	0x20000998
 8001c0c:	20000120 	.word	0x20000120
			}else{
				led7_SetColon(0);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f001 faff 	bl	8003214 <led7_SetColon>
				colon = 0;
 8001c16:	4ba5      	ldr	r3, [pc, #660]	; (8001eac <fsm_machine+0x400>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
			}
			count++;
 8001c1c:	4ba4      	ldr	r3, [pc, #656]	; (8001eb0 <fsm_machine+0x404>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	4aa3      	ldr	r2, [pc, #652]	; (8001eb0 <fsm_machine+0x404>)
 8001c24:	6013      	str	r3, [r2, #0]
			timer = count;
 8001c26:	4ba2      	ldr	r3, [pc, #648]	; (8001eb0 <fsm_machine+0x404>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4aa2      	ldr	r2, [pc, #648]	; (8001eb4 <fsm_machine+0x408>)
 8001c2c:	6013      	str	r3, [r2, #0]
			if(wall == 1){
 8001c2e:	4ba2      	ldr	r3, [pc, #648]	; (8001eb8 <fsm_machine+0x40c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d115      	bne.n	8001c62 <fsm_machine+0x1b6>
				if(count%5 == 0){
 8001c36:	4b9e      	ldr	r3, [pc, #632]	; (8001eb0 <fsm_machine+0x404>)
 8001c38:	6819      	ldr	r1, [r3, #0]
 8001c3a:	4ba0      	ldr	r3, [pc, #640]	; (8001ebc <fsm_machine+0x410>)
 8001c3c:	fb83 2301 	smull	r2, r3, r3, r1
 8001c40:	105a      	asrs	r2, r3, #1
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	1ad2      	subs	r2, r2, r3
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	1aca      	subs	r2, r1, r3
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d107      	bne.n	8001c62 <fsm_machine+0x1b6>
					if(walls == 0){
 8001c52:	4b9b      	ldr	r3, [pc, #620]	; (8001ec0 <fsm_machine+0x414>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <fsm_machine+0x1b2>
						delete_wall();
 8001c5a:	f001 fe11 	bl	8003880 <delete_wall>
					}
					spawn_wall();
 8001c5e:	f001 ffbd 	bl	8003bdc <spawn_wall>
				}
			}
			if(mode == TIMER){
 8001c62:	4b98      	ldr	r3, [pc, #608]	; (8001ec4 <fsm_machine+0x418>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d108      	bne.n	8001c7c <fsm_machine+0x1d0>
				countdown--;
 8001c6a:	4b97      	ldr	r3, [pc, #604]	; (8001ec8 <fsm_machine+0x41c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	4a95      	ldr	r2, [pc, #596]	; (8001ec8 <fsm_machine+0x41c>)
 8001c72:	6013      	str	r3, [r2, #0]
				timer = countdown;
 8001c74:	4b94      	ldr	r3, [pc, #592]	; (8001ec8 <fsm_machine+0x41c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a8e      	ldr	r2, [pc, #568]	; (8001eb4 <fsm_machine+0x408>)
 8001c7a:	6013      	str	r3, [r2, #0]
			}
			led7_SetDigit((timer%60)%10, 3, 0);
 8001c7c:	4b8d      	ldr	r3, [pc, #564]	; (8001eb4 <fsm_machine+0x408>)
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	4b92      	ldr	r3, [pc, #584]	; (8001ecc <fsm_machine+0x420>)
 8001c82:	fb83 2301 	smull	r2, r3, r3, r1
 8001c86:	440b      	add	r3, r1
 8001c88:	115a      	asrs	r2, r3, #5
 8001c8a:	17cb      	asrs	r3, r1, #31
 8001c8c:	1ad2      	subs	r2, r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	1a9b      	subs	r3, r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	1aca      	subs	r2, r1, r3
 8001c98:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <fsm_machine+0x410>)
 8001c9a:	fb83 1302 	smull	r1, r3, r3, r2
 8001c9e:	1099      	asrs	r1, r3, #2
 8001ca0:	17d3      	asrs	r3, r2, #31
 8001ca2:	1ac8      	subs	r0, r1, r3
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4403      	add	r3, r0
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	1ad0      	subs	r0, r2, r3
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2103      	movs	r1, #3
 8001cb2:	f001 fa8b 	bl	80031cc <led7_SetDigit>
			led7_SetDigit((timer%60)/10, 2, 0);
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	; (8001eb4 <fsm_machine+0x408>)
 8001cb8:	6819      	ldr	r1, [r3, #0]
 8001cba:	4b84      	ldr	r3, [pc, #528]	; (8001ecc <fsm_machine+0x420>)
 8001cbc:	fb83 2301 	smull	r2, r3, r3, r1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	115a      	asrs	r2, r3, #5
 8001cc4:	17cb      	asrs	r3, r1, #31
 8001cc6:	1ad2      	subs	r2, r2, r3
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	1aca      	subs	r2, r1, r3
 8001cd2:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <fsm_machine+0x410>)
 8001cd4:	fb83 1302 	smull	r1, r3, r3, r2
 8001cd8:	1099      	asrs	r1, r3, #2
 8001cda:	17d3      	asrs	r3, r2, #31
 8001cdc:	1acb      	subs	r3, r1, r3
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2102      	movs	r1, #2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fa72 	bl	80031cc <led7_SetDigit>
			led7_SetDigit((timer/60)%10, 1, 0);
 8001ce8:	4b72      	ldr	r3, [pc, #456]	; (8001eb4 <fsm_machine+0x408>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a77      	ldr	r2, [pc, #476]	; (8001ecc <fsm_machine+0x420>)
 8001cee:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf2:	441a      	add	r2, r3
 8001cf4:	1152      	asrs	r2, r2, #5
 8001cf6:	17db      	asrs	r3, r3, #31
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <fsm_machine+0x410>)
 8001cfc:	fb83 1302 	smull	r1, r3, r3, r2
 8001d00:	1099      	asrs	r1, r3, #2
 8001d02:	17d3      	asrs	r3, r2, #31
 8001d04:	1ac8      	subs	r0, r1, r3
 8001d06:	4603      	mov	r3, r0
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4403      	add	r3, r0
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	1ad0      	subs	r0, r2, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	2101      	movs	r1, #1
 8001d14:	f001 fa5a 	bl	80031cc <led7_SetDigit>
			led7_SetDigit((timer/60)/10, 0, 0);
 8001d18:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <fsm_machine+0x408>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a6c      	ldr	r2, [pc, #432]	; (8001ed0 <fsm_machine+0x424>)
 8001d1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d22:	1192      	asrs	r2, r2, #6
 8001d24:	17db      	asrs	r3, r3, #31
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fa4d 	bl	80031cc <led7_SetDigit>
		}
		if(isButtonUp()){
 8001d32:	f003 fd93 	bl	800585c <isButtonUp>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <fsm_machine+0x2a8>
			sw_up = 0;
 8001d3c:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <fsm_machine+0x428>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <fsm_machine+0x42c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001d48:	4b64      	ldr	r3, [pc, #400]	; (8001edc <fsm_machine+0x430>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001d4e:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <fsm_machine+0x434>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonDown()){
 8001d54:	f003 fda5 	bl	80058a2 <isButtonDown>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <fsm_machine+0x2ca>
			sw_up = 1;
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <fsm_machine+0x428>)
 8001d60:	2201      	movs	r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
			sw_down = 0;
 8001d64:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <fsm_machine+0x42c>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001d6a:	4b5c      	ldr	r3, [pc, #368]	; (8001edc <fsm_machine+0x430>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001d70:	4b5b      	ldr	r3, [pc, #364]	; (8001ee0 <fsm_machine+0x434>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonLeft()){
 8001d76:	f003 fdb9 	bl	80058ec <isButtonLeft>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00b      	beq.n	8001d98 <fsm_machine+0x2ec>
			sw_up = 1;
 8001d80:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <fsm_machine+0x428>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <fsm_machine+0x42c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
			sw_left = 0;
 8001d8c:	4b53      	ldr	r3, [pc, #332]	; (8001edc <fsm_machine+0x430>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
			sw_right = 1;
 8001d92:	4b53      	ldr	r3, [pc, #332]	; (8001ee0 <fsm_machine+0x434>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		if(isButtonRight()){
 8001d98:	f003 fdcd 	bl	8005936 <isButtonRight>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <fsm_machine+0x30e>
			sw_up = 1;
 8001da2:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <fsm_machine+0x428>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
			sw_down = 1;
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <fsm_machine+0x42c>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
			sw_left = 1;
 8001dae:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <fsm_machine+0x430>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
			sw_right = 0;
 8001db4:	4b4a      	ldr	r3, [pc, #296]	; (8001ee0 <fsm_machine+0x434>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
			//flag_timer3 = 1;
		}
		wait_check();
 8001dba:	f002 f8e3 	bl	8003f84 <wait_check>
		update_grid();
 8001dbe:	f001 fcc1 	bl	8003744 <update_grid>
		if(flag_timer3 == 1){
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <fsm_machine+0x438>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10d      	bne.n	8001de6 <fsm_machine+0x33a>
			//wait_check();
			setTimer3(speed);
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <fsm_machine+0x43c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 f9c9 	bl	8004168 <setTimer3>
			move_snake();
 8001dd6:	f001 fdb3 	bl	8003940 <move_snake>
			//check_food();
			//check_collision();
			screen_score();
 8001dda:	f001 fba1 	bl	8003520 <screen_score>
			update_grid();
 8001dde:	f001 fcb1 	bl	8003744 <update_grid>
			screen_exit();
 8001de2:	f001 fbb5 	bl	8003550 <screen_exit>
		}
		if(lose == 1 || isExit()){
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <fsm_machine+0x440>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d005      	beq.n	8001dfa <fsm_machine+0x34e>
 8001dee:	f003 fdeb 	bl	80059c8 <isExit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80d5 	beq.w	8001fa4 <fsm_machine+0x4f8>
			status = GAME_OVER;
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <fsm_machine+0x444>)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
			addPlayer(&leaderboard, ID, score, mode);
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <fsm_machine+0x448>)
 8001e02:	6819      	ldr	r1, [r3, #0]
 8001e04:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <fsm_machine+0x44c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <fsm_machine+0x418>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	483b      	ldr	r0, [pc, #236]	; (8001efc <fsm_machine+0x450>)
 8001e10:	f001 f906 	bl	8003020 <addPlayer>
			send_flag = 1;
 8001e14:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <fsm_machine+0x454>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
			char res[100];
			sprintf(res, "%d was game over\nScore : %d\nTime : %d:%d %c", ID, score, count/60, count%60, sec);//STM32 -> wifi
 8001e1a:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <fsm_machine+0x448>)
 8001e1c:	681d      	ldr	r5, [r3, #0]
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <fsm_machine+0x44c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461e      	mov	r6, r3
 8001e24:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <fsm_machine+0x404>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <fsm_machine+0x420>)
 8001e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2e:	441a      	add	r2, r3
 8001e30:	1152      	asrs	r2, r2, #5
 8001e32:	17db      	asrs	r3, r3, #31
 8001e34:	1ad0      	subs	r0, r2, r3
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <fsm_machine+0x404>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <fsm_machine+0x420>)
 8001e3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001e40:	4413      	add	r3, r2
 8001e42:	1159      	asrs	r1, r3, #5
 8001e44:	17d3      	asrs	r3, r2, #31
 8001e46:	1ac9      	subs	r1, r1, r3
 8001e48:	460b      	mov	r3, r1
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	1a5b      	subs	r3, r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	1ad1      	subs	r1, r2, r3
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <fsm_machine+0x458>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	1d3c      	adds	r4, r7, #4
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	9101      	str	r1, [sp, #4]
 8001e5c:	9000      	str	r0, [sp, #0]
 8001e5e:	4633      	mov	r3, r6
 8001e60:	462a      	mov	r2, r5
 8001e62:	4929      	ldr	r1, [pc, #164]	; (8001f08 <fsm_machine+0x45c>)
 8001e64:	4620      	mov	r0, r4
 8001e66:	f008 fb73 	bl	800a550 <siprintf>
//			uart_EspSendString(res);
			send_flag =0;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <fsm_machine+0x454>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f000 fb87 	bl	8002584 <lcd_Clear>
			lcd_Fill(50, 250, 190, 300, GREEN);
 8001e76:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e80:	22be      	movs	r2, #190	; 0xbe
 8001e82:	21fa      	movs	r1, #250	; 0xfa
 8001e84:	2032      	movs	r0, #50	; 0x32
 8001e86:	f000 fbaf 	bl	80025e8 <lcd_Fill>
			lcd_ShowStr(80,260,"RESTART",BLACK,BLACK,24,1);
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	9302      	str	r3, [sp, #8]
 8001e8e:	2318      	movs	r3, #24
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2300      	movs	r3, #0
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <fsm_machine+0x460>)
 8001e9a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001e9e:	2050      	movs	r0, #80	; 0x50
 8001ea0:	f001 f85a 	bl	8002f58 <lcd_ShowStr>
			lose = 0;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <fsm_machine+0x440>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
		}
		break;
 8001eaa:	e07b      	b.n	8001fa4 <fsm_machine+0x4f8>
 8001eac:	20000120 	.word	0x20000120
 8001eb0:	20000110 	.word	0x20000110
 8001eb4:	2000011c 	.word	0x2000011c
 8001eb8:	20000114 	.word	0x20000114
 8001ebc:	66666667 	.word	0x66666667
 8001ec0:	20000118 	.word	0x20000118
 8001ec4:	2000010c 	.word	0x2000010c
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	88888889 	.word	0x88888889
 8001ed0:	1b4e81b5 	.word	0x1b4e81b5
 8001ed4:	20000028 	.word	0x20000028
 8001ed8:	2000002c 	.word	0x2000002c
 8001edc:	20000034 	.word	0x20000034
 8001ee0:	20000030 	.word	0x20000030
 8001ee4:	20000992 	.word	0x20000992
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000988 	.word	0x20000988
 8001ef0:	20000104 	.word	0x20000104
 8001ef4:	20000108 	.word	0x20000108
 8001ef8:	20000984 	.word	0x20000984
 8001efc:	20000128 	.word	0x20000128
 8001f00:	20000124 	.word	0x20000124
 8001f04:	20000004 	.word	0x20000004
 8001f08:	0800b97c 	.word	0x0800b97c
 8001f0c:	0800b9a8 	.word	0x0800b9a8
	case GAME_OVER:
		enter_ID();
 8001f10:	f7ff fa58 	bl	80013c4 <enter_ID>
		screen_game_over();
 8001f14:	f001 fb32 	bl	800357c <screen_game_over>
		if(button_count[14] == 1){
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <fsm_machine+0x508>)
 8001f1a:	8b9b      	ldrh	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <fsm_machine+0x480>
			lcd_Clear(BLACK);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f000 fb2f 	bl	8002584 <lcd_Clear>
			status = CHANGE_MODE;
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <fsm_machine+0x50c>)
 8001f28:	2203      	movs	r2, #3
 8001f2a:	601a      	str	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <fsm_machine+0x508>)
 8001f2e:	8b1b      	ldrh	r3, [r3, #24]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d105      	bne.n	8001f40 <fsm_machine+0x494>
			lcd_Clear(BLACK);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 fb25 	bl	8002584 <lcd_Clear>
			status = CHANGE_SPEED;
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <fsm_machine+0x50c>)
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
		}

		if(button_count[15] == 1){
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <fsm_machine+0x508>)
 8001f42:	8bdb      	ldrh	r3, [r3, #30]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10a      	bne.n	8001f5e <fsm_machine+0x4b2>
			lcd_Clear(BLACK);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 fb1b 	bl	8002584 <lcd_Clear>
			displayLeaderBoard(leaderboard);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <fsm_machine+0x510>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fcbe 	bl	80018d4 <displayLeaderBoard>
			status = DISPLAY_LEADERBOARD;
 8001f58:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <fsm_machine+0x50c>)
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	601a      	str	r2, [r3, #0]
		}

		if(isButtonRestart()){
 8001f5e:	f003 fd0f 	bl	8005980 <isButtonRestart>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01f      	beq.n	8001fa8 <fsm_machine+0x4fc>
//			status = INIT;
//			lcd_Clear(BLACK);
//			re_init();
			char res[100];
			sprintf(res, "%d is playing %c", ID, sec);//STM32->Wifi
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <fsm_machine+0x514>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <fsm_machine+0x518>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	1d38      	adds	r0, r7, #4
 8001f72:	4915      	ldr	r1, [pc, #84]	; (8001fc8 <fsm_machine+0x51c>)
 8001f74:	f008 faec 	bl	800a550 <siprintf>
//			uart_EspSendString(res);
			count = 0;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <fsm_machine+0x520>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
			status = PLAY;
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <fsm_machine+0x50c>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f000 fafd 	bl	8002584 <lcd_Clear>
			re_init();
 8001f8a:	f001 fdb1 	bl	8003af0 <re_init>
			screen_play();
 8001f8e:	f001 fa4b 	bl	8003428 <screen_play>
			fsm_mode();
 8001f92:	f7ff f9d7 	bl	8001344 <fsm_mode>
		}
		break;
 8001f96:	e007      	b.n	8001fa8 <fsm_machine+0x4fc>
	default:
		break;
 8001f98:	bf00      	nop
 8001f9a:	e006      	b.n	8001faa <fsm_machine+0x4fe>
		break;
 8001f9c:	bf00      	nop
 8001f9e:	e004      	b.n	8001faa <fsm_machine+0x4fe>
		break;
 8001fa0:	bf00      	nop
 8001fa2:	e002      	b.n	8001faa <fsm_machine+0x4fe>
		break;
 8001fa4:	bf00      	nop
 8001fa6:	e000      	b.n	8001faa <fsm_machine+0x4fe>
		break;
 8001fa8:	bf00      	nop
	}
}
 8001faa:	bf00      	nop
 8001fac:	376c      	adds	r7, #108	; 0x6c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000a64 	.word	0x20000a64
 8001fb8:	20000104 	.word	0x20000104
 8001fbc:	20000128 	.word	0x20000128
 8001fc0:	20000108 	.word	0x20000108
 8001fc4:	20000004 	.word	0x20000004
 8001fc8:	0800b968 	.word	0x0800b968
 8001fcc:	20000110 	.word	0x20000110

08001fd0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001fea:	463b      	mov	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	615a      	str	r2, [r3, #20]
 8001ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001ffc:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <MX_FSMC_Init+0xec>)
 8001ffe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002002:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <MX_FSMC_Init+0xec>)
 8002006:	4a2e      	ldr	r2, [pc, #184]	; (80020c0 <MX_FSMC_Init+0xf0>)
 8002008:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <MX_FSMC_Init+0xec>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <MX_FSMC_Init+0xec>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002016:	4b29      	ldr	r3, [pc, #164]	; (80020bc <MX_FSMC_Init+0xec>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <MX_FSMC_Init+0xec>)
 800201e:	2210      	movs	r2, #16
 8002020:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <MX_FSMC_Init+0xec>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <MX_FSMC_Init+0xec>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MX_FSMC_Init+0xec>)
 8002030:	2200      	movs	r2, #0
 8002032:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_FSMC_Init+0xec>)
 8002036:	2200      	movs	r2, #0
 8002038:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MX_FSMC_Init+0xec>)
 800203c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_FSMC_Init+0xec>)
 8002044:	2200      	movs	r2, #0
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_FSMC_Init+0xec>)
 800204a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002050:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <MX_FSMC_Init+0xec>)
 8002052:	2200      	movs	r2, #0
 8002054:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_FSMC_Init+0xec>)
 8002058:	2200      	movs	r2, #0
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <MX_FSMC_Init+0xec>)
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8002062:	230f      	movs	r3, #15
 8002064:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8002066:	230f      	movs	r3, #15
 8002068:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800206a:	233c      	movs	r3, #60	; 0x3c
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8002072:	2310      	movs	r3, #16
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8002076:	2311      	movs	r3, #17
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800207e:	2308      	movs	r3, #8
 8002080:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8002082:	230f      	movs	r3, #15
 8002084:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8002086:	2309      	movs	r3, #9
 8002088:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800208e:	2310      	movs	r3, #16
 8002090:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8002092:	2311      	movs	r3, #17
 8002094:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800209a:	463a      	mov	r2, r7
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <MX_FSMC_Init+0xec>)
 80020a4:	f006 ff68 	bl	8008f78 <HAL_SRAM_Init>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80020ae:	f001 f99f 	bl	80033f0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80020b2:	bf00      	nop
 80020b4:	3738      	adds	r7, #56	; 0x38
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000a84 	.word	0x20000a84
 80020c0:	a0000104 	.word	0xa0000104

080020c4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80020d8:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_FSMC_MspInit+0x88>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d131      	bne.n	8002144 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_FSMC_MspInit+0x88>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_FSMC_MspInit+0x8c>)
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_FSMC_MspInit+0x8c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6393      	str	r3, [r2, #56]	; 0x38
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <HAL_FSMC_MspInit+0x8c>)
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002102:	f64f 7388 	movw	r3, #65416	; 0xff88
 8002106:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002114:	230c      	movs	r3, #12
 8002116:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	4619      	mov	r1, r3
 800211c:	480d      	ldr	r0, [pc, #52]	; (8002154 <HAL_FSMC_MspInit+0x90>)
 800211e:	f004 fb95 	bl	800684c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002122:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8002126:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002134:	230c      	movs	r3, #12
 8002136:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	4619      	mov	r1, r3
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <HAL_FSMC_MspInit+0x94>)
 800213e:	f004 fb85 	bl	800684c <HAL_GPIO_Init>
 8002142:	e000      	b.n	8002146 <HAL_FSMC_MspInit+0x82>
    return;
 8002144:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000012c 	.word	0x2000012c
 8002150:	40023800 	.word	0x40023800
 8002154:	40021000 	.word	0x40021000
 8002158:	40020c00 	.word	0x40020c00

0800215c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002164:	f7ff ffae 	bl	80020c4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
 800218a:	4b7e      	ldr	r3, [pc, #504]	; (8002384 <MX_GPIO_Init+0x214>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a7d      	ldr	r2, [pc, #500]	; (8002384 <MX_GPIO_Init+0x214>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <MX_GPIO_Init+0x214>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	623b      	str	r3, [r7, #32]
 80021a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	4b77      	ldr	r3, [pc, #476]	; (8002384 <MX_GPIO_Init+0x214>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a76      	ldr	r2, [pc, #472]	; (8002384 <MX_GPIO_Init+0x214>)
 80021ac:	f043 0304 	orr.w	r3, r3, #4
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b74      	ldr	r3, [pc, #464]	; (8002384 <MX_GPIO_Init+0x214>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	4b70      	ldr	r3, [pc, #448]	; (8002384 <MX_GPIO_Init+0x214>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a6f      	ldr	r2, [pc, #444]	; (8002384 <MX_GPIO_Init+0x214>)
 80021c8:	f043 0320 	orr.w	r3, r3, #32
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <MX_GPIO_Init+0x214>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	4b69      	ldr	r3, [pc, #420]	; (8002384 <MX_GPIO_Init+0x214>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a68      	ldr	r2, [pc, #416]	; (8002384 <MX_GPIO_Init+0x214>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b66      	ldr	r3, [pc, #408]	; (8002384 <MX_GPIO_Init+0x214>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b62      	ldr	r3, [pc, #392]	; (8002384 <MX_GPIO_Init+0x214>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a61      	ldr	r2, [pc, #388]	; (8002384 <MX_GPIO_Init+0x214>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <MX_GPIO_Init+0x214>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <MX_GPIO_Init+0x214>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a5a      	ldr	r2, [pc, #360]	; (8002384 <MX_GPIO_Init+0x214>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b58      	ldr	r3, [pc, #352]	; (8002384 <MX_GPIO_Init+0x214>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b54      	ldr	r3, [pc, #336]	; (8002384 <MX_GPIO_Init+0x214>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a53      	ldr	r2, [pc, #332]	; (8002384 <MX_GPIO_Init+0x214>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b51      	ldr	r3, [pc, #324]	; (8002384 <MX_GPIO_Init+0x214>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <MX_GPIO_Init+0x214>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <MX_GPIO_Init+0x214>)
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <MX_GPIO_Init+0x214>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	2170      	movs	r1, #112	; 0x70
 800226a:	4847      	ldr	r0, [pc, #284]	; (8002388 <MX_GPIO_Init+0x218>)
 800226c:	f004 fca2 	bl	8006bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8002270:	2200      	movs	r2, #0
 8002272:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8002276:	4845      	ldr	r0, [pc, #276]	; (800238c <MX_GPIO_Init+0x21c>)
 8002278:	f004 fc9c 	bl	8006bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 800227c:	2200      	movs	r2, #0
 800227e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002282:	4843      	ldr	r0, [pc, #268]	; (8002390 <MX_GPIO_Init+0x220>)
 8002284:	f004 fc96 	bl	8006bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228e:	4841      	ldr	r0, [pc, #260]	; (8002394 <MX_GPIO_Init+0x224>)
 8002290:	f004 fc90 	bl	8006bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8002294:	2200      	movs	r2, #0
 8002296:	2108      	movs	r1, #8
 8002298:	483f      	ldr	r0, [pc, #252]	; (8002398 <MX_GPIO_Init+0x228>)
 800229a:	f004 fc8b 	bl	8006bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800229e:	2370      	movs	r3, #112	; 0x70
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a2:	2301      	movs	r3, #1
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b2:	4619      	mov	r1, r3
 80022b4:	4834      	ldr	r0, [pc, #208]	; (8002388 <MX_GPIO_Init+0x218>)
 80022b6:	f004 fac9 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 80022ba:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c0:	2301      	movs	r3, #1
 80022c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c8:	2300      	movs	r3, #0
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d0:	4619      	mov	r1, r3
 80022d2:	482e      	ldr	r0, [pc, #184]	; (800238c <MX_GPIO_Init+0x21c>)
 80022d4:	f004 faba 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e8:	4619      	mov	r1, r3
 80022ea:	482a      	ldr	r0, [pc, #168]	; (8002394 <MX_GPIO_Init+0x224>)
 80022ec:	f004 faae 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80022f0:	2330      	movs	r3, #48	; 0x30
 80022f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	4619      	mov	r1, r3
 8002302:	4822      	ldr	r0, [pc, #136]	; (800238c <MX_GPIO_Init+0x21c>)
 8002304:	f004 faa2 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8002308:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230e:	2301      	movs	r3, #1
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002316:	2300      	movs	r3, #0
 8002318:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	481b      	ldr	r0, [pc, #108]	; (8002390 <MX_GPIO_Init+0x220>)
 8002322:	f004 fa93 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8002326:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002330:	2301      	movs	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4814      	ldr	r0, [pc, #80]	; (800238c <MX_GPIO_Init+0x21c>)
 800233c:	f004 fa86 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8002340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002346:	2301      	movs	r3, #1
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002356:	4619      	mov	r1, r3
 8002358:	480e      	ldr	r0, [pc, #56]	; (8002394 <MX_GPIO_Init+0x224>)
 800235a:	f004 fa77 	bl	800684c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800235e:	2308      	movs	r3, #8
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	4808      	ldr	r0, [pc, #32]	; (8002398 <MX_GPIO_Init+0x228>)
 8002376:	f004 fa69 	bl	800684c <HAL_GPIO_Init>

}
 800237a:	bf00      	nop
 800237c:	3738      	adds	r7, #56	; 0x38
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800
 8002388:	40021000 	.word	0x40021000
 800238c:	40020800 	.word	0x40020800
 8002390:	40021800 	.word	0x40021800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020c00 	.word	0x40020c00

0800239c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <MX_I2C1_Init+0x50>)
 80023a2:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <MX_I2C1_Init+0x54>)
 80023a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_I2C1_Init+0x50>)
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <MX_I2C1_Init+0x58>)
 80023aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <MX_I2C1_Init+0x50>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_I2C1_Init+0x50>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_I2C1_Init+0x50>)
 80023ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <MX_I2C1_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_I2C1_Init+0x50>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <MX_I2C1_Init+0x50>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_I2C1_Init+0x50>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d8:	4804      	ldr	r0, [pc, #16]	; (80023ec <MX_I2C1_Init+0x50>)
 80023da:	f004 fc05 	bl	8006be8 <HAL_I2C_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023e4:	f001 f804 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000ad4 	.word	0x20000ad4
 80023f0:	40005400 	.word	0x40005400
 80023f4:	000186a0 	.word	0x000186a0

080023f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_I2C_MspInit+0x84>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d12b      	bne.n	8002472 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_I2C_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_I2C_MspInit+0x88>)
 8002424:	f043 0302 	orr.w	r3, r3, #2
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_I2C_MspInit+0x88>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002436:	23c0      	movs	r3, #192	; 0xc0
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800243a:	2312      	movs	r3, #18
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002446:	2304      	movs	r3, #4
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <HAL_I2C_MspInit+0x8c>)
 8002452:	f004 f9fb 	bl	800684c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_I2C_MspInit+0x88>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_I2C_MspInit+0x88>)
 8002460:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_I2C_MspInit+0x88>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002472:	bf00      	nop
 8002474:	3728      	adds	r7, #40	; 0x28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40005400 	.word	0x40005400
 8002480:	40023800 	.word	0x40023800
 8002484:	40020400 	.word	0x40020400

08002488 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <LCD_WR_REG+0x1c>)
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	8013      	strh	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	600ffffe 	.word	0x600ffffe

080024a8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80024b2:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <LCD_WR_DATA+0x1c>)
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	8053      	strh	r3, [r2, #2]
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	600ffffe 	.word	0x600ffffe

080024c8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <LCD_RD_DATA+0x20>)
 80024d0:	885b      	ldrh	r3, [r3, #2]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	80fb      	strh	r3, [r7, #6]
	return ram;
 80024d6:	88fb      	ldrh	r3, [r7, #6]
 80024d8:	b29b      	uxth	r3, r3
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	600ffffe 	.word	0x600ffffe

080024ec <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4604      	mov	r4, r0
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	4623      	mov	r3, r4
 80024fc:	80fb      	strh	r3, [r7, #6]
 80024fe:	4603      	mov	r3, r0
 8002500:	80bb      	strh	r3, [r7, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	807b      	strh	r3, [r7, #2]
 8002506:	4613      	mov	r3, r2
 8002508:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800250a:	202a      	movs	r0, #42	; 0x2a
 800250c:	f7ff ffbc 	bl	8002488 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	b29b      	uxth	r3, r3
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffc6 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	b29b      	uxth	r3, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ffc0 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8002528:	887b      	ldrh	r3, [r7, #2]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29b      	uxth	r3, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ffba 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	b29b      	uxth	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ffb4 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8002540:	202b      	movs	r0, #43	; 0x2b
 8002542:	f7ff ffa1 	bl	8002488 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8002546:	88bb      	ldrh	r3, [r7, #4]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29b      	uxth	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffab 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8002552:	88bb      	ldrh	r3, [r7, #4]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ffa5 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800255e:	883b      	ldrh	r3, [r7, #0]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29b      	uxth	r3, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff9f 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 800256a:	883b      	ldrh	r3, [r7, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff99 	bl	80024a8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	f7ff ff86 	bl	8002488 <LCD_WR_REG>
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}

08002584 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <lcd_Clear+0x60>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <lcd_Clear+0x60>)
 8002598:	885b      	ldrh	r3, [r3, #2]
 800259a:	3b01      	subs	r3, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	2100      	movs	r1, #0
 80025a0:	2000      	movs	r0, #0
 80025a2:	f7ff ffa3 	bl	80024ec <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	81fb      	strh	r3, [r7, #14]
 80025aa:	e011      	b.n	80025d0 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	81bb      	strh	r3, [r7, #12]
 80025b0:	e006      	b.n	80025c0 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff77 	bl	80024a8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80025ba:	89bb      	ldrh	r3, [r7, #12]
 80025bc:	3301      	adds	r3, #1
 80025be:	81bb      	strh	r3, [r7, #12]
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <lcd_Clear+0x60>)
 80025c2:	885b      	ldrh	r3, [r3, #2]
 80025c4:	89ba      	ldrh	r2, [r7, #12]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3f3      	bcc.n	80025b2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	3301      	adds	r3, #1
 80025ce:	81fb      	strh	r3, [r7, #14]
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <lcd_Clear+0x60>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	89fa      	ldrh	r2, [r7, #14]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d3e8      	bcc.n	80025ac <lcd_Clear+0x28>
		}
	}
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000b28 	.word	0x20000b28

080025e8 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	80fb      	strh	r3, [r7, #6]
 80025fa:	4603      	mov	r3, r0
 80025fc:	80bb      	strh	r3, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
 8002602:	4613      	mov	r3, r2
 8002604:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	883b      	ldrh	r3, [r7, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	b29b      	uxth	r3, r3
 8002612:	88b9      	ldrh	r1, [r7, #4]
 8002614:	88f8      	ldrh	r0, [r7, #6]
 8002616:	f7ff ff69 	bl	80024ec <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800261a:	88bb      	ldrh	r3, [r7, #4]
 800261c:	81fb      	strh	r3, [r7, #14]
 800261e:	e010      	b.n	8002642 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	81bb      	strh	r3, [r7, #12]
 8002624:	e006      	b.n	8002634 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8002626:	8c3b      	ldrh	r3, [r7, #32]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff3d 	bl	80024a8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800262e:	89bb      	ldrh	r3, [r7, #12]
 8002630:	3301      	adds	r3, #1
 8002632:	81bb      	strh	r3, [r7, #12]
 8002634:	89ba      	ldrh	r2, [r7, #12]
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	429a      	cmp	r2, r3
 800263a:	d3f4      	bcc.n	8002626 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	3301      	adds	r3, #1
 8002640:	81fb      	strh	r3, [r7, #14]
 8002642:	89fa      	ldrh	r2, [r7, #14]
 8002644:	883b      	ldrh	r3, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3ea      	bcc.n	8002620 <lcd_Fill+0x38>
		}
	}
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}

08002654 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	80fb      	strh	r3, [r7, #6]
 800265e:	460b      	mov	r3, r1
 8002660:	80bb      	strh	r3, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	88fa      	ldrh	r2, [r7, #6]
 800266a:	88b9      	ldrh	r1, [r7, #4]
 800266c:	88f8      	ldrh	r0, [r7, #6]
 800266e:	f7ff ff3d 	bl	80024ec <lcd_AddressSet>
	LCD_WR_DATA(color);
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff17 	bl	80024a8 <LCD_WR_DATA>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8002682:	b590      	push	{r4, r7, lr}
 8002684:	b08d      	sub	sp, #52	; 0x34
 8002686:	af00      	add	r7, sp, #0
 8002688:	4604      	mov	r4, r0
 800268a:	4608      	mov	r0, r1
 800268c:	4611      	mov	r1, r2
 800268e:	461a      	mov	r2, r3
 8002690:	4623      	mov	r3, r4
 8002692:	80fb      	strh	r3, [r7, #6]
 8002694:	4603      	mov	r3, r0
 8002696:	80bb      	strh	r3, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a4:	2300      	movs	r3, #0
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80026a8:	887a      	ldrh	r2, [r7, #2]
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80026b0:	883a      	ldrh	r2, [r7, #0]
 80026b2:	88bb      	ldrh	r3, [r7, #4]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80026bc:	88bb      	ldrh	r3, [r7, #4]
 80026be:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	dd02      	ble.n	80026cc <lcd_DrawLine+0x4a>
 80026c6:	2301      	movs	r3, #1
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e00b      	b.n	80026e4 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <lcd_DrawLine+0x56>
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e005      	b.n	80026e4 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 80026d8:	f04f 33ff 	mov.w	r3, #4294967295
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	425b      	negs	r3, r3
 80026e2:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	dd02      	ble.n	80026f0 <lcd_DrawLine+0x6e>
 80026ea:	2301      	movs	r3, #1
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	e00b      	b.n	8002708 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d102      	bne.n	80026fc <lcd_DrawLine+0x7a>
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	e005      	b.n	8002708 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	425b      	negs	r3, r3
 8002706:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8002708:	6a3a      	ldr	r2, [r7, #32]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	dd02      	ble.n	8002716 <lcd_DrawLine+0x94>
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	e001      	b.n	800271a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800271a:	2300      	movs	r3, #0
 800271c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800271e:	e02b      	b.n	8002778 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	b29b      	uxth	r3, r3
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	b291      	uxth	r1, r2
 8002728:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff91 	bl	8002654 <lcd_DrawPoint>
		xerr+=delta_x;
 8002732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	4413      	add	r3, r2
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	4413      	add	r3, r2
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8002742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	429a      	cmp	r2, r3
 8002748:	dd07      	ble.n	800275a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800274a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	429a      	cmp	r2, r3
 8002760:	dd07      	ble.n	8002772 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8002772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002774:	3301      	adds	r3, #1
 8002776:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	429a      	cmp	r2, r3
 800277e:	dacf      	bge.n	8002720 <lcd_DrawLine+0x9e>
		}
	}
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3734      	adds	r7, #52	; 0x34
 8002786:	46bd      	mov	sp, r7
 8002788:	bd90      	pop	{r4, r7, pc}
	...

0800278c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	4604      	mov	r4, r0
 8002794:	4608      	mov	r0, r1
 8002796:	4611      	mov	r1, r2
 8002798:	461a      	mov	r2, r3
 800279a:	4623      	mov	r3, r4
 800279c:	80fb      	strh	r3, [r7, #6]
 800279e:	4603      	mov	r3, r0
 80027a0:	80bb      	strh	r3, [r7, #4]
 80027a2:	460b      	mov	r3, r1
 80027a4:	70fb      	strb	r3, [r7, #3]
 80027a6:	4613      	mov	r3, r2
 80027a8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 80027b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027dc:	b29b      	uxth	r3, r3
 80027de:	fb12 f303 	smulbb	r3, r2, r3
 80027e2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	3b20      	subs	r3, #32
 80027e8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29c      	uxth	r4, r3
 80027f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	88bb      	ldrh	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	88b9      	ldrh	r1, [r7, #4]
 800280a:	88f8      	ldrh	r0, [r7, #6]
 800280c:	4622      	mov	r2, r4
 800280e:	f7ff fe6d 	bl	80024ec <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8002812:	2300      	movs	r3, #0
 8002814:	827b      	strh	r3, [r7, #18]
 8002816:	e07a      	b.n	800290e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8002818:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d028      	beq.n	8002872 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8002820:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002824:	2b10      	cmp	r3, #16
 8002826:	d108      	bne.n	800283a <lcd_ShowChar+0xae>
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	8a7b      	ldrh	r3, [r7, #18]
 800282c:	493c      	ldr	r1, [pc, #240]	; (8002920 <lcd_ShowChar+0x194>)
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	440a      	add	r2, r1
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	75fb      	strb	r3, [r7, #23]
 8002838:	e01b      	b.n	8002872 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 800283a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800283e:	2b18      	cmp	r3, #24
 8002840:	d10b      	bne.n	800285a <lcd_ShowChar+0xce>
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	8a79      	ldrh	r1, [r7, #18]
 8002846:	4837      	ldr	r0, [pc, #220]	; (8002924 <lcd_ShowChar+0x198>)
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	4403      	add	r3, r0
 8002852:	440b      	add	r3, r1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	75fb      	strb	r3, [r7, #23]
 8002858:	e00b      	b.n	8002872 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 800285a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800285e:	2b20      	cmp	r3, #32
 8002860:	d15a      	bne.n	8002918 <lcd_ShowChar+0x18c>
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	8a7b      	ldrh	r3, [r7, #18]
 8002866:	4930      	ldr	r1, [pc, #192]	; (8002928 <lcd_ShowChar+0x19c>)
 8002868:	0192      	lsls	r2, r2, #6
 800286a:	440a      	add	r2, r1
 800286c:	4413      	add	r3, r2
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8002872:	2300      	movs	r3, #0
 8002874:	75bb      	strb	r3, [r7, #22]
 8002876:	e044      	b.n	8002902 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8002878:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800287c:	2b00      	cmp	r3, #0
 800287e:	d120      	bne.n	80028c2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8002880:	7dfa      	ldrb	r2, [r7, #23]
 8002882:	7dbb      	ldrb	r3, [r7, #22]
 8002884:	fa42 f303 	asr.w	r3, r2, r3
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <lcd_ShowChar+0x10e>
 8002890:	883b      	ldrh	r3, [r7, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fe08 	bl	80024a8 <LCD_WR_DATA>
 8002898:	e003      	b.n	80028a2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 800289a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fe03 	bl	80024a8 <LCD_WR_DATA>
				m++;
 80028a2:	7d7b      	ldrb	r3, [r7, #21]
 80028a4:	3301      	adds	r3, #1
 80028a6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 80028a8:	7d7b      	ldrb	r3, [r7, #21]
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80028b0:	fb02 f201 	mul.w	r2, r2, r1
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d11f      	bne.n	80028fc <lcd_ShowChar+0x170>
				{
					m=0;
 80028bc:	2300      	movs	r3, #0
 80028be:	757b      	strb	r3, [r7, #21]
					break;
 80028c0:	e022      	b.n	8002908 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 80028c2:	7dfa      	ldrb	r2, [r7, #23]
 80028c4:	7dbb      	ldrb	r3, [r7, #22]
 80028c6:	fa42 f303 	asr.w	r3, r2, r3
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <lcd_ShowChar+0x152>
 80028d2:	883a      	ldrh	r2, [r7, #0]
 80028d4:	88b9      	ldrh	r1, [r7, #4]
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff febb 	bl	8002654 <lcd_DrawPoint>
				x++;
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	3301      	adds	r3, #1
 80028e2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	8a3b      	ldrh	r3, [r7, #16]
 80028e8:	1ad2      	subs	r2, r2, r3
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d105      	bne.n	80028fc <lcd_ShowChar+0x170>
				{
					x=x0;
 80028f0:	8a3b      	ldrh	r3, [r7, #16]
 80028f2:	80fb      	strh	r3, [r7, #6]
					y++;
 80028f4:	88bb      	ldrh	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	80bb      	strh	r3, [r7, #4]
					break;
 80028fa:	e005      	b.n	8002908 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 80028fc:	7dbb      	ldrb	r3, [r7, #22]
 80028fe:	3301      	adds	r3, #1
 8002900:	75bb      	strb	r3, [r7, #22]
 8002902:	7dbb      	ldrb	r3, [r7, #22]
 8002904:	2b07      	cmp	r3, #7
 8002906:	d9b7      	bls.n	8002878 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	3301      	adds	r3, #1
 800290c:	827b      	strh	r3, [r7, #18]
 800290e:	8a7a      	ldrh	r2, [r7, #18]
 8002910:	89bb      	ldrh	r3, [r7, #12]
 8002912:	429a      	cmp	r2, r3
 8002914:	d380      	bcc.n	8002818 <lcd_ShowChar+0x8c>
 8002916:	e000      	b.n	800291a <lcd_ShowChar+0x18e>
		else return;
 8002918:	bf00      	nop
				}
			}
		}
	}
}
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	0800bb18 	.word	0x0800bb18
 8002924:	0800c108 	.word	0x0800c108
 8002928:	0800d2d8 	.word	0x0800d2d8

0800292c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	460a      	mov	r2, r1
 8002936:	71fb      	strb	r3, [r7, #7]
 8002938:	4613      	mov	r3, r2
 800293a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800293c:	2301      	movs	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8002940:	e004      	b.n	800294c <mypow+0x20>
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	79bb      	ldrb	r3, [r7, #6]
 800294e:	1e5a      	subs	r2, r3, #1
 8002950:	71ba      	strb	r2, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f5      	bne.n	8002942 <mypow+0x16>
	return result;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b089      	sub	sp, #36	; 0x24
 8002968:	af04      	add	r7, sp, #16
 800296a:	4604      	mov	r4, r0
 800296c:	4608      	mov	r0, r1
 800296e:	4611      	mov	r1, r2
 8002970:	461a      	mov	r2, r3
 8002972:	4623      	mov	r3, r4
 8002974:	80fb      	strh	r3, [r7, #6]
 8002976:	4603      	mov	r3, r0
 8002978:	80bb      	strh	r3, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	807b      	strh	r3, [r7, #2]
 800297e:	4613      	mov	r3, r2
 8002980:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8002982:	2300      	movs	r3, #0
 8002984:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8002986:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e059      	b.n	8002a48 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8002994:	887c      	ldrh	r4, [r7, #2]
 8002996:	787a      	ldrb	r2, [r7, #1]
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	200a      	movs	r0, #10
 80029a6:	f7ff ffc1 	bl	800292c <mypow>
 80029aa:	4603      	mov	r3, r0
 80029ac:	fbb4 f1f3 	udiv	r1, r4, r3
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <lcd_ShowIntNum+0xf8>)
 80029b2:	fba3 2301 	umull	r2, r3, r3, r1
 80029b6:	08da      	lsrs	r2, r3, #3
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	1aca      	subs	r2, r1, r3
 80029c2:	4613      	mov	r3, r2
 80029c4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80029c6:	7bbb      	ldrb	r3, [r7, #14]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d121      	bne.n	8002a10 <lcd_ShowIntNum+0xac>
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	787b      	ldrb	r3, [r7, #1]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	429a      	cmp	r2, r3
 80029d4:	da1c      	bge.n	8002a10 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80029d6:	7b3b      	ldrb	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d117      	bne.n	8002a0c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	7b7b      	ldrb	r3, [r7, #13]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	fb12 f303 	smulbb	r3, r2, r3
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	4413      	add	r3, r2
 80029ee:	b298      	uxth	r0, r3
 80029f0:	8c3a      	ldrh	r2, [r7, #32]
 80029f2:	88b9      	ldrh	r1, [r7, #4]
 80029f4:	2300      	movs	r3, #0
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	2220      	movs	r2, #32
 8002a06:	f7ff fec1 	bl	800278c <lcd_ShowChar>
				continue;
 8002a0a:	e01a      	b.n	8002a42 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	7b7b      	ldrb	r3, [r7, #13]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	fb12 f303 	smulbb	r3, r2, r3
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	4413      	add	r3, r2
 8002a22:	b298      	uxth	r0, r3
 8002a24:	7b3b      	ldrb	r3, [r7, #12]
 8002a26:	3330      	adds	r3, #48	; 0x30
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8c3c      	ldrh	r4, [r7, #32]
 8002a2c:	88b9      	ldrh	r1, [r7, #4]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	9302      	str	r3, [sp, #8]
 8002a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4623      	mov	r3, r4
 8002a3e:	f7ff fea5 	bl	800278c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	3301      	adds	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	787b      	ldrb	r3, [r7, #1]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3a1      	bcc.n	8002994 <lcd_ShowIntNum+0x30>
	}
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	cccccccd 	.word	0xcccccccd

08002a60 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d007      	beq.n	8002a8a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <lcd_SetDir+0x44>)
 8002a7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a80:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <lcd_SetDir+0x44>)
 8002a84:	22f0      	movs	r2, #240	; 0xf0
 8002a86:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002a88:	e006      	b.n	8002a98 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <lcd_SetDir+0x44>)
 8002a8c:	22f0      	movs	r2, #240	; 0xf0
 8002a8e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <lcd_SetDir+0x44>)
 8002a92:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a96:	805a      	strh	r2, [r3, #2]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	20000b28 	.word	0x20000b28

08002aa8 <lcd_init>:


void lcd_init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002aac:	2200      	movs	r2, #0
 8002aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab2:	48aa      	ldr	r0, [pc, #680]	; (8002d5c <lcd_init+0x2b4>)
 8002ab4:	f004 f87e 	bl	8006bb4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002ab8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002abc:	f003 f844 	bl	8005b48 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ac6:	48a5      	ldr	r0, [pc, #660]	; (8002d5c <lcd_init+0x2b4>)
 8002ac8:	f004 f874 	bl	8006bb4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ad0:	f003 f83a 	bl	8005b48 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7ff ffc3 	bl	8002a60 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002ada:	20d3      	movs	r0, #211	; 0xd3
 8002adc:	f7ff fcd4 	bl	8002488 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8002ae0:	f7ff fcf2 	bl	80024c8 <LCD_RD_DATA>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b9d      	ldr	r3, [pc, #628]	; (8002d60 <lcd_init+0x2b8>)
 8002aea:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002aec:	f7ff fcec 	bl	80024c8 <LCD_RD_DATA>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b9a      	ldr	r3, [pc, #616]	; (8002d60 <lcd_init+0x2b8>)
 8002af6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002af8:	f7ff fce6 	bl	80024c8 <LCD_RD_DATA>
 8002afc:	4603      	mov	r3, r0
 8002afe:	461a      	mov	r2, r3
 8002b00:	4b97      	ldr	r3, [pc, #604]	; (8002d60 <lcd_init+0x2b8>)
 8002b02:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8002b04:	4b96      	ldr	r3, [pc, #600]	; (8002d60 <lcd_init+0x2b8>)
 8002b06:	889b      	ldrh	r3, [r3, #4]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b94      	ldr	r3, [pc, #592]	; (8002d60 <lcd_init+0x2b8>)
 8002b0e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8002b10:	f7ff fcda 	bl	80024c8 <LCD_RD_DATA>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <lcd_init+0x2b8>)
 8002b1a:	889b      	ldrh	r3, [r3, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	4b8f      	ldr	r3, [pc, #572]	; (8002d60 <lcd_init+0x2b8>)
 8002b22:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8002b24:	20cf      	movs	r0, #207	; 0xcf
 8002b26:	f7ff fcaf 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7ff fcbc 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8002b30:	20c1      	movs	r0, #193	; 0xc1
 8002b32:	f7ff fcb9 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8002b36:	2030      	movs	r0, #48	; 0x30
 8002b38:	f7ff fcb6 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8002b3c:	20ed      	movs	r0, #237	; 0xed
 8002b3e:	f7ff fca3 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8002b42:	2064      	movs	r0, #100	; 0x64
 8002b44:	f7ff fcb0 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f7ff fcad 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8002b4e:	2012      	movs	r0, #18
 8002b50:	f7ff fcaa 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002b54:	2081      	movs	r0, #129	; 0x81
 8002b56:	f7ff fca7 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002b5a:	20e8      	movs	r0, #232	; 0xe8
 8002b5c:	f7ff fc94 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8002b60:	2085      	movs	r0, #133	; 0x85
 8002b62:	f7ff fca1 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002b66:	2010      	movs	r0, #16
 8002b68:	f7ff fc9e 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002b6c:	207a      	movs	r0, #122	; 0x7a
 8002b6e:	f7ff fc9b 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8002b72:	20cb      	movs	r0, #203	; 0xcb
 8002b74:	f7ff fc88 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002b78:	2039      	movs	r0, #57	; 0x39
 8002b7a:	f7ff fc95 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8002b7e:	202c      	movs	r0, #44	; 0x2c
 8002b80:	f7ff fc92 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff fc8f 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002b8a:	2034      	movs	r0, #52	; 0x34
 8002b8c:	f7ff fc8c 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7ff fc89 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002b96:	20f7      	movs	r0, #247	; 0xf7
 8002b98:	f7ff fc76 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002b9c:	2020      	movs	r0, #32
 8002b9e:	f7ff fc83 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8002ba2:	20ea      	movs	r0, #234	; 0xea
 8002ba4:	f7ff fc70 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7ff fc7d 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff fc7a 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002bb4:	20c0      	movs	r0, #192	; 0xc0
 8002bb6:	f7ff fc67 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002bba:	201b      	movs	r0, #27
 8002bbc:	f7ff fc74 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8002bc0:	20c1      	movs	r0, #193	; 0xc1
 8002bc2:	f7ff fc61 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	f7ff fc6e 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002bcc:	20c5      	movs	r0, #197	; 0xc5
 8002bce:	f7ff fc5b 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8002bd2:	2030      	movs	r0, #48	; 0x30
 8002bd4:	f7ff fc68 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002bd8:	2030      	movs	r0, #48	; 0x30
 8002bda:	f7ff fc65 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8002bde:	20c7      	movs	r0, #199	; 0xc7
 8002be0:	f7ff fc52 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002be4:	20b7      	movs	r0, #183	; 0xb7
 8002be6:	f7ff fc5f 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002bea:	2036      	movs	r0, #54	; 0x36
 8002bec:	f7ff fc4c 	bl	8002488 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8002bf0:	2008      	movs	r0, #8
 8002bf2:	f7ff fc59 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8002bf6:	203a      	movs	r0, #58	; 0x3a
 8002bf8:	f7ff fc46 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8002bfc:	2055      	movs	r0, #85	; 0x55
 8002bfe:	f7ff fc53 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8002c02:	20b1      	movs	r0, #177	; 0xb1
 8002c04:	f7ff fc40 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff fc4d 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8002c0e:	201a      	movs	r0, #26
 8002c10:	f7ff fc4a 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8002c14:	20b6      	movs	r0, #182	; 0xb6
 8002c16:	f7ff fc37 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8002c1a:	200a      	movs	r0, #10
 8002c1c:	f7ff fc44 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8002c20:	20a2      	movs	r0, #162	; 0xa2
 8002c22:	f7ff fc41 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002c26:	20f2      	movs	r0, #242	; 0xf2
 8002c28:	f7ff fc2e 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7ff fc3b 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8002c32:	2026      	movs	r0, #38	; 0x26
 8002c34:	f7ff fc28 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7ff fc35 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8002c3e:	20e0      	movs	r0, #224	; 0xe0
 8002c40:	f7ff fc22 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8002c44:	200f      	movs	r0, #15
 8002c46:	f7ff fc2f 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8002c4a:	202a      	movs	r0, #42	; 0x2a
 8002c4c:	f7ff fc2c 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8002c50:	2028      	movs	r0, #40	; 0x28
 8002c52:	f7ff fc29 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002c56:	2008      	movs	r0, #8
 8002c58:	f7ff fc26 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002c5c:	200e      	movs	r0, #14
 8002c5e:	f7ff fc23 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002c62:	2008      	movs	r0, #8
 8002c64:	f7ff fc20 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002c68:	2054      	movs	r0, #84	; 0x54
 8002c6a:	f7ff fc1d 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8002c6e:	20a9      	movs	r0, #169	; 0xa9
 8002c70:	f7ff fc1a 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002c74:	2043      	movs	r0, #67	; 0x43
 8002c76:	f7ff fc17 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002c7a:	200a      	movs	r0, #10
 8002c7c:	f7ff fc14 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002c80:	200f      	movs	r0, #15
 8002c82:	f7ff fc11 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fc0e 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7ff fc0b 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7ff fc08 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7ff fc05 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8002c9e:	20e1      	movs	r0, #225	; 0xe1
 8002ca0:	f7ff fbf2 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7ff fbff 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002caa:	2015      	movs	r0, #21
 8002cac:	f7ff fbfc 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8002cb0:	2017      	movs	r0, #23
 8002cb2:	f7ff fbf9 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002cb6:	2007      	movs	r0, #7
 8002cb8:	f7ff fbf6 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002cbc:	2011      	movs	r0, #17
 8002cbe:	f7ff fbf3 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8002cc2:	2006      	movs	r0, #6
 8002cc4:	f7ff fbf0 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002cc8:	202b      	movs	r0, #43	; 0x2b
 8002cca:	f7ff fbed 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8002cce:	2056      	movs	r0, #86	; 0x56
 8002cd0:	f7ff fbea 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002cd4:	203c      	movs	r0, #60	; 0x3c
 8002cd6:	f7ff fbe7 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002cda:	2005      	movs	r0, #5
 8002cdc:	f7ff fbe4 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002ce0:	2010      	movs	r0, #16
 8002ce2:	f7ff fbe1 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f7ff fbde 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002cec:	203f      	movs	r0, #63	; 0x3f
 8002cee:	f7ff fbdb 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002cf2:	203f      	movs	r0, #63	; 0x3f
 8002cf4:	f7ff fbd8 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002cf8:	200f      	movs	r0, #15
 8002cfa:	f7ff fbd5 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8002cfe:	202b      	movs	r0, #43	; 0x2b
 8002d00:	f7ff fbc2 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff fbcf 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7ff fbcc 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7ff fbc9 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8002d16:	203f      	movs	r0, #63	; 0x3f
 8002d18:	f7ff fbc6 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8002d1c:	202a      	movs	r0, #42	; 0x2a
 8002d1e:	f7ff fbb3 	bl	8002488 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7ff fbc0 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7ff fbbd 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7ff fbba 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8002d34:	20ef      	movs	r0, #239	; 0xef
 8002d36:	f7ff fbb7 	bl	80024a8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8002d3a:	2011      	movs	r0, #17
 8002d3c:	f7ff fba4 	bl	8002488 <LCD_WR_REG>
	HAL_Delay(120);
 8002d40:	2078      	movs	r0, #120	; 0x78
 8002d42:	f002 ff01 	bl	8005b48 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8002d46:	2029      	movs	r0, #41	; 0x29
 8002d48:	f7ff fb9e 	bl	8002488 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d52:	4804      	ldr	r0, [pc, #16]	; (8002d64 <lcd_init+0x2bc>)
 8002d54:	f003 ff2e 	bl	8006bb4 <HAL_GPIO_WritePin>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40020800 	.word	0x40020800
 8002d60:	20000b28 	.word	0x20000b28
 8002d64:	40020000 	.word	0x40020000

08002d68 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	b298      	uxth	r0, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	8b3a      	ldrh	r2, [r7, #24]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7ff fc5f 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	b298      	uxth	r0, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8b3a      	ldrh	r2, [r7, #24]
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7ff fc4f 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b298      	uxth	r0, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8b3a      	ldrh	r2, [r7, #24]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f7ff fc3f 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b298      	uxth	r0, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	8b3a      	ldrh	r2, [r7, #24]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7ff fc2f 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	b298      	uxth	r0, r3
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8b3a      	ldrh	r2, [r7, #24]
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7ff fc1f 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	b298      	uxth	r0, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8b3a      	ldrh	r2, [r7, #24]
 8002e30:	4619      	mov	r1, r3
 8002e32:	f7ff fc0f 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	b298      	uxth	r0, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8b3a      	ldrh	r2, [r7, #24]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7ff fbff 	bl	8002654 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	b298      	uxth	r0, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8b3a      	ldrh	r2, [r7, #24]
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7ff fbef 	bl	8002654 <lcd_DrawPoint>
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b08a      	sub	sp, #40	; 0x28
 8002e82:	af02      	add	r7, sp, #8
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	f1c3 0303 	rsb	r3, r3, #3
 8002e9e:	613b      	str	r3, [r7, #16]


	if (fill)
 8002ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d04f      	beq.n	8002f46 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002ea6:	e029      	b.n	8002efc <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e00a      	b.n	8002ec4 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff ff55 	bl	8002d68 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	ddf0      	ble.n	8002eae <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da06      	bge.n	8002ee0 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	009a      	lsls	r2, r3, #2
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	3306      	adds	r3, #6
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e00a      	b.n	8002ef6 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	009a      	lsls	r2, r3, #2
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	330a      	adds	r3, #10
 8002eee:	613b      	str	r3, [r7, #16]
				y--;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	ddd1      	ble.n	8002ea8 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8002f04:	e023      	b.n	8002f4e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f7ff ff29 	bl	8002d68 <_draw_circle_8>
			if (d < 0) {
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da06      	bge.n	8002f2a <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	3306      	adds	r3, #6
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00a      	b.n	8002f40 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	4413      	add	r3, r2
 8002f36:	330a      	adds	r3, #10
 8002f38:	613b      	str	r3, [r7, #16]
				y--;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	61bb      	str	r3, [r7, #24]
			x++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	dddb      	ble.n	8002f06 <lcd_DrawCircle+0x88>
}
 8002f4e:	bf00      	nop
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b08b      	sub	sp, #44	; 0x2c
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	60ba      	str	r2, [r7, #8]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	81fb      	strh	r3, [r7, #14]
 8002f66:	460b      	mov	r3, r1
 8002f68:	81bb      	strh	r3, [r7, #12]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002f76:	e048      	b.n	800300a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d145      	bne.n	800300a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8002f7e:	89fa      	ldrh	r2, [r7, #14]
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <lcd_ShowStr+0xc4>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f8a:	085b      	lsrs	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	1acb      	subs	r3, r1, r3
 8002f90:	429a      	cmp	r2, r3
 8002f92:	dc3f      	bgt.n	8003014 <lcd_ShowStr+0xbc>
 8002f94:	89ba      	ldrh	r2, [r7, #12]
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <lcd_ShowStr+0xc4>)
 8002f98:	885b      	ldrh	r3, [r3, #2]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fa0:	1acb      	subs	r3, r1, r3
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	dc36      	bgt.n	8003014 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b80      	cmp	r3, #128	; 0x80
 8002fac:	d902      	bls.n	8002fb4 <lcd_ShowStr+0x5c>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
 8002fb2:	e02a      	b.n	800300a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b0d      	cmp	r3, #13
 8002fba:	d10b      	bne.n	8002fd4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002fbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	89bb      	ldrh	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002fc8:	8abb      	ldrh	r3, [r7, #20]
 8002fca:	81fb      	strh	r3, [r7, #14]
					str++;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	e017      	b.n	8003004 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	88fc      	ldrh	r4, [r7, #6]
 8002fda:	89b9      	ldrh	r1, [r7, #12]
 8002fdc:	89f8      	ldrh	r0, [r7, #14]
 8002fde:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002fe2:	9302      	str	r3, [sp, #8]
 8002fe4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4623      	mov	r3, r4
 8002ff0:	f7ff fbcc 	bl	800278c <lcd_ShowChar>
					x+=sizey/2;
 8002ff4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	89fb      	ldrh	r3, [r7, #14]
 8003000:	4413      	add	r3, r2
 8003002:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	3301      	adds	r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1b2      	bne.n	8002f78 <lcd_ShowStr+0x20>
 8003012:	e000      	b.n	8003016 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8003014:	bf00      	nop
			}
		}
	}
}
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd90      	pop	{r4, r7, pc}
 800301c:	20000b28 	.word	0x20000b28

08003020 <addPlayer>:
 *  Created on: Dec 28, 2023
 *      Author: Windows
 */
#include "leaderboard.h"

void addPlayer(struct player **head, int ID, int score, int mode){
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
    struct player *newPlayer = (struct player *)malloc(sizeof(struct player));
 800302e:	2010      	movs	r0, #16
 8003030:	f007 f984 	bl	800a33c <malloc>
 8003034:	4603      	mov	r3, r0
 8003036:	613b      	str	r3, [r7, #16]
    if (newPlayer == NULL) {
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d036      	beq.n	80030ac <addPlayer+0x8c>
        return;
    }
    newPlayer->player_ID = ID;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	601a      	str	r2, [r3, #0]
    newPlayer->player_score = score;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	605a      	str	r2, [r3, #4]
    newPlayer->player_mode = mode;
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	609a      	str	r2, [r3, #8]
    newPlayer->next = NULL;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]

    if (*head == NULL || score > (*head)->player_score) {
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <addPlayer+0x4a>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	dd07      	ble.n	800307a <addPlayer+0x5a>
        newPlayer->next = *head;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	60da      	str	r2, [r3, #12]
        *head = newPlayer;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e019      	b.n	80030ae <addPlayer+0x8e>
    } else {
        struct player *current = *head;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 8003080:	e002      	b.n	8003088 <addPlayer+0x68>
            current = current->next;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	617b      	str	r3, [r7, #20]
        while (current->next != NULL && score <= current->next->player_score) {
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <addPlayer+0x7c>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	ddf2      	ble.n	8003082 <addPlayer+0x62>
        }
        newPlayer->next = current->next;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	60da      	str	r2, [r3, #12]
        current->next = newPlayer;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	e000      	b.n	80030ae <addPlayer+0x8e>
        return;
 80030ac:	bf00      	nop
    }
}
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <led7_Scan>:

void led7_init(){//khoi tao
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){//quet led
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <led7_Scan+0x104>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <led7_Scan+0x104>)
 80030c2:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80030c4:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <led7_Scan+0x108>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3d      	ldr	r2, [pc, #244]	; (80031c0 <led7_Scan+0x10c>)
 80030ca:	5cd3      	ldrb	r3, [r2, r3]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <led7_Scan+0x104>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b21b      	sxth	r3, r3
 80030d6:	4313      	orrs	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	b29a      	uxth	r2, r3
 80030dc:	4b36      	ldr	r3, [pc, #216]	; (80031b8 <led7_Scan+0x104>)
 80030de:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <led7_Scan+0x108>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d847      	bhi.n	8003178 <led7_Scan+0xc4>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <led7_Scan+0x3c>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	0800311f 	.word	0x0800311f
 80030f8:	0800313d 	.word	0x0800313d
 80030fc:	0800315b 	.word	0x0800315b
	case 0:
		spi_buffer |= 0x00b0;
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <led7_Scan+0x104>)
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <led7_Scan+0x104>)
 800310c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800310e:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <led7_Scan+0x104>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b27      	ldr	r3, [pc, #156]	; (80031b8 <led7_Scan+0x104>)
 800311a:	801a      	strh	r2, [r3, #0]
		break;
 800311c:	e02d      	b.n	800317a <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800311e:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <led7_Scan+0x104>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8003126:	b29a      	uxth	r2, r3
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <led7_Scan+0x104>)
 800312a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <led7_Scan+0x104>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	f023 0320 	bic.w	r3, r3, #32
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <led7_Scan+0x104>)
 8003138:	801a      	strh	r2, [r3, #0]
		break;
 800313a:	e01e      	b.n	800317a <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 800313c:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <led7_Scan+0x104>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <led7_Scan+0x104>)
 8003148:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <led7_Scan+0x104>)
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	f023 0310 	bic.w	r3, r3, #16
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <led7_Scan+0x104>)
 8003156:	801a      	strh	r2, [r3, #0]
		break;
 8003158:	e00f      	b.n	800317a <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800315a:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <led7_Scan+0x104>)
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003162:	b29a      	uxth	r2, r3
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <led7_Scan+0x104>)
 8003166:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <led7_Scan+0x104>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003170:	b29a      	uxth	r2, r3
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <led7_Scan+0x104>)
 8003174:	801a      	strh	r2, [r3, #0]
		break;
 8003176:	e000      	b.n	800317a <led7_Scan+0xc6>
	default:
		break;
 8003178:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <led7_Scan+0x108>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	425a      	negs	r2, r3
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	f002 0203 	and.w	r2, r2, #3
 800318a:	bf58      	it	pl
 800318c:	4253      	negpl	r3, r2
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <led7_Scan+0x108>)
 8003190:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8003192:	2200      	movs	r2, #0
 8003194:	2140      	movs	r1, #64	; 0x40
 8003196:	480b      	ldr	r0, [pc, #44]	; (80031c4 <led7_Scan+0x110>)
 8003198:	f003 fd0c 	bl	8006bb4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 800319c:	2301      	movs	r3, #1
 800319e:	2202      	movs	r2, #2
 80031a0:	4905      	ldr	r1, [pc, #20]	; (80031b8 <led7_Scan+0x104>)
 80031a2:	4809      	ldr	r0, [pc, #36]	; (80031c8 <led7_Scan+0x114>)
 80031a4:	f005 f9c9 	bl	800853a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80031a8:	2201      	movs	r2, #1
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	4805      	ldr	r0, [pc, #20]	; (80031c4 <led7_Scan+0x110>)
 80031ae:	f003 fd01 	bl	8006bb4 <HAL_GPIO_WritePin>
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000001a 	.word	0x2000001a
 80031bc:	20000130 	.word	0x20000130
 80031c0:	2000000c 	.word	0x2000000c
 80031c4:	40021800 	.word	0x40021800
 80031c8:	20000b64 	.word	0x20000b64

080031cc <led7_SetDigit>:

void led7_SetDigit(int num, int position, uint8_t show_dot){//set so cho led
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	4613      	mov	r3, r2
 80031d8:	71fb      	strb	r3, [r7, #7]
	if(num >= 0 && num <= 9){
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0e      	blt.n	80031fe <led7_SetDigit+0x32>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b09      	cmp	r3, #9
 80031e4:	dc0b      	bgt.n	80031fe <led7_SetDigit+0x32>
		led7seg[position] = arrayOfNum[num] - show_dot;
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <led7_SetDigit+0x40>)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	781a      	ldrb	r2, [r3, #0]
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	b2d9      	uxtb	r1, r3
 80031f4:	4a06      	ldr	r2, [pc, #24]	; (8003210 <led7_SetDigit+0x44>)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4413      	add	r3, r2
 80031fa:	460a      	mov	r2, r1
 80031fc:	701a      	strb	r2, [r3, #0]
	}
}
 80031fe:	bf00      	nop
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000010 	.word	0x20000010
 8003210:	2000000c 	.word	0x2000000c

08003214 <led7_SetColon>:

void led7_SetColon(uint8_t status){// :
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
	if(status == 1) spi_buffer &= ~(1 << 3);
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <led7_SetColon+0x20>
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <led7_SetColon+0x3c>)
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	f023 0308 	bic.w	r3, r3, #8
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <led7_SetColon+0x3c>)
 8003230:	801a      	strh	r2, [r3, #0]
	else spi_buffer |= (1 << 3);
}
 8003232:	e006      	b.n	8003242 <led7_SetColon+0x2e>
	else spi_buffer |= (1 << 3);
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <led7_SetColon+0x3c>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	f043 0308 	orr.w	r3, r3, #8
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <led7_SetColon+0x3c>)
 8003240:	801a      	strh	r2, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	2000001a 	.word	0x2000001a

08003254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003258:	f002 fc04 	bl	8005a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800325c:	f000 f82e 	bl	80032bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003260:	f7fe ff86 	bl	8002170 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003264:	f001 fac8 	bl	80047f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8003268:	f001 f8ba 	bl	80043e0 <MX_SPI1_Init>
  MX_FSMC_Init();
 800326c:	f7fe feb0 	bl	8001fd0 <MX_FSMC_Init>
  MX_I2C1_Init();
 8003270:	f7ff f894 	bl	800239c <MX_I2C1_Init>
  MX_TIM13_Init();
 8003274:	f001 fb0c 	bl	8004890 <MX_TIM13_Init>
  MX_DMA_Init();
 8003278:	f7fe f844 	bl	8001304 <MX_DMA_Init>
  MX_ADC1_Init();
 800327c:	f7fd fe00 	bl	8000e80 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003280:	f001 fa6a 	bl	8004758 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8003284:	f000 f884 	bl	8003390 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer3(100);
 8003288:	2064      	movs	r0, #100	; 0x64
 800328a:	f000 ff6d 	bl	8004168 <setTimer3>
  setTimer5(10);
 800328e:	200a      	movs	r0, #10
 8003290:	f000 ffa2 	bl	80041d8 <setTimer5>
  setTimer7(10);
 8003294:	200a      	movs	r0, #10
 8003296:	f000 ffbb 	bl	8004210 <setTimer7>
 while (1)
  {
	  while(!flag_timer2);
 800329a:	bf00      	nop
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <main+0x64>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0fb      	beq.n	800329c <main+0x48>
	  flag_timer2 = 0;
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <main+0x64>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	801a      	strh	r2, [r3, #0]
	  touch_Scan();
 80032aa:	f002 fa7f 	bl	80057ac <touch_Scan>
	  button_Scan();
 80032ae:	f7fd ffb3 	bl	8001218 <button_Scan>
	  fsm_machine();
 80032b2:	f7fe fbfb 	bl	8001aac <fsm_machine>
	  while(!flag_timer2);
 80032b6:	e7f0      	b.n	800329a <main+0x46>
 80032b8:	2000098c 	.word	0x2000098c

080032bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b094      	sub	sp, #80	; 0x50
 80032c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032c2:	f107 0320 	add.w	r3, r7, #32
 80032c6:	2230      	movs	r2, #48	; 0x30
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f007 f83e 	bl	800a34c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	2300      	movs	r3, #0
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <SystemClock_Config+0xcc>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	4a27      	ldr	r2, [pc, #156]	; (8003388 <SystemClock_Config+0xcc>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6413      	str	r3, [r2, #64]	; 0x40
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <SystemClock_Config+0xcc>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032fc:	2300      	movs	r3, #0
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	4b22      	ldr	r3, [pc, #136]	; (800338c <SystemClock_Config+0xd0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <SystemClock_Config+0xd0>)
 8003306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <SystemClock_Config+0xd0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800331c:	2301      	movs	r3, #1
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003320:	2310      	movs	r3, #16
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003324:	2302      	movs	r3, #2
 8003326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003328:	2300      	movs	r3, #0
 800332a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800332c:	2308      	movs	r3, #8
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003330:	23a8      	movs	r3, #168	; 0xa8
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003334:	2302      	movs	r3, #2
 8003336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003338:	2304      	movs	r3, #4
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800333c:	f107 0320 	add.w	r3, r7, #32
 8003340:	4618      	mov	r0, r3
 8003342:	f004 fc11 	bl	8007b68 <HAL_RCC_OscConfig>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800334c:	f000 f850 	bl	80033f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003350:	230f      	movs	r3, #15
 8003352:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003354:	2302      	movs	r3, #2
 8003356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800335c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003362:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	2105      	movs	r1, #5
 800336e:	4618      	mov	r0, r3
 8003370:	f004 fe72 	bl	8008058 <HAL_RCC_ClockConfig>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800337a:	f000 f839 	bl	80033f0 <Error_Handler>
  }
}
 800337e:	bf00      	nop
 8003380:	3750      	adds	r7, #80	; 0x50
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000

08003390 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af04      	add	r7, sp, #16
	  timer_init();
 8003396:	f000 febd 	bl	8004114 <timer_init>
	  button_init();
 800339a:	f7fd ff31 	bl	8001200 <button_init>
	  buzzer_init();
 800339e:	f7fd ffa7 	bl	80012f0 <buzzer_init>
	  lcd_init();
 80033a2:	f7ff fb81 	bl	8002aa8 <lcd_init>
	  touch_init();
 80033a6:	f002 f9f1 	bl	800578c <touch_init>
	  setTimer2(50);
 80033aa:	2032      	movs	r0, #50	; 0x32
 80033ac:	f000 fec0 	bl	8004130 <setTimer2>
	  lcd_Clear(BLACK);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f7ff f8e7 	bl	8002584 <lcd_Clear>
	  lcd_Fill(50, 250, 190, 300, GREEN);
 80033b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80033c0:	22be      	movs	r2, #190	; 0xbe
 80033c2:	21fa      	movs	r1, #250	; 0xfa
 80033c4:	2032      	movs	r0, #50	; 0x32
 80033c6:	f7ff f90f 	bl	80025e8 <lcd_Fill>
	  lcd_ShowStr(90,260,"START",BLACK,BLACK,24,1);
 80033ca:	2301      	movs	r3, #1
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	2318      	movs	r3, #24
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	2300      	movs	r3, #0
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <system_init+0x5c>)
 80033da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033de:	205a      	movs	r0, #90	; 0x5a
 80033e0:	f7ff fdba 	bl	8002f58 <lcd_ShowStr>
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	0800b9b0 	.word	0x0800b9b0

080033f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033f4:	b672      	cpsid	i
}
 80033f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <Error_Handler+0x8>
	...

080033fc <screen_init>:
 *      Author: Admin
 */

#include "screen.h"

void screen_init(){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af04      	add	r7, sp, #16
	lcd_ShowStr(60,10,"Game Menu",GREEN,WHITE,24,1);
 8003402:	2301      	movs	r3, #1
 8003404:	9302      	str	r3, [sp, #8]
 8003406:	2318      	movs	r3, #24
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <screen_init+0x28>)
 8003416:	210a      	movs	r1, #10
 8003418:	203c      	movs	r0, #60	; 0x3c
 800341a:	f7ff fd9d 	bl	8002f58 <lcd_ShowStr>

//	lcd_ShowStr(40,155,"Hi, I\'m Slyther! <3",BLUE,BLACK,16,0);
//	lcd_ShowStr(40,180,"Help me grow strong",BLUE,BLACK,16,0);
//	lcd_ShowStr(40,205,"to protect our jungle! ",BLUE,BLACK,16,0);
//	lcd_ShowStr(90,235,"START",BLACK,BLACK,24,1);
}
 800341e:	bf00      	nop
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	0800b9fc 	.word	0x0800b9fc

08003428 <screen_play>:

void screen_play(){
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af04      	add	r7, sp, #16
	lcd_Fill(0, 0, 240, 200, WHITE);
 800342e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	23c8      	movs	r3, #200	; 0xc8
 8003436:	22f0      	movs	r2, #240	; 0xf0
 8003438:	2100      	movs	r1, #0
 800343a:	2000      	movs	r0, #0
 800343c:	f7ff f8d4 	bl	80025e8 <lcd_Fill>
	lcd_Fill(90, 210, 150, 250, RED);//UP
 8003440:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	23fa      	movs	r3, #250	; 0xfa
 8003448:	2296      	movs	r2, #150	; 0x96
 800344a:	21d2      	movs	r1, #210	; 0xd2
 800344c:	205a      	movs	r0, #90	; 0x5a
 800344e:	f7ff f8cb 	bl	80025e8 <lcd_Fill>
	lcd_ShowStr(113, 217, "U", WHITE, YELLOW, 24, 1);
 8003452:	2301      	movs	r3, #1
 8003454:	9302      	str	r3, [sp, #8]
 8003456:	2318      	movs	r3, #24
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003464:	4a2a      	ldr	r2, [pc, #168]	; (8003510 <screen_play+0xe8>)
 8003466:	21d9      	movs	r1, #217	; 0xd9
 8003468:	2071      	movs	r0, #113	; 0x71
 800346a:	f7ff fd75 	bl	8002f58 <lcd_ShowStr>
	lcd_Fill(90, 260, 150, 300, YELLOW);//DOWN
 800346e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003478:	2296      	movs	r2, #150	; 0x96
 800347a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800347e:	205a      	movs	r0, #90	; 0x5a
 8003480:	f7ff f8b2 	bl	80025e8 <lcd_Fill>
	lcd_ShowStr(113, 267, "D", WHITE, YELLOW, 24, 1);
 8003484:	2301      	movs	r3, #1
 8003486:	9302      	str	r3, [sp, #8]
 8003488:	2318      	movs	r3, #24
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <screen_play+0xec>)
 8003498:	f240 110b 	movw	r1, #267	; 0x10b
 800349c:	2071      	movs	r0, #113	; 0x71
 800349e:	f7ff fd5b 	bl	8002f58 <lcd_ShowStr>
	lcd_Fill(20, 260, 80, 300, RED);//LEFT
 80034a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80034ac:	2250      	movs	r2, #80	; 0x50
 80034ae:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034b2:	2014      	movs	r0, #20
 80034b4:	f7ff f898 	bl	80025e8 <lcd_Fill>
	lcd_ShowStr(45, 267, "L", WHITE, RED, 24, 1);
 80034b8:	2301      	movs	r3, #1
 80034ba:	9302      	str	r3, [sp, #8]
 80034bc:	2318      	movs	r3, #24
 80034be:	9301      	str	r3, [sp, #4]
 80034c0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ca:	4a13      	ldr	r2, [pc, #76]	; (8003518 <screen_play+0xf0>)
 80034cc:	f240 110b 	movw	r1, #267	; 0x10b
 80034d0:	202d      	movs	r0, #45	; 0x2d
 80034d2:	f7ff fd41 	bl	8002f58 <lcd_ShowStr>
	lcd_Fill(160, 260, 220, 300, RED);//RIGHT
 80034d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80034e0:	22dc      	movs	r2, #220	; 0xdc
 80034e2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034e6:	20a0      	movs	r0, #160	; 0xa0
 80034e8:	f7ff f87e 	bl	80025e8 <lcd_Fill>
	lcd_ShowStr(185, 267, "R", WHITE, RED, 24, 1);
 80034ec:	2301      	movs	r3, #1
 80034ee:	9302      	str	r3, [sp, #8]
 80034f0:	2318      	movs	r3, #24
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <screen_play+0xf4>)
 8003500:	f240 110b 	movw	r1, #267	; 0x10b
 8003504:	20b9      	movs	r0, #185	; 0xb9
 8003506:	f7ff fd27 	bl	8002f58 <lcd_ShowStr>
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	0800ba08 	.word	0x0800ba08
 8003514:	0800ba0c 	.word	0x0800ba0c
 8003518:	0800ba10 	.word	0x0800ba10
 800351c:	0800ba14 	.word	0x0800ba14

08003520 <screen_score>:

void screen_score(){
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af04      	add	r7, sp, #16
//	lcd_ShowStr(0, 205, "Food: ", WHITE, WHITE, 24, 1);
	lcd_ShowIntNum(8, 218, score, 4, WHITE, BLACK, 24);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <screen_score+0x2c>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b29a      	uxth	r2, r3
 800352c:	2318      	movs	r3, #24
 800352e:	9302      	str	r3, [sp, #8]
 8003530:	2300      	movs	r3, #0
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2304      	movs	r3, #4
 800353c:	21da      	movs	r1, #218	; 0xda
 800353e:	2008      	movs	r0, #8
 8003540:	f7ff fa10 	bl	8002964 <lcd_ShowIntNum>
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000984 	.word	0x20000984

08003550 <screen_exit>:

void screen_exit(){
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af04      	add	r7, sp, #16
	lcd_ShowStr(174, 218, "End", WHITE, WHITE, 24, 1);
 8003556:	2301      	movs	r3, #1
 8003558:	9302      	str	r3, [sp, #8]
 800355a:	2318      	movs	r3, #24
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003568:	4a03      	ldr	r2, [pc, #12]	; (8003578 <screen_exit+0x28>)
 800356a:	21da      	movs	r1, #218	; 0xda
 800356c:	20ae      	movs	r0, #174	; 0xae
 800356e:	f7ff fcf3 	bl	8002f58 <lcd_ShowStr>
//	lcd_ShowStr(170, 230, " >> ", WHITE, WHITE, 24, 1);
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	0800ba18 	.word	0x0800ba18

0800357c <screen_game_over>:

void screen_game_over(){
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af04      	add	r7, sp, #16
	lcd_ShowStr(90,10,"Finish",RED,WHITE,24,1);
 8003582:	2301      	movs	r3, #1
 8003584:	9302      	str	r3, [sp, #8]
 8003586:	2318      	movs	r3, #24
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003594:	4a37      	ldr	r2, [pc, #220]	; (8003674 <screen_game_over+0xf8>)
 8003596:	210a      	movs	r1, #10
 8003598:	205a      	movs	r0, #90	; 0x5a
 800359a:	f7ff fcdd 	bl	8002f58 <lcd_ShowStr>
//	if(speed == 100)
//		lcd_ShowStr(120, 120, "HARD", WHITE, BLACK, 16, 0);
//
//	lcd_ShowStr(40, 150, "Leaderboard (<)", WHITE, BLACK, 16, 0);
//	lcd_ShowStr(40, 180, "Time:", WHITE, BLACK, 16, 0);
	lcd_ShowStr(40, 60, "Time:", WHITE, BLACK, 16, 0);
 800359e:	2300      	movs	r3, #0
 80035a0:	9302      	str	r3, [sp, #8]
 80035a2:	2310      	movs	r3, #16
 80035a4:	9301      	str	r3, [sp, #4]
 80035a6:	2300      	movs	r3, #0
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035ae:	4a32      	ldr	r2, [pc, #200]	; (8003678 <screen_game_over+0xfc>)
 80035b0:	213c      	movs	r1, #60	; 0x3c
 80035b2:	2028      	movs	r0, #40	; 0x28
 80035b4:	f7ff fcd0 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowIntNum(90, 60, count/60, 2, WHITE, BLACK, 16);
 80035b8:	4b30      	ldr	r3, [pc, #192]	; (800367c <screen_game_over+0x100>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a30      	ldr	r2, [pc, #192]	; (8003680 <screen_game_over+0x104>)
 80035be:	fb82 1203 	smull	r1, r2, r2, r3
 80035c2:	441a      	add	r2, r3
 80035c4:	1152      	asrs	r2, r2, #5
 80035c6:	17db      	asrs	r3, r3, #31
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	2310      	movs	r3, #16
 80035ce:	9302      	str	r3, [sp, #8]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	2302      	movs	r3, #2
 80035dc:	213c      	movs	r1, #60	; 0x3c
 80035de:	205a      	movs	r0, #90	; 0x5a
 80035e0:	f7ff f9c0 	bl	8002964 <lcd_ShowIntNum>
	lcd_ShowStr(110, 60, ":", WHITE, BLACK, 16, 0);
 80035e4:	2300      	movs	r3, #0
 80035e6:	9302      	str	r3, [sp, #8]
 80035e8:	2310      	movs	r3, #16
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	2300      	movs	r3, #0
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f4:	4a23      	ldr	r2, [pc, #140]	; (8003684 <screen_game_over+0x108>)
 80035f6:	213c      	movs	r1, #60	; 0x3c
 80035f8:	206e      	movs	r0, #110	; 0x6e
 80035fa:	f7ff fcad 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowIntNum(120, 60, count%60, 2, WHITE, BLACK, 16);
 80035fe:	4b1f      	ldr	r3, [pc, #124]	; (800367c <screen_game_over+0x100>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <screen_game_over+0x104>)
 8003604:	fb83 1302 	smull	r1, r3, r3, r2
 8003608:	4413      	add	r3, r2
 800360a:	1159      	asrs	r1, r3, #5
 800360c:	17d3      	asrs	r3, r2, #31
 800360e:	1ac9      	subs	r1, r1, r3
 8003610:	460b      	mov	r3, r1
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a5b      	subs	r3, r3, r1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	1ad1      	subs	r1, r2, r3
 800361a:	b28a      	uxth	r2, r1
 800361c:	2310      	movs	r3, #16
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	2300      	movs	r3, #0
 8003622:	9301      	str	r3, [sp, #4]
 8003624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2302      	movs	r3, #2
 800362c:	213c      	movs	r1, #60	; 0x3c
 800362e:	2078      	movs	r0, #120	; 0x78
 8003630:	f7ff f998 	bl	8002964 <lcd_ShowIntNum>

	lcd_ShowStr(40, 90, "Food: ", WHITE, BLACK, 16, 0);
 8003634:	2300      	movs	r3, #0
 8003636:	9302      	str	r3, [sp, #8]
 8003638:	2310      	movs	r3, #16
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2300      	movs	r3, #0
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003644:	4a10      	ldr	r2, [pc, #64]	; (8003688 <screen_game_over+0x10c>)
 8003646:	215a      	movs	r1, #90	; 0x5a
 8003648:	2028      	movs	r0, #40	; 0x28
 800364a:	f7ff fc85 	bl	8002f58 <lcd_ShowStr>
	lcd_ShowIntNum(100, 90, score, 2, WHITE, BLACK, 16);
 800364e:	4b0f      	ldr	r3, [pc, #60]	; (800368c <screen_game_over+0x110>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b29a      	uxth	r2, r3
 8003654:	2310      	movs	r3, #16
 8003656:	9302      	str	r3, [sp, #8]
 8003658:	2300      	movs	r3, #0
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2302      	movs	r3, #2
 8003664:	215a      	movs	r1, #90	; 0x5a
 8003666:	2064      	movs	r0, #100	; 0x64
 8003668:	f7ff f97c 	bl	8002964 <lcd_ShowIntNum>
//	lcd_Fill(50, 250, 190, 300, GREEN);
//	lcd_ShowStr(80,260,"RESTART",BLACK,BLACK,24,1);
//	lcd_ShowStr(40,211,"You did well!!! Again?",BLUE,BLACK,16,0);
}
 800366c:	bf00      	nop
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	0800ba1c 	.word	0x0800ba1c
 8003678:	0800ba24 	.word	0x0800ba24
 800367c:	20000110 	.word	0x20000110
 8003680:	88888889 	.word	0x88888889
 8003684:	0800ba2c 	.word	0x0800ba2c
 8003688:	0800ba30 	.word	0x0800ba30
 800368c:	20000984 	.word	0x20000984

08003690 <draw_snake>:
int sw_right = 1;
int sw_left = 1;
uint8_t score = 0;
int lose = 0;

void draw_snake(int x,int y){
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
//	lcd_DrawCircle(x, y, GREEN, 5, 1);
	lcd_DrawCircle(x, y, BLUE, 5, 1);
 800369a:	2301      	movs	r3, #1
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2305      	movs	r3, #5
 80036a0:	221f      	movs	r2, #31
 80036a2:	6839      	ldr	r1, [r7, #0]
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fbea 	bl	8002e7e <lcd_DrawCircle>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <draw_food>:

void draw_food(int x,int y){
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af02      	add	r7, sp, #8
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, RED, 5, 1);
 80036bc:	2301      	movs	r3, #1
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2305      	movs	r3, #5
 80036c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036c6:	6839      	ldr	r1, [r7, #0]
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff fbd8 	bl	8002e7e <lcd_DrawCircle>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <draw_head>:

void draw_head(int x, int y){
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af02      	add	r7, sp, #8
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GREEN, 5, 1);
 80036e0:	2301      	movs	r3, #1
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2305      	movs	r3, #5
 80036e6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff fbc6 	bl	8002e7e <lcd_DrawCircle>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <draw_wall>:

void draw_wall(int x, int y){
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af02      	add	r7, sp, #8
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, GRAY, 5, 1);
 8003704:	2301      	movs	r3, #1
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	2305      	movs	r3, #5
 800370a:	f248 4230 	movw	r2, #33840	; 0x8430
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff fbb4 	bl	8002e7e <lcd_DrawCircle>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <clear_block>:

void clear_block(int x,int y){
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af02      	add	r7, sp, #8
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
	lcd_DrawCircle(x, y, WHITE, 5, 1);
 8003728:	2301      	movs	r3, #1
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2305      	movs	r3, #5
 800372e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff fba2 	bl	8002e7e <lcd_DrawCircle>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <update_grid>:

void update_grid(){
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 800374a:	2300      	movs	r3, #0
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	e08b      	b.n	8003868 <update_grid+0x124>
		for(int j=0;j<20;j++){
 8003750:	2300      	movs	r3, #0
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	e081      	b.n	800385a <update_grid+0x116>
			if(draw_grid[i][j]==2){
 8003756:	4949      	ldr	r1, [pc, #292]	; (800387c <update_grid+0x138>)
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d10f      	bne.n	800378e <update_grid+0x4a>
				draw_snake(i*10+5,j*10+5);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	1d58      	adds	r0, r3, #5
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	3305      	adds	r3, #5
 8003786:	4619      	mov	r1, r3
 8003788:	f7ff ff82 	bl	8003690 <draw_snake>
 800378c:	e062      	b.n	8003854 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==4){
 800378e:	493b      	ldr	r1, [pc, #236]	; (800387c <update_grid+0x138>)
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	4413      	add	r3, r2
 800379e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d10f      	bne.n	80037c6 <update_grid+0x82>
				draw_head(i*10+5,j*10+5);
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	1d58      	adds	r0, r3, #5
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	3305      	adds	r3, #5
 80037be:	4619      	mov	r1, r3
 80037c0:	f7ff ff89 	bl	80036d6 <draw_head>
 80037c4:	e046      	b.n	8003854 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==1){
 80037c6:	492d      	ldr	r1, [pc, #180]	; (800387c <update_grid+0x138>)
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	4413      	add	r3, r2
 80037d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d10f      	bne.n	80037fe <update_grid+0xba>
				draw_food(i*10+5,j*10+5);
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	1d58      	adds	r0, r3, #5
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	3305      	adds	r3, #5
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7ff ff5b 	bl	80036b2 <draw_food>
 80037fc:	e02a      	b.n	8003854 <update_grid+0x110>
			}
			else if(draw_grid[i][j]==3){
 80037fe:	491f      	ldr	r1, [pc, #124]	; (800387c <update_grid+0x138>)
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	4413      	add	r3, r2
 800380e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d10f      	bne.n	8003836 <update_grid+0xf2>
				draw_wall(i*10+5,j*10+5);
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	1d58      	adds	r0, r3, #5
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	3305      	adds	r3, #5
 800382e:	4619      	mov	r1, r3
 8003830:	f7ff ff63 	bl	80036fa <draw_wall>
 8003834:	e00e      	b.n	8003854 <update_grid+0x110>
			}
			else{
				clear_block(i*10+5,j*10+5);
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	1d58      	adds	r0, r3, #5
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	3305      	adds	r3, #5
 800384e:	4619      	mov	r1, r3
 8003850:	f7ff ff65 	bl	800371e <clear_block>
		for(int j=0;j<20;j++){
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3301      	adds	r3, #1
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b13      	cmp	r3, #19
 800385e:	f77f af7a 	ble.w	8003756 <update_grid+0x12>
	for(int i=0;i<24;i++){
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3301      	adds	r3, #1
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b17      	cmp	r3, #23
 800386c:	f77f af70 	ble.w	8003750 <update_grid+0xc>
			}
		}
	}
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000134 	.word	0x20000134

08003880 <delete_wall>:

void delete_wall(void){
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
	for(int i=0;i<24;i++){
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	e022      	b.n	80038d2 <delete_wall+0x52>
		for(int j=0;j<20;j++){
 800388c:	2300      	movs	r3, #0
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	e019      	b.n	80038c6 <delete_wall+0x46>
			if(draw_grid[i][j]==3){
 8003892:	4915      	ldr	r1, [pc, #84]	; (80038e8 <delete_wall+0x68>)
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d10a      	bne.n	80038c0 <delete_wall+0x40>
				draw_grid[i][j]=0;
 80038aa:	490f      	ldr	r1, [pc, #60]	; (80038e8 <delete_wall+0x68>)
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	4413      	add	r3, r2
 80038ba:	2200      	movs	r2, #0
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b13      	cmp	r3, #19
 80038ca:	dde2      	ble.n	8003892 <delete_wall+0x12>
	for(int i=0;i<24;i++){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3301      	adds	r3, #1
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b17      	cmp	r3, #23
 80038d6:	ddd9      	ble.n	800388c <delete_wall+0xc>
			}
		}
	}
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000134 	.word	0x20000134

080038ec <init_grid>:

void init_grid(void){
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	for(int i=0; i<24;i++){
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	e016      	b.n	8003926 <init_grid+0x3a>
		for(int j=0;j<20;j++){
 80038f8:	2300      	movs	r3, #0
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	e00d      	b.n	800391a <init_grid+0x2e>
			draw_grid[i][j]=0;
 80038fe:	490f      	ldr	r1, [pc, #60]	; (800393c <init_grid+0x50>)
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	2200      	movs	r2, #0
 8003910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<20;j++){
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	3301      	adds	r3, #1
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b13      	cmp	r3, #19
 800391e:	ddee      	ble.n	80038fe <init_grid+0x12>
	for(int i=0; i<24;i++){
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3301      	adds	r3, #1
 8003924:	607b      	str	r3, [r7, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b17      	cmp	r3, #23
 800392a:	dde5      	ble.n	80038f8 <init_grid+0xc>
		}
	}
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000134 	.word	0x20000134

08003940 <move_snake>:

void move_snake(){
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
		for(int i=size_of_snake-1;i>=0;i--){
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <move_snake+0x194>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3b01      	subs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e014      	b.n	800397a <move_snake+0x3a>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=0;
 8003950:	4a61      	ldr	r2, [pc, #388]	; (8003ad8 <move_snake+0x198>)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003958:	495f      	ldr	r1, [pc, #380]	; (8003ad8 <move_snake+0x198>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3318      	adds	r3, #24
 800395e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003962:	485e      	ldr	r0, [pc, #376]	; (8003adc <move_snake+0x19c>)
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	440b      	add	r3, r1
 800396e:	2200      	movs	r2, #0
 8003970:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-1;i>=0;i--){
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	3b01      	subs	r3, #1
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	dae7      	bge.n	8003950 <move_snake+0x10>
		}
		draw_grid[snake_pos[0][0]][snake_pos[1][0]] = 0;
 8003980:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <move_snake+0x198>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b54      	ldr	r3, [pc, #336]	; (8003ad8 <move_snake+0x198>)
 8003986:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8003988:	4854      	ldr	r0, [pc, #336]	; (8003adc <move_snake+0x19c>)
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	2200      	movs	r2, #0
 8003996:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		old_poshx=snake_pos[0][size_of_snake-1];
 800399a:	4b4e      	ldr	r3, [pc, #312]	; (8003ad4 <move_snake+0x194>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a4d      	ldr	r2, [pc, #308]	; (8003ad8 <move_snake+0x198>)
 80039a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a6:	4a4e      	ldr	r2, [pc, #312]	; (8003ae0 <move_snake+0x1a0>)
 80039a8:	6013      	str	r3, [r2, #0]
		old_poshy=snake_pos[1][size_of_snake-1];
 80039aa:	4b4a      	ldr	r3, [pc, #296]	; (8003ad4 <move_snake+0x194>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <move_snake+0x198>)
 80039b2:	3318      	adds	r3, #24
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	4a4a      	ldr	r2, [pc, #296]	; (8003ae4 <move_snake+0x1a4>)
 80039ba:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=snake_pos[0][size_of_snake-1]+snake_speed[0];
 80039bc:	4b45      	ldr	r3, [pc, #276]	; (8003ad4 <move_snake+0x194>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	4a45      	ldr	r2, [pc, #276]	; (8003ad8 <move_snake+0x198>)
 80039c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039c8:	4b47      	ldr	r3, [pc, #284]	; (8003ae8 <move_snake+0x1a8>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <move_snake+0x194>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	440a      	add	r2, r1
 80039d4:	4940      	ldr	r1, [pc, #256]	; (8003ad8 <move_snake+0x198>)
 80039d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=snake_pos[1][size_of_snake-1]+snake_speed[1];
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <move_snake+0x194>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3b01      	subs	r3, #1
 80039e0:	4a3d      	ldr	r2, [pc, #244]	; (8003ad8 <move_snake+0x198>)
 80039e2:	3318      	adds	r3, #24
 80039e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80039e8:	4b3f      	ldr	r3, [pc, #252]	; (8003ae8 <move_snake+0x1a8>)
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <move_snake+0x194>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	440a      	add	r2, r1
 80039f4:	4938      	ldr	r1, [pc, #224]	; (8003ad8 <move_snake+0x198>)
 80039f6:	3318      	adds	r3, #24
 80039f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pos_head[0]=snake_pos[0][size_of_snake-1];
 80039fc:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <move_snake+0x194>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	4a35      	ldr	r2, [pc, #212]	; (8003ad8 <move_snake+0x198>)
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	4a38      	ldr	r2, [pc, #224]	; (8003aec <move_snake+0x1ac>)
 8003a0a:	6013      	str	r3, [r2, #0]
		pos_head[1]=snake_pos[1][size_of_snake-1];
 8003a0c:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <move_snake+0x194>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	4a31      	ldr	r2, [pc, #196]	; (8003ad8 <move_snake+0x198>)
 8003a14:	3318      	adds	r3, #24
 8003a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1a:	4a34      	ldr	r2, [pc, #208]	; (8003aec <move_snake+0x1ac>)
 8003a1c:	6053      	str	r3, [r2, #4]
		for(int i=size_of_snake-2;i>=0;i--){
 8003a1e:	4b2d      	ldr	r3, [pc, #180]	; (8003ad4 <move_snake+0x194>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3b02      	subs	r3, #2
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e020      	b.n	8003a6a <move_snake+0x12a>
			int nx = snake_pos[0][i];
 8003a28:	4a2b      	ldr	r2, [pc, #172]	; (8003ad8 <move_snake+0x198>)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	60bb      	str	r3, [r7, #8]
			int ny = snake_pos[1][i];
 8003a32:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <move_snake+0x198>)
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3318      	adds	r3, #24
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	607b      	str	r3, [r7, #4]
			snake_pos[0][i]=old_poshx;
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <move_snake+0x1a0>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4925      	ldr	r1, [pc, #148]	; (8003ad8 <move_snake+0x198>)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			snake_pos[1][i]=old_poshy;
 8003a4a:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <move_snake+0x1a4>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4922      	ldr	r1, [pc, #136]	; (8003ad8 <move_snake+0x198>)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	3318      	adds	r3, #24
 8003a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			old_poshx=nx;
 8003a58:	4a21      	ldr	r2, [pc, #132]	; (8003ae0 <move_snake+0x1a0>)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	6013      	str	r3, [r2, #0]
			old_poshy=ny;
 8003a5e:	4a21      	ldr	r2, [pc, #132]	; (8003ae4 <move_snake+0x1a4>)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6013      	str	r3, [r2, #0]
		for(int i=size_of_snake-2;i>=0;i--){
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	dadb      	bge.n	8003a28 <move_snake+0xe8>
		}
		for(int i=size_of_snake-2;i>=0;i--){
 8003a70:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <move_snake+0x194>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3b02      	subs	r3, #2
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	e014      	b.n	8003aa4 <move_snake+0x164>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=2;
 8003a7a:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <move_snake+0x198>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a82:	4915      	ldr	r1, [pc, #84]	; (8003ad8 <move_snake+0x198>)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3318      	adds	r3, #24
 8003a88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003a8c:	4813      	ldr	r0, [pc, #76]	; (8003adc <move_snake+0x19c>)
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	2202      	movs	r2, #2
 8003a9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		for(int i=size_of_snake-2;i>=0;i--){
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	dae7      	bge.n	8003a7a <move_snake+0x13a>
		}
		check_collision();
 8003aaa:	f000 fa19 	bl	8003ee0 <check_collision>
		check_food();
 8003aae:	f000 fac1 	bl	8004034 <check_food>
		draw_grid[pos_head[0]][pos_head[1]]=4;
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <move_snake+0x1ac>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <move_snake+0x1ac>)
 8003ab8:	6859      	ldr	r1, [r3, #4]
 8003aba:	4808      	ldr	r0, [pc, #32]	; (8003adc <move_snake+0x19c>)
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003acc:	bf00      	nop
 8003ace:	3718      	adds	r7, #24
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	2000001c 	.word	0x2000001c
 8003ad8:	200008b4 	.word	0x200008b4
 8003adc:	20000134 	.word	0x20000134
 8003ae0:	20000974 	.word	0x20000974
 8003ae4:	20000978 	.word	0x20000978
 8003ae8:	20000020 	.word	0x20000020
 8003aec:	2000097c 	.word	0x2000097c

08003af0 <re_init>:

void re_init(void){
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	init_grid();
 8003af4:	f7ff fefa 	bl	80038ec <init_grid>
	draw_grid[0][0]=2;
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <re_init+0x64>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <re_init+0x64>)
 8003b00:	2202      	movs	r2, #2
 8003b02:	651a      	str	r2, [r3, #80]	; 0x50
	snake_pos[0][0]=0;
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <re_init+0x68>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <re_init+0x68>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	661a      	str	r2, [r3, #96]	; 0x60
	snake_pos[0][1]=1;
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <re_init+0x68>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <re_init+0x68>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	665a      	str	r2, [r3, #100]	; 0x64
	size_of_snake=2;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <re_init+0x6c>)
 8003b1e:	2202      	movs	r2, #2
 8003b20:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <re_init+0x70>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <re_init+0x70>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
	sw_up=1;
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <re_init+0x74>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
	sw_down=1;
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <re_init+0x78>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
	sw_right=1;
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <re_init+0x7c>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
	sw_left=1;
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <re_init+0x80>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]
	score=0;
 8003b46:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <re_init+0x84>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
	spawn_food();
 8003b4c:	f000 f814 	bl	8003b78 <spawn_food>
}
 8003b50:	bf00      	nop
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000134 	.word	0x20000134
 8003b58:	200008b4 	.word	0x200008b4
 8003b5c:	2000001c 	.word	0x2000001c
 8003b60:	20000020 	.word	0x20000020
 8003b64:	20000028 	.word	0x20000028
 8003b68:	2000002c 	.word	0x2000002c
 8003b6c:	20000030 	.word	0x20000030
 8003b70:	20000034 	.word	0x20000034
 8003b74:	20000984 	.word	0x20000984

08003b78 <spawn_food>:

void spawn_food(void){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
	int xf=rand_no(23);
 8003b7e:	2017      	movs	r0, #23
 8003b80:	f000 f99a 	bl	8003eb8 <rand_no>
 8003b84:	6078      	str	r0, [r7, #4]
	int yf=rand_no(19);
 8003b86:	2013      	movs	r0, #19
 8003b88:	f000 f996 	bl	8003eb8 <rand_no>
 8003b8c:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 8003b8e:	e007      	b.n	8003ba0 <spawn_food+0x28>
		xf=rand_no(23);
 8003b90:	2017      	movs	r0, #23
 8003b92:	f000 f991 	bl	8003eb8 <rand_no>
 8003b96:	6078      	str	r0, [r7, #4]
		yf=rand_no(19);
 8003b98:	2013      	movs	r0, #19
 8003b9a:	f000 f98d 	bl	8003eb8 <rand_no>
 8003b9e:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 8003ba0:	490d      	ldr	r1, [pc, #52]	; (8003bd8 <spawn_food+0x60>)
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d0eb      	beq.n	8003b90 <spawn_food+0x18>
	}
	draw_grid[xf][yf]=1;
 8003bb8:	4907      	ldr	r1, [pc, #28]	; (8003bd8 <spawn_food+0x60>)
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000134 	.word	0x20000134

08003bdc <spawn_wall>:

void spawn_wall(void){
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
	int xw=rand_no(23);
 8003be2:	2017      	movs	r0, #23
 8003be4:	f000 f968 	bl	8003eb8 <rand_no>
 8003be8:	60f8      	str	r0, [r7, #12]
	int yw=rand_no(19);
 8003bea:	2013      	movs	r0, #19
 8003bec:	f000 f964 	bl	8003eb8 <rand_no>
 8003bf0:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 8003bf2:	e007      	b.n	8003c04 <spawn_wall+0x28>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
		xw=rand_no(23);
 8003bf4:	2017      	movs	r0, #23
 8003bf6:	f000 f95f 	bl	8003eb8 <rand_no>
 8003bfa:	60f8      	str	r0, [r7, #12]
		yw=rand_no(19);
 8003bfc:	2013      	movs	r0, #19
 8003bfe:	f000 f95b 	bl	8003eb8 <rand_no>
 8003c02:	60b8      	str	r0, [r7, #8]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 8003c04:	49ab      	ldr	r1, [pc, #684]	; (8003eb4 <spawn_wall+0x2d8>)
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	4413      	add	r3, r2
 8003c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d0eb      	beq.n	8003bf4 <spawn_wall+0x18>
 8003c1c:	49a5      	ldr	r1, [pc, #660]	; (8003eb4 <spawn_wall+0x2d8>)
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d0df      	beq.n	8003bf4 <spawn_wall+0x18>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	499e      	ldr	r1, [pc, #632]	; (8003eb4 <spawn_wall+0x2d8>)
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	while(draw_grid[xw][yw]==2 || draw_grid[xw][yw]==1 ||
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d00c      	beq.n	8003c68 <spawn_wall+0x8c>
			((draw_grid[xw+1][yw]==2 || draw_grid[xw+1][yw]==1) && (draw_grid[xw-1][yw]==2 || draw_grid[xw-1][yw]==1)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	4998      	ldr	r1, [pc, #608]	; (8003eb4 <spawn_wall+0x2d8>)
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d14e      	bne.n	8003d06 <spawn_wall+0x12a>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e5a      	subs	r2, r3, #1
 8003c6c:	4991      	ldr	r1, [pc, #580]	; (8003eb4 <spawn_wall+0x2d8>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d00c      	beq.n	8003c9c <spawn_wall+0xc0>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1e5a      	subs	r2, r3, #1
 8003c86:	498b      	ldr	r1, [pc, #556]	; (8003eb4 <spawn_wall+0x2d8>)
 8003c88:	4613      	mov	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4413      	add	r3, r2
 8003c94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d134      	bne.n	8003d06 <spawn_wall+0x12a>
			&& (draw_grid[xw][yw+1]==2 || draw_grid[xw][yw+1]==1) && (draw_grid[xw][yw-1]==2 || draw_grid[xw][yw-1]==1))){
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	4884      	ldr	r0, [pc, #528]	; (8003eb4 <spawn_wall+0x2d8>)
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d00c      	beq.n	8003cd0 <spawn_wall+0xf4>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	487e      	ldr	r0, [pc, #504]	; (8003eb4 <spawn_wall+0x2d8>)
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d11a      	bne.n	8003d06 <spawn_wall+0x12a>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	1e59      	subs	r1, r3, #1
 8003cd4:	4877      	ldr	r0, [pc, #476]	; (8003eb4 <spawn_wall+0x2d8>)
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d084      	beq.n	8003bf4 <spawn_wall+0x18>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	1e59      	subs	r1, r3, #1
 8003cee:	4871      	ldr	r0, [pc, #452]	; (8003eb4 <spawn_wall+0x2d8>)
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f43f af77 	beq.w	8003bf4 <spawn_wall+0x18>
	}
	draw_grid[xw][yw]=3;
 8003d06:	496b      	ldr	r1, [pc, #428]	; (8003eb4 <spawn_wall+0x2d8>)
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	4413      	add	r3, r2
 8003d16:	2203      	movs	r2, #3
 8003d18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	int d=rand_no(4);
 8003d1c:	2004      	movs	r0, #4
 8003d1e:	f000 f8cb 	bl	8003eb8 <rand_no>
 8003d22:	6038      	str	r0, [r7, #0]
	int flag = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
	while(flag == 0){
 8003d28:	e0bb      	b.n	8003ea2 <spawn_wall+0x2c6>
		d = rand_no(4);
 8003d2a:	2004      	movs	r0, #4
 8003d2c:	f000 f8c4 	bl	8003eb8 <rand_no>
 8003d30:	6038      	str	r0, [r7, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	f200 80b2 	bhi.w	8003ea0 <spawn_wall+0x2c4>
 8003d3c:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <spawn_wall+0x168>)
 8003d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d42:	bf00      	nop
 8003d44:	08003d55 	.word	0x08003d55
 8003d48:	08003dab 	.word	0x08003dab
 8003d4c:	08003dfd 	.word	0x08003dfd
 8003d50:	08003e4f 	.word	0x08003e4f
		switch (d){
		case 1:
			if(draw_grid[xw+1][yw]!=2 && draw_grid[xw+1][yw]!=1){
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	4956      	ldr	r1, [pc, #344]	; (8003eb4 <spawn_wall+0x2d8>)
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	4413      	add	r3, r2
 8003d66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	f000 8099 	beq.w	8003ea2 <spawn_wall+0x2c6>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	494f      	ldr	r1, [pc, #316]	; (8003eb4 <spawn_wall+0x2d8>)
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4413      	add	r3, r2
 8003d82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	f000 808b 	beq.w	8003ea2 <spawn_wall+0x2c6>
				draw_grid[xw+1][yw]=3;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	4948      	ldr	r1, [pc, #288]	; (8003eb4 <spawn_wall+0x2d8>)
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	2203      	movs	r2, #3
 8003da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	607b      	str	r3, [r7, #4]
			}
			break;
 8003da8:	e07b      	b.n	8003ea2 <spawn_wall+0x2c6>
		case 2:
			if(draw_grid[xw-1][yw]!=2 && draw_grid[xw-1][yw]!=1){
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1e5a      	subs	r2, r3, #1
 8003dae:	4941      	ldr	r1, [pc, #260]	; (8003eb4 <spawn_wall+0x2d8>)
 8003db0:	4613      	mov	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d06e      	beq.n	8003ea2 <spawn_wall+0x2c6>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e5a      	subs	r2, r3, #1
 8003dc8:	493a      	ldr	r1, [pc, #232]	; (8003eb4 <spawn_wall+0x2d8>)
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d061      	beq.n	8003ea2 <spawn_wall+0x2c6>
				draw_grid[xw-1][yw]=3;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	4934      	ldr	r1, [pc, #208]	; (8003eb4 <spawn_wall+0x2d8>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	4413      	add	r3, r2
 8003df0:	2203      	movs	r2, #3
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				flag = 1;
 8003df6:	2301      	movs	r3, #1
 8003df8:	607b      	str	r3, [r7, #4]
			}
			break;
 8003dfa:	e052      	b.n	8003ea2 <spawn_wall+0x2c6>
		case 3:
			if(draw_grid[xw][yw+1]!=2 && draw_grid[xw][yw+1]!=1){
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	482c      	ldr	r0, [pc, #176]	; (8003eb4 <spawn_wall+0x2d8>)
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d045      	beq.n	8003ea2 <spawn_wall+0x2c6>
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	4826      	ldr	r0, [pc, #152]	; (8003eb4 <spawn_wall+0x2d8>)
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d038      	beq.n	8003ea2 <spawn_wall+0x2c6>
				draw_grid[xw][yw+1]=3;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1c59      	adds	r1, r3, #1
 8003e34:	481f      	ldr	r0, [pc, #124]	; (8003eb4 <spawn_wall+0x2d8>)
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	2203      	movs	r2, #3
 8003e44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
			}
			break;
 8003e4c:	e029      	b.n	8003ea2 <spawn_wall+0x2c6>
		case 4:
			if(draw_grid[xw][yw-1]!=2 && draw_grid[xw][yw-1]!=1){
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1e59      	subs	r1, r3, #1
 8003e52:	4818      	ldr	r0, [pc, #96]	; (8003eb4 <spawn_wall+0x2d8>)
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d01c      	beq.n	8003ea2 <spawn_wall+0x2c6>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1e59      	subs	r1, r3, #1
 8003e6c:	4811      	ldr	r0, [pc, #68]	; (8003eb4 <spawn_wall+0x2d8>)
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d00f      	beq.n	8003ea2 <spawn_wall+0x2c6>
				draw_grid[xw][yw-1]=3;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	1e59      	subs	r1, r3, #1
 8003e86:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <spawn_wall+0x2d8>)
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4413      	add	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	2203      	movs	r2, #3
 8003e96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				flag = 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	607b      	str	r3, [r7, #4]
			}
			break;
 8003e9e:	e000      	b.n	8003ea2 <spawn_wall+0x2c6>
		default:
			break;
 8003ea0:	bf00      	nop
	while(flag == 0){
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f43f af40 	beq.w	8003d2a <spawn_wall+0x14e>
		}
	}
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000134 	.word	0x20000134

08003eb8 <rand_no>:

int rand_no(int m){
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	int num = (rand()%(m+1));
 8003ec0:	f006 faf6 	bl	800a4b0 <rand>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	fb92 f1f3 	sdiv	r1, r2, r3
 8003ece:	fb03 f301 	mul.w	r3, r3, r1
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
	return num;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <check_collision>:

void check_collision(void){
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
	if(pos_head[0]>23 || pos_head[0]<0){
 8003ee4:	4b23      	ldr	r3, [pc, #140]	; (8003f74 <check_collision+0x94>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b17      	cmp	r3, #23
 8003eea:	dc03      	bgt.n	8003ef4 <check_collision+0x14>
 8003eec:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <check_collision+0x94>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da02      	bge.n	8003efa <check_collision+0x1a>
		lose = 1;
 8003ef4:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <check_collision+0x98>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
	}
	if(pos_head[1]>19 || pos_head[1]<0){
 8003efa:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <check_collision+0x94>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b13      	cmp	r3, #19
 8003f00:	dc03      	bgt.n	8003f0a <check_collision+0x2a>
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <check_collision+0x94>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da02      	bge.n	8003f10 <check_collision+0x30>
		lose = 1;
 8003f0a:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <check_collision+0x98>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==2){
 8003f10:	4b18      	ldr	r3, [pc, #96]	; (8003f74 <check_collision+0x94>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <check_collision+0x94>)
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	4818      	ldr	r0, [pc, #96]	; (8003f7c <check_collision+0x9c>)
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d102      	bne.n	8003f32 <check_collision+0x52>
		lose = 1;
 8003f2c:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <check_collision+0x98>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
	}
	if(draw_grid[pos_head[0]][pos_head[1]]==3){
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <check_collision+0x94>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <check_collision+0x94>)
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	4810      	ldr	r0, [pc, #64]	; (8003f7c <check_collision+0x9c>)
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d102      	bne.n	8003f54 <check_collision+0x74>
		lose = 1;
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <check_collision+0x98>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
	}
	if(countdown == 0){
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <check_collision+0xa0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <check_collision+0x88>
		lose = 1;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <check_collision+0x98>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
		countdown = 180;
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <check_collision+0xa0>)
 8003f64:	22b4      	movs	r2, #180	; 0xb4
 8003f66:	601a      	str	r2, [r3, #0]
	}
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000097c 	.word	0x2000097c
 8003f78:	20000988 	.word	0x20000988
 8003f7c:	20000134 	.word	0x20000134
 8003f80:	20000008 	.word	0x20000008

08003f84 <wait_check>:

void wait_check(void){
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
	if(sw_down==0 && snake_speed[1]==0){
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <wait_check+0x9c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10c      	bne.n	8003faa <wait_check+0x26>
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <wait_check+0xa0>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d108      	bne.n	8003faa <wait_check+0x26>
		snake_speed[0]=0;
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <wait_check+0xa0>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
		snake_speed[1]=1;
 8003f9e:	4b21      	ldr	r3, [pc, #132]	; (8004024 <wait_check+0xa0>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	605a      	str	r2, [r3, #4]
		sw_down=1;
 8003fa4:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <wait_check+0x9c>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
	}
	if(sw_up==0 && snake_speed[1]==0){
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <wait_check+0xa4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10d      	bne.n	8003fce <wait_check+0x4a>
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <wait_check+0xa0>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <wait_check+0x4a>
		snake_speed[0]=0;
 8003fba:	4b1a      	ldr	r3, [pc, #104]	; (8004024 <wait_check+0xa0>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
		snake_speed[1]=-1;
 8003fc0:	4b18      	ldr	r3, [pc, #96]	; (8004024 <wait_check+0xa0>)
 8003fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc6:	605a      	str	r2, [r3, #4]
		sw_up=1;
 8003fc8:	4b17      	ldr	r3, [pc, #92]	; (8004028 <wait_check+0xa4>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]
	}
	if(sw_right==0 && snake_speed[0]==0){
 8003fce:	4b17      	ldr	r3, [pc, #92]	; (800402c <wait_check+0xa8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10c      	bne.n	8003ff0 <wait_check+0x6c>
 8003fd6:	4b13      	ldr	r3, [pc, #76]	; (8004024 <wait_check+0xa0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d108      	bne.n	8003ff0 <wait_check+0x6c>
		snake_speed[0]=1;
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <wait_check+0xa0>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8003fe4:	4b0f      	ldr	r3, [pc, #60]	; (8004024 <wait_check+0xa0>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
		sw_right=1;
 8003fea:	4b10      	ldr	r3, [pc, #64]	; (800402c <wait_check+0xa8>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
	}
	if(sw_left==0 && snake_speed[0]==0){
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <wait_check+0xac>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <wait_check+0x90>
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <wait_check+0xa0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <wait_check+0x90>
		snake_speed[0]=-1;
 8004000:	4b08      	ldr	r3, [pc, #32]	; (8004024 <wait_check+0xa0>)
 8004002:	f04f 32ff 	mov.w	r2, #4294967295
 8004006:	601a      	str	r2, [r3, #0]
		snake_speed[1]=0;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <wait_check+0xa0>)
 800400a:	2200      	movs	r2, #0
 800400c:	605a      	str	r2, [r3, #4]
		sw_left=1;
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <wait_check+0xac>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]
	}
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000002c 	.word	0x2000002c
 8004024:	20000020 	.word	0x20000020
 8004028:	20000028 	.word	0x20000028
 800402c:	20000030 	.word	0x20000030
 8004030:	20000034 	.word	0x20000034

08004034 <check_food>:


void check_food(void){
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
    if(draw_grid[pos_head[0]][pos_head[1]]==1){
 800403a:	4b31      	ldr	r3, [pc, #196]	; (8004100 <check_food+0xcc>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b30      	ldr	r3, [pc, #192]	; (8004100 <check_food+0xcc>)
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	4830      	ldr	r0, [pc, #192]	; (8004104 <check_food+0xd0>)
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d150      	bne.n	80040f8 <check_food+0xc4>
        score++;
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <check_food+0xd4>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <check_food+0xd4>)
 8004060:	701a      	strb	r2, [r3, #0]
        size_of_snake++;
 8004062:	4b2a      	ldr	r3, [pc, #168]	; (800410c <check_food+0xd8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	4a28      	ldr	r2, [pc, #160]	; (800410c <check_food+0xd8>)
 800406a:	6013      	str	r3, [r2, #0]

        for (int i = size_of_snake - 1; i > 0; i--) {
 800406c:	4b27      	ldr	r3, [pc, #156]	; (800410c <check_food+0xd8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3b01      	subs	r3, #1
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	e016      	b.n	80040a4 <check_food+0x70>
            snake_pos[0][i] = snake_pos[0][i - 1];
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3b01      	subs	r3, #1
 800407a:	4a25      	ldr	r2, [pc, #148]	; (8004110 <check_food+0xdc>)
 800407c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004080:	4923      	ldr	r1, [pc, #140]	; (8004110 <check_food+0xdc>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            snake_pos[1][i] = snake_pos[1][i - 1];
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <check_food+0xdc>)
 800408e:	3318      	adds	r3, #24
 8004090:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004094:	491e      	ldr	r1, [pc, #120]	; (8004110 <check_food+0xdc>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3318      	adds	r3, #24
 800409a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = size_of_snake - 1; i > 0; i--) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	dce5      	bgt.n	8004076 <check_food+0x42>
        }

        snake_pos[0][0] = pos_head[0];
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <check_food+0xcc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a18      	ldr	r2, [pc, #96]	; (8004110 <check_food+0xdc>)
 80040b0:	6013      	str	r3, [r2, #0]
        snake_pos[1][0] = pos_head[1];
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <check_food+0xcc>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <check_food+0xdc>)
 80040b8:	6613      	str	r3, [r2, #96]	; 0x60

        for (int i = 0; i < size_of_snake; i++) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	e014      	b.n	80040ea <check_food+0xb6>
            draw_grid[snake_pos[0][i]][snake_pos[1][i]] = 2;
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <check_food+0xdc>)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80040c8:	4911      	ldr	r1, [pc, #68]	; (8004110 <check_food+0xdc>)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	3318      	adds	r3, #24
 80040ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80040d2:	480c      	ldr	r0, [pc, #48]	; (8004104 <check_food+0xd0>)
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	2202      	movs	r2, #2
 80040e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        for (int i = 0; i < size_of_snake; i++) {
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	4b08      	ldr	r3, [pc, #32]	; (800410c <check_food+0xd8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	dbe5      	blt.n	80040c0 <check_food+0x8c>
        }

        spawn_food();
 80040f4:	f7ff fd40 	bl	8003b78 <spawn_food>
    }
}
 80040f8:	bf00      	nop
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	2000097c 	.word	0x2000097c
 8004104:	20000134 	.word	0x20000134
 8004108:	20000984 	.word	0x20000984
 800410c:	2000001c 	.word	0x2000001c
 8004110:	200008b4 	.word	0x200008b4

08004114 <timer_init>:

uint16_t flag_timer7 = 0;
uint16_t timer7_counter = 0;
uint16_t timer7_MUL = 0;

void timer_init(){
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004118:	4803      	ldr	r0, [pc, #12]	; (8004128 <timer_init+0x14>)
 800411a:	f005 f829 	bl	8009170 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 800411e:	4803      	ldr	r0, [pc, #12]	; (800412c <timer_init+0x18>)
 8004120:	f004 ffbe 	bl	80090a0 <HAL_TIM_Base_Start>
}
 8004124:	bf00      	nop
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000c4c 	.word	0x20000c4c
 800412c:	20000c04 	.word	0x20000c04

08004130 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800413a:	4a08      	ldr	r2, [pc, #32]	; (800415c <setTimer2+0x2c>)
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <setTimer2+0x2c>)
 8004142:	881a      	ldrh	r2, [r3, #0]
 8004144:	4b06      	ldr	r3, [pc, #24]	; (8004160 <setTimer2+0x30>)
 8004146:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <setTimer2+0x34>)
 800414a:	2200      	movs	r2, #0
 800414c:	801a      	strh	r2, [r3, #0]
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	20000990 	.word	0x20000990
 8004160:	2000098e 	.word	0x2000098e
 8004164:	2000098c 	.word	0x2000098c

08004168 <setTimer3>:

void setTimer3(uint16_t duration){
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	80fb      	strh	r3, [r7, #6]
	timer3_MUL = duration/TIMER_CYCLE_2;
 8004172:	4a08      	ldr	r2, [pc, #32]	; (8004194 <setTimer3+0x2c>)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	8013      	strh	r3, [r2, #0]
	timer3_counter = timer3_MUL;
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <setTimer3+0x2c>)
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <setTimer3+0x30>)
 800417e:	801a      	strh	r2, [r3, #0]
	flag_timer3 = 0;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <setTimer3+0x34>)
 8004182:	2200      	movs	r2, #0
 8004184:	801a      	strh	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000996 	.word	0x20000996
 8004198:	20000994 	.word	0x20000994
 800419c:	20000992 	.word	0x20000992

080041a0 <setTimer4>:

void setTimer4(uint16_t duration){
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
	timer4_MUL = duration/TIMER_CYCLE_2;
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <setTimer4+0x2c>)
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	8013      	strh	r3, [r2, #0]
	timer4_counter = timer4_MUL;
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <setTimer4+0x2c>)
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <setTimer4+0x30>)
 80041b6:	801a      	strh	r2, [r3, #0]
	flag_timer4 = 0;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <setTimer4+0x34>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	801a      	strh	r2, [r3, #0]
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	2000099c 	.word	0x2000099c
 80041d0:	2000099a 	.word	0x2000099a
 80041d4:	20000998 	.word	0x20000998

080041d8 <setTimer5>:

void setTimer5(uint16_t duration){
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
	timer5_MUL = duration/TIMER_CYCLE_2;
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <setTimer5+0x2c>)
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	8013      	strh	r3, [r2, #0]
	timer5_counter = timer5_MUL;
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <setTimer5+0x2c>)
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <setTimer5+0x30>)
 80041ee:	801a      	strh	r2, [r3, #0]
	flag_timer5 = 0;
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <setTimer5+0x34>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	801a      	strh	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	200009a2 	.word	0x200009a2
 8004208:	200009a0 	.word	0x200009a0
 800420c:	2000099e 	.word	0x2000099e

08004210 <setTimer7>:
	timer6_MUL = duration/TIMER_CYCLE_2;
	timer6_counter = timer6_MUL;
	flag_timer6 = 0;
}

void setTimer7(uint16_t duration){
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	80fb      	strh	r3, [r7, #6]
	timer7_MUL = duration/TIMER_CYCLE_2;
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <setTimer7+0x2c>)
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	8013      	strh	r3, [r2, #0]
	timer7_counter = timer7_MUL;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <setTimer7+0x2c>)
 8004222:	881a      	ldrh	r2, [r3, #0]
 8004224:	4b06      	ldr	r3, [pc, #24]	; (8004240 <setTimer7+0x30>)
 8004226:	801a      	strh	r2, [r3, #0]
	flag_timer7 = 0;
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <setTimer7+0x34>)
 800422a:	2200      	movs	r2, #0
 800422c:	801a      	strh	r2, [r3, #0]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200009ae 	.word	0x200009ae
 8004240:	200009ac 	.word	0x200009ac
 8004244:	200009aa 	.word	0x200009aa

08004248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004258:	d17f      	bne.n	800435a <HAL_TIM_PeriodElapsedCallback+0x112>
		if(timer2_counter > 0){
 800425a:	4b42      	ldr	r3, [pc, #264]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8004262:	4b40      	ldr	r3, [pc, #256]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	4b3e      	ldr	r3, [pc, #248]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800426c:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800426e:	4b3d      	ldr	r3, [pc, #244]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004278:	2201      	movs	r2, #1
 800427a:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 800427c:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800427e:	881a      	ldrh	r2, [r3, #0]
 8004280:	4b38      	ldr	r3, [pc, #224]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004282:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer3_counter > 0){
 8004284:	4b3a      	ldr	r3, [pc, #232]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d010      	beq.n	80042ae <HAL_TIM_PeriodElapsedCallback+0x66>
			timer3_counter--;
 800428c:	4b38      	ldr	r3, [pc, #224]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004296:	801a      	strh	r2, [r3, #0]
			if(timer3_counter == 0) {
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <HAL_TIM_PeriodElapsedCallback+0x66>
				flag_timer3 = 1;
 80042a0:	4b34      	ldr	r3, [pc, #208]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	801a      	strh	r2, [r3, #0]
				timer3_counter = timer3_MUL;
 80042a6:	4b34      	ldr	r3, [pc, #208]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80042a8:	881a      	ldrh	r2, [r3, #0]
 80042aa:	4b31      	ldr	r3, [pc, #196]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80042ac:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer4_counter > 0){
 80042ae:	4b33      	ldr	r3, [pc, #204]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d010      	beq.n	80042d8 <HAL_TIM_PeriodElapsedCallback+0x90>
			timer4_counter--;
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	4b2f      	ldr	r3, [pc, #188]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80042c0:	801a      	strh	r2, [r3, #0]
			if(timer4_counter == 0) {
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_TIM_PeriodElapsedCallback+0x90>
				flag_timer4 = 1;
 80042ca:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	801a      	strh	r2, [r3, #0]
				timer4_counter = timer4_MUL;
 80042d0:	4b2c      	ldr	r3, [pc, #176]	; (8004384 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80042d2:	881a      	ldrh	r2, [r3, #0]
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80042d6:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer5_counter > 0){
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_TIM_PeriodElapsedCallback+0xba>
			timer5_counter--;
 80042e0:	4b29      	ldr	r3, [pc, #164]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4b27      	ldr	r3, [pc, #156]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80042ea:	801a      	strh	r2, [r3, #0]
			if(timer5_counter == 0) {
 80042ec:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <HAL_TIM_PeriodElapsedCallback+0xba>
				flag_timer5 = 1;
 80042f4:	4b25      	ldr	r3, [pc, #148]	; (800438c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	801a      	strh	r2, [r3, #0]
				timer5_counter = timer5_MUL;
 80042fa:	4b25      	ldr	r3, [pc, #148]	; (8004390 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004300:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer6_counter > 0){
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d010      	beq.n	800432c <HAL_TIM_PeriodElapsedCallback+0xe4>
			timer6_counter--;
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004314:	801a      	strh	r2, [r3, #0]
			if(timer6_counter == 0) {
 8004316:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_TIM_PeriodElapsedCallback+0xe4>
				flag_timer6 = 1;
 800431e:	4b1e      	ldr	r3, [pc, #120]	; (8004398 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004320:	2201      	movs	r2, #1
 8004322:	801a      	strh	r2, [r3, #0]
				timer6_counter = timer6_MUL;
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8004326:	881a      	ldrh	r2, [r3, #0]
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800432a:	801a      	strh	r2, [r3, #0]
			}
		}
		if(timer7_counter > 0){
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_TIM_PeriodElapsedCallback+0x10e>
			timer7_counter--;
 8004334:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	4b18      	ldr	r3, [pc, #96]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800433e:	801a      	strh	r2, [r3, #0]
			if(timer7_counter == 0) {
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <HAL_TIM_PeriodElapsedCallback+0x10e>
				flag_timer7 = 1;
 8004348:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800434a:	2201      	movs	r2, #1
 800434c:	801a      	strh	r2, [r3, #0]
				timer7_counter = timer7_MUL;
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8004350:	881a      	ldrh	r2, [r3, #0]
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8004354:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8004356:	f7fe fead 	bl	80030b4 <led7_Scan>
		//touch_Scan();
	}
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	2000098e 	.word	0x2000098e
 8004368:	2000098c 	.word	0x2000098c
 800436c:	20000990 	.word	0x20000990
 8004370:	20000994 	.word	0x20000994
 8004374:	20000992 	.word	0x20000992
 8004378:	20000996 	.word	0x20000996
 800437c:	2000099a 	.word	0x2000099a
 8004380:	20000998 	.word	0x20000998
 8004384:	2000099c 	.word	0x2000099c
 8004388:	200009a0 	.word	0x200009a0
 800438c:	2000099e 	.word	0x2000099e
 8004390:	200009a2 	.word	0x200009a2
 8004394:	200009a6 	.word	0x200009a6
 8004398:	200009a4 	.word	0x200009a4
 800439c:	200009a8 	.word	0x200009a8
 80043a0:	200009ac 	.word	0x200009ac
 80043a4:	200009aa 	.word	0x200009aa
 80043a8:	200009ae 	.word	0x200009ae

080043ac <delay_us>:

void delay_us (uint16_t us)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <delay_us+0x30>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2200      	movs	r2, #0
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80043be:	bf00      	nop
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <delay_us+0x30>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d3f9      	bcc.n	80043c0 <delay_us+0x14>
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000c04 	.word	0x20000c04

080043e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <MX_SPI1_Init+0x64>)
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <MX_SPI1_Init+0x68>)
 80043e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <MX_SPI1_Init+0x64>)
 80043ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80043f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <MX_SPI1_Init+0x64>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <MX_SPI1_Init+0x64>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043fe:	4b11      	ldr	r3, [pc, #68]	; (8004444 <MX_SPI1_Init+0x64>)
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <MX_SPI1_Init+0x64>)
 8004406:	2200      	movs	r2, #0
 8004408:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <MX_SPI1_Init+0x64>)
 800440c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004410:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_SPI1_Init+0x64>)
 8004414:	2200      	movs	r2, #0
 8004416:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <MX_SPI1_Init+0x64>)
 800441a:	2200      	movs	r2, #0
 800441c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_SPI1_Init+0x64>)
 8004420:	2200      	movs	r2, #0
 8004422:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <MX_SPI1_Init+0x64>)
 8004426:	2200      	movs	r2, #0
 8004428:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_SPI1_Init+0x64>)
 800442c:	220a      	movs	r2, #10
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004430:	4804      	ldr	r0, [pc, #16]	; (8004444 <MX_SPI1_Init+0x64>)
 8004432:	f003 fff9 	bl	8008428 <HAL_SPI_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800443c:	f7fe ffd8 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000b64 	.word	0x20000b64
 8004448:	40013000 	.word	0x40013000

0800444c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	f107 0314 	add.w	r3, r7, #20
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <HAL_SPI_MspInit+0x84>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d12b      	bne.n	80044c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <HAL_SPI_MspInit+0x88>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <HAL_SPI_MspInit+0x88>)
 8004478:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800447c:	6453      	str	r3, [r2, #68]	; 0x44
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <HAL_SPI_MspInit+0x88>)
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <HAL_SPI_MspInit+0x88>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4a10      	ldr	r2, [pc, #64]	; (80044d4 <HAL_SPI_MspInit+0x88>)
 8004494:	f043 0302 	orr.w	r3, r3, #2
 8004498:	6313      	str	r3, [r2, #48]	; 0x30
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <HAL_SPI_MspInit+0x88>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80044a6:	2338      	movs	r3, #56	; 0x38
 80044a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	2302      	movs	r3, #2
 80044ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b2:	2303      	movs	r3, #3
 80044b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80044b6:	2305      	movs	r3, #5
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ba:	f107 0314 	add.w	r3, r7, #20
 80044be:	4619      	mov	r1, r3
 80044c0:	4805      	ldr	r0, [pc, #20]	; (80044d8 <HAL_SPI_MspInit+0x8c>)
 80044c2:	f002 f9c3 	bl	800684c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80044c6:	bf00      	nop
 80044c8:	3728      	adds	r7, #40	; 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40013000 	.word	0x40013000
 80044d4:	40023800 	.word	0x40023800
 80044d8:	40020400 	.word	0x40020400

080044dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_MspInit+0x4c>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <HAL_MspInit+0x4c>)
 80044ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f0:	6453      	str	r3, [r2, #68]	; 0x44
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_MspInit+0x4c>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	607b      	str	r3, [r7, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_MspInit+0x4c>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	4a08      	ldr	r2, [pc, #32]	; (8004528 <HAL_MspInit+0x4c>)
 8004508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450c:	6413      	str	r3, [r2, #64]	; 0x40
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_MspInit+0x4c>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004530:	e7fe      	b.n	8004530 <NMI_Handler+0x4>

08004532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004536:	e7fe      	b.n	8004536 <HardFault_Handler+0x4>

08004538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800453c:	e7fe      	b.n	800453c <MemManage_Handler+0x4>

0800453e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004542:	e7fe      	b.n	8004542 <BusFault_Handler+0x4>

08004544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <UsageFault_Handler+0x4>

0800454a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004578:	f001 fac6 	bl	8005b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}

08004580 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <TIM2_IRQHandler+0x10>)
 8004586:	f004 ff85 	bl	8009494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000c4c 	.word	0x20000c4c

08004594 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <DMA2_Stream0_IRQHandler+0x10>)
 800459a:	f001 ff1b 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000a04 	.word	0x20000a04

080045a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
	return 1;
 80045ac:	2301      	movs	r3, #1
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_kill>:

int _kill(int pid, int sig)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045c2:	f005 fe91 	bl	800a2e8 <__errno>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2216      	movs	r2, #22
 80045ca:	601a      	str	r2, [r3, #0]
	return -1;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <_exit>:

void _exit (int status)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ffe7 	bl	80045b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80045ea:	e7fe      	b.n	80045ea <_exit+0x12>

080045ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	e00a      	b.n	8004614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80045fe:	f3af 8000 	nop.w
 8004602:	4601      	mov	r1, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	60ba      	str	r2, [r7, #8]
 800460a:	b2ca      	uxtb	r2, r1
 800460c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbf0      	blt.n	80045fe <_read+0x12>
	}

return len;
 800461c:	687b      	ldr	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e009      	b.n	800464c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1c5a      	adds	r2, r3, #1
 800463c:	60ba      	str	r2, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3301      	adds	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	dbf1      	blt.n	8004638 <_write+0x12>
	}
	return len;
 8004654:	687b      	ldr	r3, [r7, #4]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <_close>:

int _close(int file)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
	return -1;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004686:	605a      	str	r2, [r3, #4]
	return 0;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <_isatty>:

int _isatty(int file)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
	return 1;
 800469e:	2301      	movs	r3, #1
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
	return 0;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <_sbrk+0x5c>)
 80046d2:	4b15      	ldr	r3, [pc, #84]	; (8004728 <_sbrk+0x60>)
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <_sbrk+0x64>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <_sbrk+0x64>)
 80046e6:	4a12      	ldr	r2, [pc, #72]	; (8004730 <_sbrk+0x68>)
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <_sbrk+0x64>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d207      	bcs.n	8004708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046f8:	f005 fdf6 	bl	800a2e8 <__errno>
 80046fc:	4603      	mov	r3, r0
 80046fe:	220c      	movs	r2, #12
 8004700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e009      	b.n	800471c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004708:	4b08      	ldr	r3, [pc, #32]	; (800472c <_sbrk+0x64>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <_sbrk+0x64>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <_sbrk+0x64>)
 8004718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20020000 	.word	0x20020000
 8004728:	00000400 	.word	0x00000400
 800472c:	200009b0 	.word	0x200009b0
 8004730:	20000ca8 	.word	0x20000ca8

08004734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004738:	4b06      	ldr	r3, [pc, #24]	; (8004754 <SystemInit+0x20>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	4a05      	ldr	r2, [pc, #20]	; (8004754 <SystemInit+0x20>)
 8004740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	609a      	str	r2, [r3, #8]
 800476a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800476c:	463b      	mov	r3, r7
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004774:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <MX_TIM1_Init+0x98>)
 8004776:	4a1f      	ldr	r2, [pc, #124]	; (80047f4 <MX_TIM1_Init+0x9c>)
 8004778:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800477a:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <MX_TIM1_Init+0x98>)
 800477c:	2253      	movs	r2, #83	; 0x53
 800477e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <MX_TIM1_Init+0x98>)
 8004782:	2200      	movs	r2, #0
 8004784:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004786:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <MX_TIM1_Init+0x98>)
 8004788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800478c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <MX_TIM1_Init+0x98>)
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <MX_TIM1_Init+0x98>)
 8004796:	2200      	movs	r2, #0
 8004798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800479a:	4b15      	ldr	r3, [pc, #84]	; (80047f0 <MX_TIM1_Init+0x98>)
 800479c:	2200      	movs	r2, #0
 800479e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047a0:	4813      	ldr	r0, [pc, #76]	; (80047f0 <MX_TIM1_Init+0x98>)
 80047a2:	f004 fc2d 	bl	8009000 <HAL_TIM_Base_Init>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80047ac:	f7fe fe20 	bl	80033f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047b6:	f107 0308 	add.w	r3, r7, #8
 80047ba:	4619      	mov	r1, r3
 80047bc:	480c      	ldr	r0, [pc, #48]	; (80047f0 <MX_TIM1_Init+0x98>)
 80047be:	f005 f833 	bl	8009828 <HAL_TIM_ConfigClockSource>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80047c8:	f7fe fe12 	bl	80033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047cc:	2300      	movs	r3, #0
 80047ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047d4:	463b      	mov	r3, r7
 80047d6:	4619      	mov	r1, r3
 80047d8:	4805      	ldr	r0, [pc, #20]	; (80047f0 <MX_TIM1_Init+0x98>)
 80047da:	f005 fc25 	bl	800a028 <HAL_TIMEx_MasterConfigSynchronization>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80047e4:	f7fe fe04 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80047e8:	bf00      	nop
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000c04 	.word	0x20000c04
 80047f4:	40010000 	.word	0x40010000

080047f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800480c:	463b      	mov	r3, r7
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <MX_TIM2_Init+0x94>)
 8004816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800481a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <MX_TIM2_Init+0x94>)
 800481e:	f240 3247 	movw	r2, #839	; 0x347
 8004822:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004824:	4b19      	ldr	r3, [pc, #100]	; (800488c <MX_TIM2_Init+0x94>)
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800482a:	4b18      	ldr	r3, [pc, #96]	; (800488c <MX_TIM2_Init+0x94>)
 800482c:	2263      	movs	r2, #99	; 0x63
 800482e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004830:	4b16      	ldr	r3, [pc, #88]	; (800488c <MX_TIM2_Init+0x94>)
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004836:	4b15      	ldr	r3, [pc, #84]	; (800488c <MX_TIM2_Init+0x94>)
 8004838:	2200      	movs	r2, #0
 800483a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800483c:	4813      	ldr	r0, [pc, #76]	; (800488c <MX_TIM2_Init+0x94>)
 800483e:	f004 fbdf 	bl	8009000 <HAL_TIM_Base_Init>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004848:	f7fe fdd2 	bl	80033f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800484c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	4619      	mov	r1, r3
 8004858:	480c      	ldr	r0, [pc, #48]	; (800488c <MX_TIM2_Init+0x94>)
 800485a:	f004 ffe5 	bl	8009828 <HAL_TIM_ConfigClockSource>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004864:	f7fe fdc4 	bl	80033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004868:	2300      	movs	r3, #0
 800486a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486c:	2300      	movs	r3, #0
 800486e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004870:	463b      	mov	r3, r7
 8004872:	4619      	mov	r1, r3
 8004874:	4805      	ldr	r0, [pc, #20]	; (800488c <MX_TIM2_Init+0x94>)
 8004876:	f005 fbd7 	bl	800a028 <HAL_TIMEx_MasterConfigSynchronization>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004880:	f7fe fdb6 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004884:	bf00      	nop
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000c4c 	.word	0x20000c4c

08004890 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	605a      	str	r2, [r3, #4]
 800489e:	609a      	str	r2, [r3, #8]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	611a      	str	r2, [r3, #16]
 80048a4:	615a      	str	r2, [r3, #20]
 80048a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80048a8:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <MX_TIM13_Init+0x94>)
 80048aa:	4a1f      	ldr	r2, [pc, #124]	; (8004928 <MX_TIM13_Init+0x98>)
 80048ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <MX_TIM13_Init+0x94>)
 80048b0:	f240 3247 	movw	r2, #839	; 0x347
 80048b4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048b6:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <MX_TIM13_Init+0x94>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <MX_TIM13_Init+0x94>)
 80048be:	2263      	movs	r2, #99	; 0x63
 80048c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048c2:	4b18      	ldr	r3, [pc, #96]	; (8004924 <MX_TIM13_Init+0x94>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048c8:	4b16      	ldr	r3, [pc, #88]	; (8004924 <MX_TIM13_Init+0x94>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80048ce:	4815      	ldr	r0, [pc, #84]	; (8004924 <MX_TIM13_Init+0x94>)
 80048d0:	f004 fb96 	bl	8009000 <HAL_TIM_Base_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80048da:	f7fe fd89 	bl	80033f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80048de:	4811      	ldr	r0, [pc, #68]	; (8004924 <MX_TIM13_Init+0x94>)
 80048e0:	f004 fcb6 	bl	8009250 <HAL_TIM_PWM_Init>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80048ea:	f7fe fd81 	bl	80033f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ee:	2360      	movs	r3, #96	; 0x60
 80048f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	2200      	movs	r2, #0
 8004902:	4619      	mov	r1, r3
 8004904:	4807      	ldr	r0, [pc, #28]	; (8004924 <MX_TIM13_Init+0x94>)
 8004906:	f004 fecd 	bl	80096a4 <HAL_TIM_PWM_ConfigChannel>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8004910:	f7fe fd6e 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004914:	4803      	ldr	r0, [pc, #12]	; (8004924 <MX_TIM13_Init+0x94>)
 8004916:	f000 f85b 	bl	80049d0 <HAL_TIM_MspPostInit>

}
 800491a:	bf00      	nop
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000bbc 	.word	0x20000bbc
 8004928:	40001c00 	.word	0x40001c00

0800492c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a22      	ldr	r2, [pc, #136]	; (80049c4 <HAL_TIM_Base_MspInit+0x98>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d10e      	bne.n	800495c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	6453      	str	r3, [r2, #68]	; 0x44
 800494e:	4b1e      	ldr	r3, [pc, #120]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800495a:	e02e      	b.n	80049ba <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004964:	d116      	bne.n	8004994 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	6413      	str	r3, [r2, #64]	; 0x40
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	201c      	movs	r0, #28
 8004988:	f001 fc3f 	bl	800620a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800498c:	201c      	movs	r0, #28
 800498e:	f001 fc58 	bl	8006242 <HAL_NVIC_EnableIRQ>
}
 8004992:	e012      	b.n	80049ba <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <HAL_TIM_Base_MspInit+0xa0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10d      	bne.n	80049ba <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 80049a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ac:	6413      	str	r3, [r2, #64]	; 0x40
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_TIM_Base_MspInit+0x9c>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40001c00 	.word	0x40001c00

080049d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_TIM_MspPostInit+0x68>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d11e      	bne.n	8004a30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <HAL_TIM_MspPostInit+0x6c>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <HAL_TIM_MspPostInit+0x6c>)
 80049fc:	f043 0320 	orr.w	r3, r3, #32
 8004a00:	6313      	str	r3, [r2, #48]	; 0x30
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_TIM_MspPostInit+0x6c>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	2302      	movs	r3, #2
 8004a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004a20:	2309      	movs	r3, #9
 8004a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a24:	f107 030c 	add.w	r3, r7, #12
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4805      	ldr	r0, [pc, #20]	; (8004a40 <HAL_TIM_MspPostInit+0x70>)
 8004a2c:	f001 ff0e 	bl	800684c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004a30:	bf00      	nop
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40001c00 	.word	0x40001c00
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40021400 	.word	0x40021400

08004a44 <TP_Write_Byte>:
uint8_t CMD_RDX=0XD0;
uint8_t CMD_RDY=0X90;
#endif

static void TP_Write_Byte(uint8_t num)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
	for(count=0;count<8;count++)
 8004a52:	2300      	movs	r3, #0
 8004a54:	73fb      	strb	r3, [r7, #15]
 8004a56:	e025      	b.n	8004aa4 <TP_Write_Byte+0x60>
	{
		if(num&0x80) HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 1);
 8004a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da06      	bge.n	8004a6e <TP_Write_Byte+0x2a>
 8004a60:	2201      	movs	r2, #1
 8004a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a66:	4813      	ldr	r0, [pc, #76]	; (8004ab4 <TP_Write_Byte+0x70>)
 8004a68:	f002 f8a4 	bl	8006bb4 <HAL_GPIO_WritePin>
 8004a6c:	e005      	b.n	8004a7a <TP_Write_Byte+0x36>
		else HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a74:	480f      	ldr	r0, [pc, #60]	; (8004ab4 <TP_Write_Byte+0x70>)
 8004a76:	f002 f89d 	bl	8006bb4 <HAL_GPIO_WritePin>
		num<<=1;
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004a80:	2200      	movs	r2, #0
 8004a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a86:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <TP_Write_Byte+0x74>)
 8004a88:	f002 f894 	bl	8006bb4 <HAL_GPIO_WritePin>
		delay_us(1);
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f7ff fc8d 	bl	80043ac <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004a92:	2201      	movs	r2, #1
 8004a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a98:	4807      	ldr	r0, [pc, #28]	; (8004ab8 <TP_Write_Byte+0x74>)
 8004a9a:	f002 f88b 	bl	8006bb4 <HAL_GPIO_WritePin>
	for(count=0;count<8;count++)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b07      	cmp	r3, #7
 8004aa8:	d9d6      	bls.n	8004a58 <TP_Write_Byte+0x14>
	}
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40020800 	.word	0x40020800
 8004ab8:	40021800 	.word	0x40021800

08004abc <TP_Read_AD>:

static uint16_t TP_Read_AD(uint8_t CMD)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
	uint16_t Num=0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ad4:	482f      	ldr	r0, [pc, #188]	; (8004b94 <TP_Read_AD+0xd8>)
 8004ad6:	f002 f86d 	bl	8006bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ae0:	482d      	ldr	r0, [pc, #180]	; (8004b98 <TP_Read_AD+0xdc>)
 8004ae2:	f002 f867 	bl	8006bb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	482a      	ldr	r0, [pc, #168]	; (8004b94 <TP_Read_AD+0xd8>)
 8004aec:	f002 f862 	bl	8006bb4 <HAL_GPIO_WritePin>
	TP_Write_Byte(CMD);
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff ffa6 	bl	8004a44 <TP_Write_Byte>
	delay_us(6);
 8004af8:	2006      	movs	r0, #6
 8004afa:	f7ff fc57 	bl	80043ac <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b04:	4823      	ldr	r0, [pc, #140]	; (8004b94 <TP_Read_AD+0xd8>)
 8004b06:	f002 f855 	bl	8006bb4 <HAL_GPIO_WritePin>
	delay_us(1);
 8004b0a:	2001      	movs	r0, #1
 8004b0c:	f7ff fc4e 	bl	80043ac <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004b10:	2201      	movs	r2, #1
 8004b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b16:	481f      	ldr	r0, [pc, #124]	; (8004b94 <TP_Read_AD+0xd8>)
 8004b18:	f002 f84c 	bl	8006bb4 <HAL_GPIO_WritePin>
	delay_us(1);
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f7ff fc45 	bl	80043ac <delay_us>
	HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004b22:	2200      	movs	r2, #0
 8004b24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b28:	481a      	ldr	r0, [pc, #104]	; (8004b94 <TP_Read_AD+0xd8>)
 8004b2a:	f002 f843 	bl	8006bb4 <HAL_GPIO_WritePin>
	for(count=0;count<16;count++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	73fb      	strb	r3, [r7, #15]
 8004b32:	e01f      	b.n	8004b74 <TP_Read_AD+0xb8>
	{
		Num<<=1;
 8004b34:	89bb      	ldrh	r3, [r7, #12]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	81bb      	strh	r3, [r7, #12]
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 0);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b40:	4814      	ldr	r0, [pc, #80]	; (8004b94 <TP_Read_AD+0xd8>)
 8004b42:	f002 f837 	bl	8006bb4 <HAL_GPIO_WritePin>
		delay_us(1);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7ff fc30 	bl	80043ac <delay_us>
		HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, 1);
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b52:	4810      	ldr	r0, [pc, #64]	; (8004b94 <TP_Read_AD+0xd8>)
 8004b54:	f002 f82e 	bl	8006bb4 <HAL_GPIO_WritePin>
 		if(HAL_GPIO_ReadPin(T_MISO_GPIO_Port, T_MISO_Pin) != 0)Num++;
 8004b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b5c:	480e      	ldr	r0, [pc, #56]	; (8004b98 <TP_Read_AD+0xdc>)
 8004b5e:	f002 f811 	bl	8006b84 <HAL_GPIO_ReadPin>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <TP_Read_AD+0xb2>
 8004b68:	89bb      	ldrh	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	81bb      	strh	r3, [r7, #12]
	for(count=0;count<16;count++)
 8004b6e:	7bfb      	ldrb	r3, [r7, #15]
 8004b70:	3301      	adds	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b0f      	cmp	r3, #15
 8004b78:	d9dc      	bls.n	8004b34 <TP_Read_AD+0x78>
	}
	Num>>=4;
 8004b7a:	89bb      	ldrh	r3, [r7, #12]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(T_CS_GPIO_Port, T_CS_Pin, 1);
 8004b80:	2201      	movs	r2, #1
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	4803      	ldr	r0, [pc, #12]	; (8004b94 <TP_Read_AD+0xd8>)
 8004b86:	f002 f815 	bl	8006bb4 <HAL_GPIO_WritePin>
	return(Num);
 8004b8a:	89bb      	ldrh	r3, [r7, #12]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40021800 	.word	0x40021800
 8004b98:	40020800 	.word	0x40020800

08004b9c <TP_Read_XOY>:

#define READ_TIMES 5
#define LOST_VAL 1
static uint16_t TP_Read_XOY(uint8_t xy)
{
 8004b9c:	b590      	push	{r4, r7, lr}
 8004b9e:	b089      	sub	sp, #36	; 0x24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
	uint16_t i, j;
	uint16_t buf[READ_TIMES];
	uint16_t sum=0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	837b      	strh	r3, [r7, #26]
	uint16_t temp;
	for(i=0;i<READ_TIMES;i++)buf[i]=TP_Read_AD(xy);
 8004baa:	2300      	movs	r3, #0
 8004bac:	83fb      	strh	r3, [r7, #30]
 8004bae:	e00f      	b.n	8004bd0 <TP_Read_XOY+0x34>
 8004bb0:	8bfc      	ldrh	r4, [r7, #30]
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff ff81 	bl	8004abc <TP_Read_AD>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	0063      	lsls	r3, r4, #1
 8004bc0:	f107 0120 	add.w	r1, r7, #32
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f823 2c14 	strh.w	r2, [r3, #-20]
 8004bca:	8bfb      	ldrh	r3, [r7, #30]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	83fb      	strh	r3, [r7, #30]
 8004bd0:	8bfb      	ldrh	r3, [r7, #30]
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d9ec      	bls.n	8004bb0 <TP_Read_XOY+0x14>
	for(i=0;i<READ_TIMES-1; i++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	83fb      	strh	r3, [r7, #30]
 8004bda:	e03b      	b.n	8004c54 <TP_Read_XOY+0xb8>
	{
		for(j=i+1;j<READ_TIMES;j++)
 8004bdc:	8bfb      	ldrh	r3, [r7, #30]
 8004bde:	3301      	adds	r3, #1
 8004be0:	83bb      	strh	r3, [r7, #28]
 8004be2:	e031      	b.n	8004c48 <TP_Read_XOY+0xac>
		{
			if(buf[i]>buf[j])
 8004be4:	8bfb      	ldrh	r3, [r7, #30]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	f107 0220 	add.w	r2, r7, #32
 8004bec:	4413      	add	r3, r2
 8004bee:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004bf2:	8bbb      	ldrh	r3, [r7, #28]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	f107 0120 	add.w	r1, r7, #32
 8004bfa:	440b      	add	r3, r1
 8004bfc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d91e      	bls.n	8004c42 <TP_Read_XOY+0xa6>
			{
				temp=buf[i];
 8004c04:	8bfb      	ldrh	r3, [r7, #30]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	f107 0220 	add.w	r2, r7, #32
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004c12:	833b      	strh	r3, [r7, #24]
				buf[i]=buf[j];
 8004c14:	8bbb      	ldrh	r3, [r7, #28]
 8004c16:	8bfa      	ldrh	r2, [r7, #30]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	f107 0120 	add.w	r1, r7, #32
 8004c1e:	440b      	add	r3, r1
 8004c20:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8004c24:	0053      	lsls	r3, r2, #1
 8004c26:	f107 0220 	add.w	r2, r7, #32
 8004c2a:	4413      	add	r3, r2
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j]=temp;
 8004c32:	8bbb      	ldrh	r3, [r7, #28]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	f107 0220 	add.w	r2, r7, #32
 8004c3a:	4413      	add	r3, r2
 8004c3c:	8b3a      	ldrh	r2, [r7, #24]
 8004c3e:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(j=i+1;j<READ_TIMES;j++)
 8004c42:	8bbb      	ldrh	r3, [r7, #28]
 8004c44:	3301      	adds	r3, #1
 8004c46:	83bb      	strh	r3, [r7, #28]
 8004c48:	8bbb      	ldrh	r3, [r7, #28]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d9ca      	bls.n	8004be4 <TP_Read_XOY+0x48>
	for(i=0;i<READ_TIMES-1; i++)
 8004c4e:	8bfb      	ldrh	r3, [r7, #30]
 8004c50:	3301      	adds	r3, #1
 8004c52:	83fb      	strh	r3, [r7, #30]
 8004c54:	8bfb      	ldrh	r3, [r7, #30]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d9c0      	bls.n	8004bdc <TP_Read_XOY+0x40>
			}
		}
	}
	sum=0;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	837b      	strh	r3, [r7, #26]
	for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
 8004c5e:	2301      	movs	r3, #1
 8004c60:	83fb      	strh	r3, [r7, #30]
 8004c62:	e00c      	b.n	8004c7e <TP_Read_XOY+0xe2>
 8004c64:	8bfb      	ldrh	r3, [r7, #30]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	f107 0220 	add.w	r2, r7, #32
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004c72:	8b7b      	ldrh	r3, [r7, #26]
 8004c74:	4413      	add	r3, r2
 8004c76:	837b      	strh	r3, [r7, #26]
 8004c78:	8bfb      	ldrh	r3, [r7, #30]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	83fb      	strh	r3, [r7, #30]
 8004c7e:	8bfb      	ldrh	r3, [r7, #30]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d9ef      	bls.n	8004c64 <TP_Read_XOY+0xc8>
	temp=sum/(READ_TIMES-2*LOST_VAL);
 8004c84:	8b7b      	ldrh	r3, [r7, #26]
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <TP_Read_XOY+0x100>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	085b      	lsrs	r3, r3, #1
 8004c8e:	833b      	strh	r3, [r7, #24]
	return temp;
 8004c90:	8b3b      	ldrh	r3, [r7, #24]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3724      	adds	r7, #36	; 0x24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	aaaaaaab 	.word	0xaaaaaaab

08004ca0 <TP_Read_XY>:

static uint8_t TP_Read_XY(uint16_t *x,uint16_t *y)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	uint16_t xtemp,ytemp;
	xtemp=TP_Read_XOY(CMD_RDX);
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <TP_Read_XY+0x3c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ff74 	bl	8004b9c <TP_Read_XOY>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	81fb      	strh	r3, [r7, #14]
	ytemp=TP_Read_XOY(CMD_RDY);
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <TP_Read_XY+0x40>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff ff6d 	bl	8004b9c <TP_Read_XOY>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	81bb      	strh	r3, [r7, #12]
	*x=xtemp;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	89fa      	ldrh	r2, [r7, #14]
 8004cca:	801a      	strh	r2, [r3, #0]
	*y=ytemp;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	89ba      	ldrh	r2, [r7, #12]
 8004cd0:	801a      	strh	r2, [r3, #0]
	return 1;
 8004cd2:	2301      	movs	r3, #1
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20000070 	.word	0x20000070
 8004ce0:	20000071 	.word	0x20000071

08004ce4 <TP_Read_XY2>:

#define ERR_RANGE 100
static uint8_t TP_Read_XY2(uint16_t *x,uint16_t *y)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
	uint16_t x1,y1;
 	uint16_t x2,y2;
 	uint8_t flag;
	flag=TP_Read_XY(&x1,&y1);
 8004cee:	f107 0212 	add.w	r2, r7, #18
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ffd1 	bl	8004ca0 <TP_Read_XY>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <TP_Read_XY2+0x28>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e049      	b.n	8004da0 <TP_Read_XY2+0xbc>
	flag=TP_Read_XY(&x2,&y2);
 8004d0c:	f107 020e 	add.w	r2, r7, #14
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ffc2 	bl	8004ca0 <TP_Read_XY>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]
	if(flag==0)return(0);
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <TP_Read_XY2+0x46>
 8004d26:	2300      	movs	r3, #0
 8004d28:	e03a      	b.n	8004da0 <TP_Read_XY2+0xbc>
	if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-50内
 8004d2a:	8a3a      	ldrh	r2, [r7, #16]
 8004d2c:	8abb      	ldrh	r3, [r7, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d804      	bhi.n	8004d3c <TP_Read_XY2+0x58>
 8004d32:	8a3b      	ldrh	r3, [r7, #16]
 8004d34:	3363      	adds	r3, #99	; 0x63
 8004d36:	8aba      	ldrh	r2, [r7, #20]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	da08      	bge.n	8004d4e <TP_Read_XY2+0x6a>
 8004d3c:	8aba      	ldrh	r2, [r7, #20]
 8004d3e:	8a3b      	ldrh	r3, [r7, #16]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d82c      	bhi.n	8004d9e <TP_Read_XY2+0xba>
 8004d44:	8abb      	ldrh	r3, [r7, #20]
 8004d46:	3363      	adds	r3, #99	; 0x63
 8004d48:	8a3a      	ldrh	r2, [r7, #16]
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	db27      	blt.n	8004d9e <TP_Read_XY2+0xba>
	&&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
 8004d4e:	89fa      	ldrh	r2, [r7, #14]
 8004d50:	8a7b      	ldrh	r3, [r7, #18]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d804      	bhi.n	8004d60 <TP_Read_XY2+0x7c>
 8004d56:	89fb      	ldrh	r3, [r7, #14]
 8004d58:	3363      	adds	r3, #99	; 0x63
 8004d5a:	8a7a      	ldrh	r2, [r7, #18]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	da08      	bge.n	8004d72 <TP_Read_XY2+0x8e>
 8004d60:	8a7a      	ldrh	r2, [r7, #18]
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d81a      	bhi.n	8004d9e <TP_Read_XY2+0xba>
 8004d68:	8a7b      	ldrh	r3, [r7, #18]
 8004d6a:	3363      	adds	r3, #99	; 0x63
 8004d6c:	89fa      	ldrh	r2, [r7, #14]
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	db15      	blt.n	8004d9e <TP_Read_XY2+0xba>
	{
		*x=(x1+x2)/2;
 8004d72:	8abb      	ldrh	r3, [r7, #20]
 8004d74:	461a      	mov	r2, r3
 8004d76:	8a3b      	ldrh	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	0fda      	lsrs	r2, r3, #31
 8004d7c:	4413      	add	r3, r2
 8004d7e:	105b      	asrs	r3, r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	801a      	strh	r2, [r3, #0]
		*y=(y1+y2)/2;
 8004d86:	8a7b      	ldrh	r3, [r7, #18]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	89fb      	ldrh	r3, [r7, #14]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	0fda      	lsrs	r2, r3, #31
 8004d90:	4413      	add	r3, r2
 8004d92:	105b      	asrs	r3, r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	801a      	strh	r2, [r3, #0]
		return 1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <TP_Read_XY2+0xbc>
	}else return 0;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <TP_Drow_Touch_Point>:

static void TP_Drow_Touch_Point(uint16_t x,uint16_t y,uint16_t color)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	4603      	mov	r3, r0
 8004db0:	80fb      	strh	r3, [r7, #6]
 8004db2:	460b      	mov	r3, r1
 8004db4:	80bb      	strh	r3, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	807b      	strh	r3, [r7, #2]
	lcd_DrawLine(x-12,y,x+13,y,color);
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	3b0c      	subs	r3, #12
 8004dbe:	b298      	uxth	r0, r3
 8004dc0:	88fb      	ldrh	r3, [r7, #6]
 8004dc2:	330d      	adds	r3, #13
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	88bc      	ldrh	r4, [r7, #4]
 8004dc8:	88b9      	ldrh	r1, [r7, #4]
 8004dca:	887b      	ldrh	r3, [r7, #2]
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	4623      	mov	r3, r4
 8004dd0:	f7fd fc57 	bl	8002682 <lcd_DrawLine>
	lcd_DrawLine(x,y-12,x,y+13,color);
 8004dd4:	88bb      	ldrh	r3, [r7, #4]
 8004dd6:	3b0c      	subs	r3, #12
 8004dd8:	b299      	uxth	r1, r3
 8004dda:	88bb      	ldrh	r3, [r7, #4]
 8004ddc:	330d      	adds	r3, #13
 8004dde:	b29c      	uxth	r4, r3
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	88f8      	ldrh	r0, [r7, #6]
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	4623      	mov	r3, r4
 8004dea:	f7fd fc4a 	bl	8002682 <lcd_DrawLine>
	lcd_DrawPoint(x+1,y+1,color);
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	3301      	adds	r3, #1
 8004df2:	b298      	uxth	r0, r3
 8004df4:	88bb      	ldrh	r3, [r7, #4]
 8004df6:	3301      	adds	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	887a      	ldrh	r2, [r7, #2]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	f7fd fc29 	bl	8002654 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y+1,color);
 8004e02:	88fb      	ldrh	r3, [r7, #6]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b298      	uxth	r0, r3
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	887a      	ldrh	r2, [r7, #2]
 8004e10:	4619      	mov	r1, r3
 8004e12:	f7fd fc1f 	bl	8002654 <lcd_DrawPoint>
	lcd_DrawPoint(x+1,y-1,color);
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	b298      	uxth	r0, r3
 8004e1c:	88bb      	ldrh	r3, [r7, #4]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	4619      	mov	r1, r3
 8004e26:	f7fd fc15 	bl	8002654 <lcd_DrawPoint>
	lcd_DrawPoint(x-1,y-1,color);
 8004e2a:	88fb      	ldrh	r3, [r7, #6]
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b298      	uxth	r0, r3
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	f7fd fc0b 	bl	8002654 <lcd_DrawPoint>
	lcd_DrawCircle(x,y,color,6, 0);
 8004e3e:	88f8      	ldrh	r0, [r7, #6]
 8004e40:	88b9      	ldrh	r1, [r7, #4]
 8004e42:	887a      	ldrh	r2, [r7, #2]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2306      	movs	r3, #6
 8004e4a:	f7fe f818 	bl	8002e7e <lcd_DrawCircle>
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd90      	pop	{r4, r7, pc}
	...

08004e58 <TP_Scan>:
		}
	}
}

static uint8_t TP_Scan(uint8_t tp)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4603      	mov	r3, r0
 8004e60:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == GPIO_PIN_RESET)
 8004e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e66:	4843      	ldr	r0, [pc, #268]	; (8004f74 <TP_Scan+0x11c>)
 8004e68:	f001 fe8c 	bl	8006b84 <HAL_GPIO_ReadPin>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d157      	bne.n	8004f22 <TP_Scan+0xca>
	{
		if(tp)TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]);
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <TP_Scan+0x2a>
 8004e78:	493f      	ldr	r1, [pc, #252]	; (8004f78 <TP_Scan+0x120>)
 8004e7a:	4840      	ldr	r0, [pc, #256]	; (8004f7c <TP_Scan+0x124>)
 8004e7c:	f7ff ff32 	bl	8004ce4 <TP_Read_XY2>
 8004e80:	e03c      	b.n	8004efc <TP_Scan+0xa4>
		else if(TP_Read_XY2(&tp_dev.x[0],&tp_dev.y[0]))
 8004e82:	493d      	ldr	r1, [pc, #244]	; (8004f78 <TP_Scan+0x120>)
 8004e84:	483d      	ldr	r0, [pc, #244]	; (8004f7c <TP_Scan+0x124>)
 8004e86:	f7ff ff2d 	bl	8004ce4 <TP_Read_XY2>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d035      	beq.n	8004efc <TP_Scan+0xa4>
		{
	 		tp_dev.x[0]=tp_dev.xfac*tp_dev.x[0]+tp_dev.xoff;
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <TP_Scan+0x128>)
 8004e92:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004e96:	4b3a      	ldr	r3, [pc, #232]	; (8004f80 <TP_Scan+0x128>)
 8004e98:	899b      	ldrh	r3, [r3, #12]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <TP_Scan+0x128>)
 8004ea8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ebc:	ee17 3a90 	vmov	r3, s15
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	4b2f      	ldr	r3, [pc, #188]	; (8004f80 <TP_Scan+0x128>)
 8004ec4:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=tp_dev.yfac*tp_dev.y[0]+tp_dev.yoff;
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <TP_Scan+0x128>)
 8004ec8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004ecc:	4b2c      	ldr	r3, [pc, #176]	; (8004f80 <TP_Scan+0x128>)
 8004ece:	8adb      	ldrh	r3, [r3, #22]
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <TP_Scan+0x128>)
 8004ede:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ef2:	ee17 3a90 	vmov	r3, s15
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	4b21      	ldr	r3, [pc, #132]	; (8004f80 <TP_Scan+0x128>)
 8004efa:	82da      	strh	r2, [r3, #22]
	 	}
		if((tp_dev.sta&TP_PRES_DOWN)==0)
 8004efc:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <TP_Scan+0x128>)
 8004efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f02:	b25b      	sxtb	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	db2a      	blt.n	8004f5e <TP_Scan+0x106>
		{
			tp_dev.sta=TP_PRES_DOWN|TP_CATH_PRES;
 8004f08:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <TP_Scan+0x128>)
 8004f0a:	22c0      	movs	r2, #192	; 0xc0
 8004f0c:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4]=tp_dev.x[0];
 8004f10:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <TP_Scan+0x128>)
 8004f12:	899a      	ldrh	r2, [r3, #12]
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <TP_Scan+0x128>)
 8004f16:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=tp_dev.y[0];
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <TP_Scan+0x128>)
 8004f1a:	8ada      	ldrh	r2, [r3, #22]
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <TP_Scan+0x128>)
 8004f1e:	83da      	strh	r2, [r3, #30]
 8004f20:	e01d      	b.n	8004f5e <TP_Scan+0x106>
		}
	}else
	{
		if(tp_dev.sta&TP_PRES_DOWN)
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <TP_Scan+0x128>)
 8004f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da09      	bge.n	8004f42 <TP_Scan+0xea>
		{
			tp_dev.sta&=~(1<<7);
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <TP_Scan+0x128>)
 8004f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <TP_Scan+0x128>)
 8004f3c:	f883 2020 	strb.w	r2, [r3, #32]
 8004f40:	e00d      	b.n	8004f5e <TP_Scan+0x106>
		}else
		{
			tp_dev.x[4]=0;
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <TP_Scan+0x128>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4]=0;
 8004f48:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <TP_Scan+0x128>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0]=0xffff;
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <TP_Scan+0x128>)
 8004f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f54:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0]=0xffff;
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <TP_Scan+0x128>)
 8004f58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f5c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta&TP_PRES_DOWN;
 8004f5e:	4b08      	ldr	r3, [pc, #32]	; (8004f80 <TP_Scan+0x128>)
 8004f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f68:	b2db      	uxtb	r3, r3
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40020800 	.word	0x40020800
 8004f78:	20000052 	.word	0x20000052
 8004f7c:	20000048 	.word	0x20000048
 8004f80:	2000003c 	.word	0x2000003c

08004f84 <TP_Save_Adjdata>:


#define SAVE_ADDR_BASE 0

static void TP_Save_Adjdata(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
	at24c_Write(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004f88:	220e      	movs	r2, #14
 8004f8a:	4905      	ldr	r1, [pc, #20]	; (8004fa0 <TP_Save_Adjdata+0x1c>)
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	f7fc f917 	bl	80011c0 <at24c_Write>
	at24c_WriteOneByte(SAVE_ADDR_BASE+14,DFT_SCAN_DIR);
 8004f92:	2100      	movs	r1, #0
 8004f94:	200e      	movs	r0, #14
 8004f96:	f7fc f8b3 	bl	8001100 <at24c_WriteOneByte>
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000060 	.word	0x20000060

08004fa4 <TP_Get_Adjdata>:

static uint8_t TP_Get_Adjdata(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	71fb      	strb	r3, [r7, #7]
	temp=at24c_ReadOneByte(SAVE_ADDR_BASE+14);
 8004fae:	200e      	movs	r0, #14
 8004fb0:	f7fc f88a 	bl	80010c8 <at24c_ReadOneByte>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	71fb      	strb	r3, [r7, #7]

	if(temp==DFT_SCAN_DIR)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <TP_Get_Adjdata+0x28>
 	{
		at24c_Read(SAVE_ADDR_BASE,(uint8_t*)&tp_dev.xfac,14);
 8004fbe:	220e      	movs	r2, #14
 8004fc0:	4905      	ldr	r1, [pc, #20]	; (8004fd8 <TP_Get_Adjdata+0x34>)
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fc f8dd 	bl	8001182 <at24c_Read>
		return 1;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <TP_Get_Adjdata+0x2a>
	}
	return 0;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000060 	.word	0x20000060
 8004fdc:	00000000 	.word	0x00000000

08004fe0 <touch_Adjust>:


void touch_Adjust(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08e      	sub	sp, #56	; 0x38
 8004fe4:	af04      	add	r7, sp, #16
	uint16_t pos_temp[4][2];
	uint8_t  cnt=0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t d1,d2;
	uint32_t tem1,tem2;
	double fac;
 	cnt=0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 	lcd_Fill(0,0,lcddev.width,lcddev.height,WHITE);
 8004ff2:	4b61      	ldr	r3, [pc, #388]	; (8005178 <touch_Adjust+0x198>)
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	4b60      	ldr	r3, [pc, #384]	; (8005178 <touch_Adjust+0x198>)
 8004ff8:	885b      	ldrh	r3, [r3, #2]
 8004ffa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ffe:	9100      	str	r1, [sp, #0]
 8005000:	2100      	movs	r1, #0
 8005002:	2000      	movs	r0, #0
 8005004:	f7fd faf0 	bl	80025e8 <lcd_Fill>
 	lcd_ShowStr(5,40,"Please adjust the screen",RED,WHITE,16,0);
 8005008:	2300      	movs	r3, #0
 800500a:	9302      	str	r3, [sp, #8]
 800500c:	2310      	movs	r3, #16
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800501a:	4a58      	ldr	r2, [pc, #352]	; (800517c <touch_Adjust+0x19c>)
 800501c:	2128      	movs	r1, #40	; 0x28
 800501e:	2005      	movs	r0, #5
 8005020:	f7fd ff9a 	bl	8002f58 <lcd_ShowStr>
 	lcd_ShowStr(5,65,"by touching the marked",RED,WHITE,16,0);
 8005024:	2300      	movs	r3, #0
 8005026:	9302      	str	r3, [sp, #8]
 8005028:	2310      	movs	r3, #16
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005036:	4a52      	ldr	r2, [pc, #328]	; (8005180 <touch_Adjust+0x1a0>)
 8005038:	2141      	movs	r1, #65	; 0x41
 800503a:	2005      	movs	r0, #5
 800503c:	f7fd ff8c 	bl	8002f58 <lcd_ShowStr>
 	lcd_ShowStr(5,90,"points one by one",RED,WHITE,16,0);
 8005040:	2300      	movs	r3, #0
 8005042:	9302      	str	r3, [sp, #8]
 8005044:	2310      	movs	r3, #16
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005052:	4a4c      	ldr	r2, [pc, #304]	; (8005184 <touch_Adjust+0x1a4>)
 8005054:	215a      	movs	r1, #90	; 0x5a
 8005056:	2005      	movs	r0, #5
 8005058:	f7fd ff7e 	bl	8002f58 <lcd_ShowStr>
	TP_Drow_Touch_Point(20,20,RED);
 800505c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005060:	2114      	movs	r1, #20
 8005062:	2014      	movs	r0, #20
 8005064:	f7ff fea0 	bl	8004da8 <TP_Drow_Touch_Point>
	tp_dev.sta=0;
 8005068:	4b47      	ldr	r3, [pc, #284]	; (8005188 <touch_Adjust+0x1a8>)
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac=0;
 8005070:	4b45      	ldr	r3, [pc, #276]	; (8005188 <touch_Adjust+0x1a8>)
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
	while(1)
	{
		HAL_Delay(50);
 8005078:	2032      	movs	r0, #50	; 0x32
 800507a:	f000 fd65 	bl	8005b48 <HAL_Delay>
		tp_dev.scan(1);
 800507e:	4b42      	ldr	r3, [pc, #264]	; (8005188 <touch_Adjust+0x1a8>)
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2001      	movs	r0, #1
 8005084:	4798      	blx	r3
		if((tp_dev.sta&0xc0)==TP_CATH_PRES)
 8005086:	4b40      	ldr	r3, [pc, #256]	; (8005188 <touch_Adjust+0x1a8>)
 8005088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	f040 835e 	bne.w	8005752 <touch_Adjust+0x772>
		{
			tp_dev.sta&=~(1<<6);
 8005096:	4b3c      	ldr	r3, [pc, #240]	; (8005188 <touch_Adjust+0x1a8>)
 8005098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800509c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b39      	ldr	r3, [pc, #228]	; (8005188 <touch_Adjust+0x1a8>)
 80050a4:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0]=tp_dev.x[0];
 80050a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050ac:	4a36      	ldr	r2, [pc, #216]	; (8005188 <touch_Adjust+0x1a8>)
 80050ae:	8992      	ldrh	r2, [r2, #12]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80050b6:	440b      	add	r3, r1
 80050b8:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1]=tp_dev.y[0];
 80050bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c0:	4a31      	ldr	r2, [pc, #196]	; (8005188 <touch_Adjust+0x1a8>)
 80050c2:	8ad2      	ldrh	r2, [r2, #22]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80050ca:	440b      	add	r3, r1
 80050cc:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 80050d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050d4:	3301      	adds	r3, #1
 80050d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			switch(cnt)
 80050da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050de:	3b01      	subs	r3, #1
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d8c9      	bhi.n	8005078 <touch_Adjust+0x98>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <touch_Adjust+0x10c>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	080050fd 	.word	0x080050fd
 80050f0:	0800511f 	.word	0x0800511f
 80050f4:	08005149 	.word	0x08005149
 80050f8:	0800518d 	.word	0x0800518d
			{
				case 1:
					TP_Drow_Touch_Point(20,20,WHITE);
 80050fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005100:	2114      	movs	r1, #20
 8005102:	2014      	movs	r0, #20
 8005104:	f7ff fe50 	bl	8004da8 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(lcddev.width-20,20,RED);
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <touch_Adjust+0x198>)
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	3b14      	subs	r3, #20
 800510e:	b29b      	uxth	r3, r3
 8005110:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005114:	2114      	movs	r1, #20
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fe46 	bl	8004da8 <TP_Drow_Touch_Point>
					break;
 800511c:	e31a      	b.n	8005754 <touch_Adjust+0x774>
				case 2:
 					TP_Drow_Touch_Point(lcddev.width-20,20,WHITE);
 800511e:	4b16      	ldr	r3, [pc, #88]	; (8005178 <touch_Adjust+0x198>)
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	3b14      	subs	r3, #20
 8005124:	b29b      	uxth	r3, r3
 8005126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800512a:	2114      	movs	r1, #20
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fe3b 	bl	8004da8 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20,lcddev.height-20,RED);
 8005132:	4b11      	ldr	r3, [pc, #68]	; (8005178 <touch_Adjust+0x198>)
 8005134:	885b      	ldrh	r3, [r3, #2]
 8005136:	3b14      	subs	r3, #20
 8005138:	b29b      	uxth	r3, r3
 800513a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800513e:	4619      	mov	r1, r3
 8005140:	2014      	movs	r0, #20
 8005142:	f7ff fe31 	bl	8004da8 <TP_Drow_Touch_Point>
					break;
 8005146:	e305      	b.n	8005754 <touch_Adjust+0x774>
				case 3:
 					TP_Drow_Touch_Point(20,lcddev.height-20,WHITE);
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <touch_Adjust+0x198>)
 800514a:	885b      	ldrh	r3, [r3, #2]
 800514c:	3b14      	subs	r3, #20
 800514e:	b29b      	uxth	r3, r3
 8005150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005154:	4619      	mov	r1, r3
 8005156:	2014      	movs	r0, #20
 8005158:	f7ff fe26 	bl	8004da8 <TP_Drow_Touch_Point>
 					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,RED);
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <touch_Adjust+0x198>)
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	3b14      	subs	r3, #20
 8005162:	b298      	uxth	r0, r3
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <touch_Adjust+0x198>)
 8005166:	885b      	ldrh	r3, [r3, #2]
 8005168:	3b14      	subs	r3, #20
 800516a:	b29b      	uxth	r3, r3
 800516c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005170:	4619      	mov	r1, r3
 8005172:	f7ff fe19 	bl	8004da8 <TP_Drow_Touch_Point>
					break;
 8005176:	e2ed      	b.n	8005754 <touch_Adjust+0x774>
 8005178:	20000b28 	.word	0x20000b28
 800517c:	0800ba38 	.word	0x0800ba38
 8005180:	0800ba54 	.word	0x0800ba54
 8005184:	0800ba6c 	.word	0x0800ba6c
 8005188:	2000003c 	.word	0x2000003c
				case 4:
					tem1=abs(pos_temp[0][0]-pos_temp[1][0]);
 800518c:	883b      	ldrh	r3, [r7, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	88bb      	ldrh	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	bfb8      	it	lt
 8005198:	425b      	neglt	r3, r3
 800519a:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[1][1]);
 800519c:	887b      	ldrh	r3, [r7, #2]
 800519e:	461a      	mov	r2, r3
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bfb8      	it	lt
 80051a8:	425b      	neglt	r3, r3
 80051aa:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	fb03 f303 	mul.w	r3, r3, r3
 80051b2:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	fb03 f303 	mul.w	r3, r3, r3
 80051ba:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80051bc:	6a3a      	ldr	r2, [r7, #32]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fb f996 	bl	80004f4 <__aeabi_ui2d>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	ec43 2b10 	vmov	d0, r2, r3
 80051d0:	f006 fa90 	bl	800b6f4 <sqrt>
 80051d4:	ec53 2b10 	vmov	r2, r3, d0
 80051d8:	4610      	mov	r0, r2
 80051da:	4619      	mov	r1, r3
 80051dc:	f7fb fcb4 	bl	8000b48 <__aeabi_d2uiz>
 80051e0:	4603      	mov	r3, r0
 80051e2:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[2][0]-pos_temp[3][0]);
 80051e4:	893b      	ldrh	r3, [r7, #8]
 80051e6:	461a      	mov	r2, r3
 80051e8:	89bb      	ldrh	r3, [r7, #12]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bfb8      	it	lt
 80051f0:	425b      	neglt	r3, r3
 80051f2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[2][1]-pos_temp[3][1]);
 80051f4:	897b      	ldrh	r3, [r7, #10]
 80051f6:	461a      	mov	r2, r3
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bfb8      	it	lt
 8005200:	425b      	neglt	r3, r3
 8005202:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	fb03 f303 	mul.w	r3, r3, r3
 800520a:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	fb03 f303 	mul.w	r3, r3, r3
 8005212:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 8005214:	6a3a      	ldr	r2, [r7, #32]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	4618      	mov	r0, r3
 800521c:	f7fb f96a 	bl	80004f4 <__aeabi_ui2d>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	ec43 2b10 	vmov	d0, r2, r3
 8005228:	f006 fa64 	bl	800b6f4 <sqrt>
 800522c:	ec53 2b10 	vmov	r2, r3, d0
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	f7fb fc88 	bl	8000b48 <__aeabi_d2uiz>
 8005238:	4603      	mov	r3, r0
 800523a:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 800523c:	8b7b      	ldrh	r3, [r7, #26]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005246:	8b3b      	ldrh	r3, [r7, #24]
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005250:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005254:	ee16 0a90 	vmov	r0, s13
 8005258:	f7fb f96e 	bl	8000538 <__aeabi_f2d>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05||d1==0||d2==0)
 8005264:	a384      	add	r3, pc, #528	; (adr r3, 8005478 <touch_Adjust+0x498>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800526e:	f7fb fc2d 	bl	8000acc <__aeabi_dcmplt>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10f      	bne.n	8005298 <touch_Adjust+0x2b8>
 8005278:	a381      	add	r3, pc, #516	; (adr r3, 8005480 <touch_Adjust+0x4a0>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005282:	f7fb fc41 	bl	8000b08 <__aeabi_dcmpgt>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <touch_Adjust+0x2b8>
 800528c:	8b7b      	ldrh	r3, [r7, #26]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d002      	beq.n	8005298 <touch_Adjust+0x2b8>
 8005292:	8b3b      	ldrh	r3, [r7, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d136      	bne.n	8005306 <touch_Adjust+0x326>
					{
						cnt=0;
 8005298:	2300      	movs	r3, #0
 800529a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <touch_Adjust+0x4a8>)
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	3b14      	subs	r3, #20
 80052a4:	b298      	uxth	r0, r3
 80052a6:	4b78      	ldr	r3, [pc, #480]	; (8005488 <touch_Adjust+0x4a8>)
 80052a8:	885b      	ldrh	r3, [r3, #2]
 80052aa:	3b14      	subs	r3, #20
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052b2:	4619      	mov	r1, r3
 80052b4:	f7ff fd78 	bl	8004da8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80052b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80052bc:	2114      	movs	r1, #20
 80052be:	2014      	movs	r0, #20
 80052c0:	f7ff fd72 	bl	8004da8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80052c4:	2300      	movs	r3, #0
 80052c6:	9302      	str	r3, [sp, #8]
 80052c8:	2310      	movs	r3, #16
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052d6:	4a6d      	ldr	r2, [pc, #436]	; (800548c <touch_Adjust+0x4ac>)
 80052d8:	2128      	movs	r1, #40	; 0x28
 80052da:	2005      	movs	r0, #5
 80052dc:	f7fd fe3c 	bl	8002f58 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80052e0:	2300      	movs	r3, #0
 80052e2:	9302      	str	r3, [sp, #8]
 80052e4:	2310      	movs	r3, #16
 80052e6:	9301      	str	r3, [sp, #4]
 80052e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80052f2:	4a67      	ldr	r2, [pc, #412]	; (8005490 <touch_Adjust+0x4b0>)
 80052f4:	213c      	movs	r1, #60	; 0x3c
 80052f6:	2005      	movs	r0, #5
 80052f8:	f7fd fe2e 	bl	8002f58 <lcd_ShowStr>
						HAL_Delay(1000);
 80052fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005300:	f000 fc22 	bl	8005b48 <HAL_Delay>
 						continue;
 8005304:	e226      	b.n	8005754 <touch_Adjust+0x774>
					}
					tem1=abs(pos_temp[0][0]-pos_temp[2][0]);
 8005306:	883b      	ldrh	r3, [r7, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	893b      	ldrh	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	bfb8      	it	lt
 8005312:	425b      	neglt	r3, r3
 8005314:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[2][1]);
 8005316:	887b      	ldrh	r3, [r7, #2]
 8005318:	461a      	mov	r2, r3
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	bfb8      	it	lt
 8005322:	425b      	neglt	r3, r3
 8005324:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	fb03 f303 	mul.w	r3, r3, r3
 800532c:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	fb03 f303 	mul.w	r3, r3, r3
 8005334:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 8005336:	6a3a      	ldr	r2, [r7, #32]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	4413      	add	r3, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f7fb f8d9 	bl	80004f4 <__aeabi_ui2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	ec43 2b10 	vmov	d0, r2, r3
 800534a:	f006 f9d3 	bl	800b6f4 <sqrt>
 800534e:	ec53 2b10 	vmov	r2, r3, d0
 8005352:	4610      	mov	r0, r2
 8005354:	4619      	mov	r1, r3
 8005356:	f7fb fbf7 	bl	8000b48 <__aeabi_d2uiz>
 800535a:	4603      	mov	r3, r0
 800535c:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[1][0]-pos_temp[3][0]);
 800535e:	88bb      	ldrh	r3, [r7, #4]
 8005360:	461a      	mov	r2, r3
 8005362:	89bb      	ldrh	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	bfb8      	it	lt
 800536a:	425b      	neglt	r3, r3
 800536c:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[3][1]);
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	461a      	mov	r2, r3
 8005372:	89fb      	ldrh	r3, [r7, #14]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	bfb8      	it	lt
 800537a:	425b      	neglt	r3, r3
 800537c:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	fb03 f303 	mul.w	r3, r3, r3
 8005384:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	fb03 f303 	mul.w	r3, r3, r3
 800538c:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800538e:	6a3a      	ldr	r2, [r7, #32]
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	4618      	mov	r0, r3
 8005396:	f7fb f8ad 	bl	80004f4 <__aeabi_ui2d>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	ec43 2b10 	vmov	d0, r2, r3
 80053a2:	f006 f9a7 	bl	800b6f4 <sqrt>
 80053a6:	ec53 2b10 	vmov	r2, r3, d0
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	f7fb fbcb 	bl	8000b48 <__aeabi_d2uiz>
 80053b2:	4603      	mov	r3, r0
 80053b4:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 80053b6:	8b7b      	ldrh	r3, [r7, #26]
 80053b8:	ee07 3a90 	vmov	s15, r3
 80053bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053c0:	8b3b      	ldrh	r3, [r7, #24]
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80053ce:	ee16 0a90 	vmov	r0, s13
 80053d2:	f7fb f8b1 	bl	8000538 <__aeabi_f2d>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 80053de:	a326      	add	r3, pc, #152	; (adr r3, 8005478 <touch_Adjust+0x498>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053e8:	f7fb fb70 	bl	8000acc <__aeabi_dcmplt>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <touch_Adjust+0x426>
 80053f2:	a323      	add	r3, pc, #140	; (adr r3, 8005480 <touch_Adjust+0x4a0>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053fc:	f7fb fb84 	bl	8000b08 <__aeabi_dcmpgt>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d046      	beq.n	8005494 <touch_Adjust+0x4b4>
					{
						cnt=0;
 8005406:	2300      	movs	r3, #0
 8005408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800540c:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <touch_Adjust+0x4a8>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	3b14      	subs	r3, #20
 8005412:	b298      	uxth	r0, r3
 8005414:	4b1c      	ldr	r3, [pc, #112]	; (8005488 <touch_Adjust+0x4a8>)
 8005416:	885b      	ldrh	r3, [r3, #2]
 8005418:	3b14      	subs	r3, #20
 800541a:	b29b      	uxth	r3, r3
 800541c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005420:	4619      	mov	r1, r3
 8005422:	f7ff fcc1 	bl	8004da8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 8005426:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800542a:	2114      	movs	r1, #20
 800542c:	2014      	movs	r0, #20
 800542e:	f7ff fcbb 	bl	8004da8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 8005432:	2300      	movs	r3, #0
 8005434:	9302      	str	r3, [sp, #8]
 8005436:	2310      	movs	r3, #16
 8005438:	9301      	str	r3, [sp, #4]
 800543a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005444:	4a11      	ldr	r2, [pc, #68]	; (800548c <touch_Adjust+0x4ac>)
 8005446:	2128      	movs	r1, #40	; 0x28
 8005448:	2005      	movs	r0, #5
 800544a:	f7fd fd85 	bl	8002f58 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 800544e:	2300      	movs	r3, #0
 8005450:	9302      	str	r3, [sp, #8]
 8005452:	2310      	movs	r3, #16
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005460:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <touch_Adjust+0x4b0>)
 8005462:	213c      	movs	r1, #60	; 0x3c
 8005464:	2005      	movs	r0, #5
 8005466:	f7fd fd77 	bl	8002f58 <lcd_ShowStr>
						HAL_Delay(1000);
 800546a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800546e:	f000 fb6b 	bl	8005b48 <HAL_Delay>
						continue;
 8005472:	e16f      	b.n	8005754 <touch_Adjust+0x774>
 8005474:	f3af 8000 	nop.w
 8005478:	66666666 	.word	0x66666666
 800547c:	3fee6666 	.word	0x3fee6666
 8005480:	cccccccd 	.word	0xcccccccd
 8005484:	3ff0cccc 	.word	0x3ff0cccc
 8005488:	20000b28 	.word	0x20000b28
 800548c:	0800ba80 	.word	0x0800ba80
 8005490:	0800baa0 	.word	0x0800baa0
					}

					tem1=abs(pos_temp[1][0]-pos_temp[2][0]);
 8005494:	88bb      	ldrh	r3, [r7, #4]
 8005496:	461a      	mov	r2, r3
 8005498:	893b      	ldrh	r3, [r7, #8]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	bfb8      	it	lt
 80054a0:	425b      	neglt	r3, r3
 80054a2:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[1][1]-pos_temp[2][1]);
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	461a      	mov	r2, r3
 80054a8:	897b      	ldrh	r3, [r7, #10]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bfb8      	it	lt
 80054b0:	425b      	neglt	r3, r3
 80054b2:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	fb03 f303 	mul.w	r3, r3, r3
 80054ba:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	fb03 f303 	mul.w	r3, r3, r3
 80054c2:	61fb      	str	r3, [r7, #28]
					d1=sqrt(tem1+tem2);
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fb f812 	bl	80004f4 <__aeabi_ui2d>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	ec43 2b10 	vmov	d0, r2, r3
 80054d8:	f006 f90c 	bl	800b6f4 <sqrt>
 80054dc:	ec53 2b10 	vmov	r2, r3, d0
 80054e0:	4610      	mov	r0, r2
 80054e2:	4619      	mov	r1, r3
 80054e4:	f7fb fb30 	bl	8000b48 <__aeabi_d2uiz>
 80054e8:	4603      	mov	r3, r0
 80054ea:	837b      	strh	r3, [r7, #26]

					tem1=abs(pos_temp[0][0]-pos_temp[3][0]);
 80054ec:	883b      	ldrh	r3, [r7, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	89bb      	ldrh	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfb8      	it	lt
 80054f8:	425b      	neglt	r3, r3
 80054fa:	623b      	str	r3, [r7, #32]
					tem2=abs(pos_temp[0][1]-pos_temp[3][1]);
 80054fc:	887b      	ldrh	r3, [r7, #2]
 80054fe:	461a      	mov	r2, r3
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bfb8      	it	lt
 8005508:	425b      	neglt	r3, r3
 800550a:	61fb      	str	r3, [r7, #28]
					tem1*=tem1;
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	fb03 f303 	mul.w	r3, r3, r3
 8005512:	623b      	str	r3, [r7, #32]
					tem2*=tem2;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	fb03 f303 	mul.w	r3, r3, r3
 800551a:	61fb      	str	r3, [r7, #28]
					d2=sqrt(tem1+tem2);
 800551c:	6a3a      	ldr	r2, [r7, #32]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	4618      	mov	r0, r3
 8005524:	f7fa ffe6 	bl	80004f4 <__aeabi_ui2d>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	ec43 2b10 	vmov	d0, r2, r3
 8005530:	f006 f8e0 	bl	800b6f4 <sqrt>
 8005534:	ec53 2b10 	vmov	r2, r3, d0
 8005538:	4610      	mov	r0, r2
 800553a:	4619      	mov	r1, r3
 800553c:	f7fb fb04 	bl	8000b48 <__aeabi_d2uiz>
 8005540:	4603      	mov	r3, r0
 8005542:	833b      	strh	r3, [r7, #24]
					fac=(float)d1/d2;
 8005544:	8b7b      	ldrh	r3, [r7, #26]
 8005546:	ee07 3a90 	vmov	s15, r3
 800554a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800554e:	8b3b      	ldrh	r3, [r7, #24]
 8005550:	ee07 3a90 	vmov	s15, r3
 8005554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005558:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800555c:	ee16 0a90 	vmov	r0, s13
 8005560:	f7fa ffea 	bl	8000538 <__aeabi_f2d>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	e9c7 2304 	strd	r2, r3, [r7, #16]
					if(fac<0.95||fac>1.05)
 800556c:	a383      	add	r3, pc, #524	; (adr r3, 800577c <touch_Adjust+0x79c>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005576:	f7fb faa9 	bl	8000acc <__aeabi_dcmplt>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <touch_Adjust+0x5b4>
 8005580:	a380      	add	r3, pc, #512	; (adr r3, 8005784 <touch_Adjust+0x7a4>)
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800558a:	f7fb fabd 	bl	8000b08 <__aeabi_dcmpgt>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d036      	beq.n	8005602 <touch_Adjust+0x622>
					{
						cnt=0;
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 				    TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 800559a:	4b71      	ldr	r3, [pc, #452]	; (8005760 <touch_Adjust+0x780>)
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	3b14      	subs	r3, #20
 80055a0:	b298      	uxth	r0, r3
 80055a2:	4b6f      	ldr	r3, [pc, #444]	; (8005760 <touch_Adjust+0x780>)
 80055a4:	885b      	ldrh	r3, [r3, #2]
 80055a6:	3b14      	subs	r3, #20
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7ff fbfa 	bl	8004da8 <TP_Drow_Touch_Point>
   	 				TP_Drow_Touch_Point(20,20,RED);
 80055b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80055b8:	2114      	movs	r1, #20
 80055ba:	2014      	movs	r0, #20
 80055bc:	f7ff fbf4 	bl	8004da8 <TP_Drow_Touch_Point>
						lcd_ShowStr(5,40,"Touch Adjust Failed!          ",RED,WHITE,16,0);
 80055c0:	2300      	movs	r3, #0
 80055c2:	9302      	str	r3, [sp, #8]
 80055c4:	2310      	movs	r3, #16
 80055c6:	9301      	str	r3, [sp, #4]
 80055c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055d2:	4a64      	ldr	r2, [pc, #400]	; (8005764 <touch_Adjust+0x784>)
 80055d4:	2128      	movs	r1, #40	; 0x28
 80055d6:	2005      	movs	r0, #5
 80055d8:	f7fd fcbe 	bl	8002f58 <lcd_ShowStr>
						lcd_ShowStr(5,60,"Please Adjust Again!         ",RED,WHITE,16,0);
 80055dc:	2300      	movs	r3, #0
 80055de:	9302      	str	r3, [sp, #8]
 80055e0:	2310      	movs	r3, #16
 80055e2:	9301      	str	r3, [sp, #4]
 80055e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80055ee:	4a5e      	ldr	r2, [pc, #376]	; (8005768 <touch_Adjust+0x788>)
 80055f0:	213c      	movs	r1, #60	; 0x3c
 80055f2:	2005      	movs	r0, #5
 80055f4:	f7fd fcb0 	bl	8002f58 <lcd_ShowStr>

						HAL_Delay(1000);
 80055f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055fc:	f000 faa4 	bl	8005b48 <HAL_Delay>
 							continue;
 8005600:	e0a8      	b.n	8005754 <touch_Adjust+0x774>
					}
					tp_dev.xfac=(float)(lcddev.width-40)/(pos_temp[1][0]-pos_temp[0][0]);
 8005602:	4b57      	ldr	r3, [pc, #348]	; (8005760 <touch_Adjust+0x780>)
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	3b28      	subs	r3, #40	; 0x28
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005610:	88bb      	ldrh	r3, [r7, #4]
 8005612:	461a      	mov	r2, r3
 8005614:	883b      	ldrh	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005624:	4b51      	ldr	r3, [pc, #324]	; (800576c <touch_Adjust+0x78c>)
 8005626:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					tp_dev.xoff=(lcddev.width-tp_dev.xfac*(pos_temp[1][0]+pos_temp[0][0]))/2;
 800562a:	4b4d      	ldr	r3, [pc, #308]	; (8005760 <touch_Adjust+0x780>)
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005636:	4b4d      	ldr	r3, [pc, #308]	; (800576c <touch_Adjust+0x78c>)
 8005638:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800563c:	88bb      	ldrh	r3, [r7, #4]
 800563e:	461a      	mov	r2, r3
 8005640:	883b      	ldrh	r3, [r7, #0]
 8005642:	4413      	add	r3, r2
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800564c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005650:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005654:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800565c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005660:	ee17 3a90 	vmov	r3, s15
 8005664:	b21a      	sxth	r2, r3
 8005666:	4b41      	ldr	r3, [pc, #260]	; (800576c <touch_Adjust+0x78c>)
 8005668:	859a      	strh	r2, [r3, #44]	; 0x2c

					tp_dev.yfac=(float)(lcddev.height-40)/(pos_temp[2][1]-pos_temp[0][1]);
 800566a:	4b3d      	ldr	r3, [pc, #244]	; (8005760 <touch_Adjust+0x780>)
 800566c:	885b      	ldrh	r3, [r3, #2]
 800566e:	3b28      	subs	r3, #40	; 0x28
 8005670:	ee07 3a90 	vmov	s15, r3
 8005674:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005678:	897b      	ldrh	r3, [r7, #10]
 800567a:	461a      	mov	r2, r3
 800567c:	887b      	ldrh	r3, [r7, #2]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800568c:	4b37      	ldr	r3, [pc, #220]	; (800576c <touch_Adjust+0x78c>)
 800568e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					tp_dev.yoff=(lcddev.height-tp_dev.yfac*(pos_temp[2][1]+pos_temp[0][1]))/2;
 8005692:	4b33      	ldr	r3, [pc, #204]	; (8005760 <touch_Adjust+0x780>)
 8005694:	885b      	ldrh	r3, [r3, #2]
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800569e:	4b33      	ldr	r3, [pc, #204]	; (800576c <touch_Adjust+0x78c>)
 80056a0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80056a4:	897b      	ldrh	r3, [r7, #10]
 80056a6:	461a      	mov	r2, r3
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	4413      	add	r3, r2
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056bc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80056c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056c8:	ee17 3a90 	vmov	r3, s15
 80056cc:	b21a      	sxth	r2, r3
 80056ce:	4b27      	ldr	r3, [pc, #156]	; (800576c <touch_Adjust+0x78c>)
 80056d0:	85da      	strh	r2, [r3, #46]	; 0x2e

					TP_Drow_Touch_Point(lcddev.width-20,lcddev.height-20,WHITE);
 80056d2:	4b23      	ldr	r3, [pc, #140]	; (8005760 <touch_Adjust+0x780>)
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3b14      	subs	r3, #20
 80056d8:	b298      	uxth	r0, r3
 80056da:	4b21      	ldr	r3, [pc, #132]	; (8005760 <touch_Adjust+0x780>)
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	3b14      	subs	r3, #20
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e6:	4619      	mov	r1, r3
 80056e8:	f7ff fb5e 	bl	8004da8 <TP_Drow_Touch_Point>
					lcd_ShowStr(5,40,"Touch Screen Adjust OK!      ",RED,WHITE,16,0);
 80056ec:	2300      	movs	r3, #0
 80056ee:	9302      	str	r3, [sp, #8]
 80056f0:	2310      	movs	r3, #16
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80056fe:	4a1c      	ldr	r2, [pc, #112]	; (8005770 <touch_Adjust+0x790>)
 8005700:	2128      	movs	r1, #40	; 0x28
 8005702:	2005      	movs	r0, #5
 8005704:	f7fd fc28 	bl	8002f58 <lcd_ShowStr>
					lcd_ShowStr(5,60,"                             ",RED,WHITE,16,0);
 8005708:	2300      	movs	r3, #0
 800570a:	9302      	str	r3, [sp, #8]
 800570c:	2310      	movs	r3, #16
 800570e:	9301      	str	r3, [sp, #4]
 8005710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800571a:	4a16      	ldr	r2, [pc, #88]	; (8005774 <touch_Adjust+0x794>)
 800571c:	213c      	movs	r1, #60	; 0x3c
 800571e:	2005      	movs	r0, #5
 8005720:	f7fd fc1a 	bl	8002f58 <lcd_ShowStr>
					HAL_Delay(1000);
 8005724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005728:	f000 fa0e 	bl	8005b48 <HAL_Delay>
 					lcd_ShowStr(5,40,"                       ",RED,WHITE,16,0);
 800572c:	2300      	movs	r3, #0
 800572e:	9302      	str	r3, [sp, #8]
 8005730:	2310      	movs	r3, #16
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800573e:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <touch_Adjust+0x798>)
 8005740:	2128      	movs	r1, #40	; 0x28
 8005742:	2005      	movs	r0, #5
 8005744:	f7fd fc08 	bl	8002f58 <lcd_ShowStr>
					TP_Save_Adjdata();
 8005748:	f7ff fc1c 	bl	8004f84 <TP_Save_Adjdata>
					TP_Get_Adjdata();
 800574c:	f7ff fc2a 	bl	8004fa4 <TP_Get_Adjdata>
					return;
 8005750:	e001      	b.n	8005756 <touch_Adjust+0x776>
			}
		}
 8005752:	bf00      	nop
		HAL_Delay(50);
 8005754:	e490      	b.n	8005078 <touch_Adjust+0x98>
 	}
}
 8005756:	3728      	adds	r7, #40	; 0x28
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	f3af 8000 	nop.w
 8005760:	20000b28 	.word	0x20000b28
 8005764:	0800ba80 	.word	0x0800ba80
 8005768:	0800baa0 	.word	0x0800baa0
 800576c:	2000003c 	.word	0x2000003c
 8005770:	0800bac0 	.word	0x0800bac0
 8005774:	0800bae0 	.word	0x0800bae0
 8005778:	0800bb00 	.word	0x0800bb00
 800577c:	66666666 	.word	0x66666666
 8005780:	3fee6666 	.word	0x3fee6666
 8005784:	cccccccd 	.word	0xcccccccd
 8005788:	3ff0cccc 	.word	0x3ff0cccc

0800578c <touch_init>:

void touch_init(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
	TP_Read_XY(&tp_dev.x[0],&tp_dev.y[0]);
 8005790:	4904      	ldr	r1, [pc, #16]	; (80057a4 <touch_init+0x18>)
 8005792:	4805      	ldr	r0, [pc, #20]	; (80057a8 <touch_init+0x1c>)
 8005794:	f7ff fa84 	bl	8004ca0 <TP_Read_XY>
	at24c_init();
 8005798:	f7fb fc90 	bl	80010bc <at24c_init>
	TP_Get_Adjdata();
 800579c:	f7ff fc02 	bl	8004fa4 <TP_Get_Adjdata>
}
 80057a0:	bf00      	nop
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000052 	.word	0x20000052
 80057a8:	20000048 	.word	0x20000048

080057ac <touch_Scan>:

void touch_Scan(){
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
	  tp_dev.scan(0);
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <touch_Scan+0x10>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2000      	movs	r0, #0
 80057b6:	4798      	blx	r3
}
 80057b8:	bf00      	nop
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	2000003c 	.word	0x2000003c

080057c0 <touch_IsTouched>:

uint8_t touch_IsTouched(){
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(T_PEN_GPIO_Port, T_PEN_Pin) == 0;
 80057c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057c8:	4805      	ldr	r0, [pc, #20]	; (80057e0 <touch_IsTouched+0x20>)
 80057ca:	f001 f9db 	bl	8006b84 <HAL_GPIO_ReadPin>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf0c      	ite	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	2300      	movne	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
}
 80057da:	4618      	mov	r0, r3
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	40020800 	.word	0x40020800

080057e4 <touch_GetX>:

uint16_t touch_GetX(){
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
	return tp_dev.x[0];
 80057e8:	4b03      	ldr	r3, [pc, #12]	; (80057f8 <touch_GetX+0x14>)
 80057ea:	899b      	ldrh	r3, [r3, #12]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000003c 	.word	0x2000003c

080057fc <touch_GetY>:

uint16_t touch_GetY(){
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	return tp_dev.y[0];
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <touch_GetY+0x14>)
 8005802:	8adb      	ldrh	r3, [r3, #22]
}
 8005804:	4618      	mov	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	2000003c 	.word	0x2000003c

08005814 <isButtonStart>:
 *      Author: Admin
 */

#include "touch_screen.h"

uint8_t isButtonStart(){
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005818:	f7ff ffd2 	bl	80057c0 <touch_IsTouched>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <isButtonStart+0x12>
 8005822:	2300      	movs	r3, #0
 8005824:	e018      	b.n	8005858 <isButtonStart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 350;
 8005826:	f7ff ffdd 	bl	80057e4 <touch_GetX>
 800582a:	4603      	mov	r3, r0
 800582c:	2b32      	cmp	r3, #50	; 0x32
 800582e:	d911      	bls.n	8005854 <isButtonStart+0x40>
 8005830:	f7ff ffd8 	bl	80057e4 <touch_GetX>
 8005834:	4603      	mov	r3, r0
 8005836:	2bbd      	cmp	r3, #189	; 0xbd
 8005838:	d80c      	bhi.n	8005854 <isButtonStart+0x40>
 800583a:	f7ff ffdf 	bl	80057fc <touch_GetY>
 800583e:	4603      	mov	r3, r0
 8005840:	2bfa      	cmp	r3, #250	; 0xfa
 8005842:	d907      	bls.n	8005854 <isButtonStart+0x40>
 8005844:	f7ff ffda 	bl	80057fc <touch_GetY>
 8005848:	4603      	mov	r3, r0
 800584a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800584e:	d201      	bcs.n	8005854 <isButtonStart+0x40>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <isButtonStart+0x42>
 8005854:	2300      	movs	r3, #0
 8005856:	b2db      	uxtb	r3, r3
}
 8005858:	4618      	mov	r0, r3
 800585a:	bd80      	pop	{r7, pc}

0800585c <isButtonUp>:
uint8_t isButtonUp(){
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005860:	f7ff ffae 	bl	80057c0 <touch_IsTouched>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <isButtonUp+0x12>
 800586a:	2300      	movs	r3, #0
 800586c:	e017      	b.n	800589e <isButtonUp+0x42>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 210 && touch_GetY() < 250;
 800586e:	f7ff ffb9 	bl	80057e4 <touch_GetX>
 8005872:	4603      	mov	r3, r0
 8005874:	2b5a      	cmp	r3, #90	; 0x5a
 8005876:	d910      	bls.n	800589a <isButtonUp+0x3e>
 8005878:	f7ff ffb4 	bl	80057e4 <touch_GetX>
 800587c:	4603      	mov	r3, r0
 800587e:	2b95      	cmp	r3, #149	; 0x95
 8005880:	d80b      	bhi.n	800589a <isButtonUp+0x3e>
 8005882:	f7ff ffbb 	bl	80057fc <touch_GetY>
 8005886:	4603      	mov	r3, r0
 8005888:	2bd2      	cmp	r3, #210	; 0xd2
 800588a:	d906      	bls.n	800589a <isButtonUp+0x3e>
 800588c:	f7ff ffb6 	bl	80057fc <touch_GetY>
 8005890:	4603      	mov	r3, r0
 8005892:	2bf9      	cmp	r3, #249	; 0xf9
 8005894:	d801      	bhi.n	800589a <isButtonUp+0x3e>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <isButtonUp+0x40>
 800589a:	2300      	movs	r3, #0
 800589c:	b2db      	uxtb	r3, r3
}
 800589e:	4618      	mov	r0, r3
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <isButtonDown>:
uint8_t isButtonDown(){
 80058a2:	b580      	push	{r7, lr}
 80058a4:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80058a6:	f7ff ff8b 	bl	80057c0 <touch_IsTouched>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <isButtonDown+0x12>
 80058b0:	2300      	movs	r3, #0
 80058b2:	e019      	b.n	80058e8 <isButtonDown+0x46>
	return touch_GetX() > 90 && touch_GetX() < 150 && touch_GetY() > 260 && touch_GetY() < 300;
 80058b4:	f7ff ff96 	bl	80057e4 <touch_GetX>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b5a      	cmp	r3, #90	; 0x5a
 80058bc:	d912      	bls.n	80058e4 <isButtonDown+0x42>
 80058be:	f7ff ff91 	bl	80057e4 <touch_GetX>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b95      	cmp	r3, #149	; 0x95
 80058c6:	d80d      	bhi.n	80058e4 <isButtonDown+0x42>
 80058c8:	f7ff ff98 	bl	80057fc <touch_GetY>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d2:	d907      	bls.n	80058e4 <isButtonDown+0x42>
 80058d4:	f7ff ff92 	bl	80057fc <touch_GetY>
 80058d8:	4603      	mov	r3, r0
 80058da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80058de:	d201      	bcs.n	80058e4 <isButtonDown+0x42>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <isButtonDown+0x44>
 80058e4:	2300      	movs	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd80      	pop	{r7, pc}

080058ec <isButtonLeft>:
uint8_t isButtonLeft(){
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80058f0:	f7ff ff66 	bl	80057c0 <touch_IsTouched>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <isButtonLeft+0x12>
 80058fa:	2300      	movs	r3, #0
 80058fc:	e019      	b.n	8005932 <isButtonLeft+0x46>
	return touch_GetX() > 20 && touch_GetX() < 80 && touch_GetY() > 260 && touch_GetY() < 300;
 80058fe:	f7ff ff71 	bl	80057e4 <touch_GetX>
 8005902:	4603      	mov	r3, r0
 8005904:	2b14      	cmp	r3, #20
 8005906:	d912      	bls.n	800592e <isButtonLeft+0x42>
 8005908:	f7ff ff6c 	bl	80057e4 <touch_GetX>
 800590c:	4603      	mov	r3, r0
 800590e:	2b4f      	cmp	r3, #79	; 0x4f
 8005910:	d80d      	bhi.n	800592e <isButtonLeft+0x42>
 8005912:	f7ff ff73 	bl	80057fc <touch_GetY>
 8005916:	4603      	mov	r3, r0
 8005918:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800591c:	d907      	bls.n	800592e <isButtonLeft+0x42>
 800591e:	f7ff ff6d 	bl	80057fc <touch_GetY>
 8005922:	4603      	mov	r3, r0
 8005924:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005928:	d201      	bcs.n	800592e <isButtonLeft+0x42>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <isButtonLeft+0x44>
 800592e:	2300      	movs	r3, #0
 8005930:	b2db      	uxtb	r3, r3
}
 8005932:	4618      	mov	r0, r3
 8005934:	bd80      	pop	{r7, pc}

08005936 <isButtonRight>:
uint8_t isButtonRight(){
 8005936:	b580      	push	{r7, lr}
 8005938:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 800593a:	f7ff ff41 	bl	80057c0 <touch_IsTouched>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <isButtonRight+0x12>
 8005944:	2300      	movs	r3, #0
 8005946:	e019      	b.n	800597c <isButtonRight+0x46>
	return touch_GetX() > 160 && touch_GetX() < 220 && touch_GetY() > 260 && touch_GetY() < 300;
 8005948:	f7ff ff4c 	bl	80057e4 <touch_GetX>
 800594c:	4603      	mov	r3, r0
 800594e:	2ba0      	cmp	r3, #160	; 0xa0
 8005950:	d912      	bls.n	8005978 <isButtonRight+0x42>
 8005952:	f7ff ff47 	bl	80057e4 <touch_GetX>
 8005956:	4603      	mov	r3, r0
 8005958:	2bdb      	cmp	r3, #219	; 0xdb
 800595a:	d80d      	bhi.n	8005978 <isButtonRight+0x42>
 800595c:	f7ff ff4e 	bl	80057fc <touch_GetY>
 8005960:	4603      	mov	r3, r0
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d907      	bls.n	8005978 <isButtonRight+0x42>
 8005968:	f7ff ff48 	bl	80057fc <touch_GetY>
 800596c:	4603      	mov	r3, r0
 800596e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005972:	d201      	bcs.n	8005978 <isButtonRight+0x42>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <isButtonRight+0x44>
 8005978:	2300      	movs	r3, #0
 800597a:	b2db      	uxtb	r3, r3
}
 800597c:	4618      	mov	r0, r3
 800597e:	bd80      	pop	{r7, pc}

08005980 <isButtonRestart>:
uint8_t isButtonRestart(){
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 8005984:	f7ff ff1c 	bl	80057c0 <touch_IsTouched>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <isButtonRestart+0x12>
 800598e:	2300      	movs	r3, #0
 8005990:	e018      	b.n	80059c4 <isButtonRestart+0x44>
	return touch_GetX() > 50 && touch_GetX() < 190 && touch_GetY() > 250 && touch_GetY() < 350;
 8005992:	f7ff ff27 	bl	80057e4 <touch_GetX>
 8005996:	4603      	mov	r3, r0
 8005998:	2b32      	cmp	r3, #50	; 0x32
 800599a:	d911      	bls.n	80059c0 <isButtonRestart+0x40>
 800599c:	f7ff ff22 	bl	80057e4 <touch_GetX>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2bbd      	cmp	r3, #189	; 0xbd
 80059a4:	d80c      	bhi.n	80059c0 <isButtonRestart+0x40>
 80059a6:	f7ff ff29 	bl	80057fc <touch_GetY>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2bfa      	cmp	r3, #250	; 0xfa
 80059ae:	d907      	bls.n	80059c0 <isButtonRestart+0x40>
 80059b0:	f7ff ff24 	bl	80057fc <touch_GetY>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80059ba:	d201      	bcs.n	80059c0 <isButtonRestart+0x40>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <isButtonRestart+0x42>
 80059c0:	2300      	movs	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <isExit>:

uint8_t isExit(){
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
	if(!touch_IsTouched()) return 0;
 80059cc:	f7ff fef8 	bl	80057c0 <touch_IsTouched>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <isExit+0x12>
 80059d6:	2300      	movs	r3, #0
 80059d8:	e017      	b.n	8005a0a <isExit+0x42>
	return touch_GetX() > 170 && touch_GetX() < 240 && touch_GetY() > 200 && touch_GetY() < 255;
 80059da:	f7ff ff03 	bl	80057e4 <touch_GetX>
 80059de:	4603      	mov	r3, r0
 80059e0:	2baa      	cmp	r3, #170	; 0xaa
 80059e2:	d910      	bls.n	8005a06 <isExit+0x3e>
 80059e4:	f7ff fefe 	bl	80057e4 <touch_GetX>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2bef      	cmp	r3, #239	; 0xef
 80059ec:	d80b      	bhi.n	8005a06 <isExit+0x3e>
 80059ee:	f7ff ff05 	bl	80057fc <touch_GetY>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2bc8      	cmp	r3, #200	; 0xc8
 80059f6:	d906      	bls.n	8005a06 <isExit+0x3e>
 80059f8:	f7ff ff00 	bl	80057fc <touch_GetY>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2bfe      	cmp	r3, #254	; 0xfe
 8005a00:	d801      	bhi.n	8005a06 <isExit+0x3e>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <isExit+0x40>
 8005a06:	2300      	movs	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a14:	480d      	ldr	r0, [pc, #52]	; (8005a4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a16:	490e      	ldr	r1, [pc, #56]	; (8005a50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a18:	4a0e      	ldr	r2, [pc, #56]	; (8005a54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a1c:	e002      	b.n	8005a24 <LoopCopyDataInit>

08005a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a22:	3304      	adds	r3, #4

08005a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a28:	d3f9      	bcc.n	8005a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a2a:	4a0b      	ldr	r2, [pc, #44]	; (8005a58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005a2c:	4c0b      	ldr	r4, [pc, #44]	; (8005a5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a30:	e001      	b.n	8005a36 <LoopFillZerobss>

08005a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a34:	3204      	adds	r2, #4

08005a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a38:	d3fb      	bcc.n	8005a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005a3a:	f7fe fe7b 	bl	8004734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a3e:	f004 fc59 	bl	800a2f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a42:	f7fd fc07 	bl	8003254 <main>
  bx  lr    
 8005a46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005a48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a50:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8005a54:	0800ec14 	.word	0x0800ec14
  ldr r2, =_sbss
 8005a58:	200000e4 	.word	0x200000e4
  ldr r4, =_ebss
 8005a5c:	20000ca8 	.word	0x20000ca8

08005a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a60:	e7fe      	b.n	8005a60 <ADC_IRQHandler>
	...

08005a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005a68:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_Init+0x40>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <HAL_Init+0x40>)
 8005a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_Init+0x40>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_Init+0x40>)
 8005a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a80:	4b08      	ldr	r3, [pc, #32]	; (8005aa4 <HAL_Init+0x40>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a07      	ldr	r2, [pc, #28]	; (8005aa4 <HAL_Init+0x40>)
 8005a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a8c:	2003      	movs	r0, #3
 8005a8e:	f000 fbb1 	bl	80061f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a92:	200f      	movs	r0, #15
 8005a94:	f000 f808 	bl	8005aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a98:	f7fe fd20 	bl	80044dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023c00 	.word	0x40023c00

08005aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ab0:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_InitTick+0x54>)
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <HAL_InitTick+0x58>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fbc9 	bl	800625e <HAL_SYSTICK_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00e      	b.n	8005af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b0f      	cmp	r3, #15
 8005ada:	d80a      	bhi.n	8005af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005adc:	2200      	movs	r2, #0
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	f000 fb91 	bl	800620a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ae8:	4a06      	ldr	r2, [pc, #24]	; (8005b04 <HAL_InitTick+0x5c>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e000      	b.n	8005af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000038 	.word	0x20000038
 8005b00:	20000078 	.word	0x20000078
 8005b04:	20000074 	.word	0x20000074

08005b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b0c:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_IncTick+0x20>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_IncTick+0x24>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <HAL_IncTick+0x24>)
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000078 	.word	0x20000078
 8005b2c:	20000c94 	.word	0x20000c94

08005b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  return uwTick;
 8005b34:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <HAL_GetTick+0x14>)
 8005b36:	681b      	ldr	r3, [r3, #0]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000c94 	.word	0x20000c94

08005b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b50:	f7ff ffee 	bl	8005b30 <HAL_GetTick>
 8005b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d005      	beq.n	8005b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b62:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_Delay+0x44>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b6e:	bf00      	nop
 8005b70:	f7ff ffde 	bl	8005b30 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d8f7      	bhi.n	8005b70 <HAL_Delay+0x28>
  {
  }
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000078 	.word	0x20000078

08005b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e033      	b.n	8005c0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb f9f0 	bl	8000f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d118      	bne.n	8005c00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005bd6:	f023 0302 	bic.w	r3, r3, #2
 8005bda:	f043 0202 	orr.w	r2, r3, #2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f93a 	bl	8005e5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	f043 0201 	orr.w	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8005bfe:	e001      	b.n	8005c04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x1c>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e105      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x228>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b09      	cmp	r3, #9
 8005c42:	d925      	bls.n	8005c90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68d9      	ldr	r1, [r3, #12]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	461a      	mov	r2, r3
 8005c52:	4613      	mov	r3, r2
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	4413      	add	r3, r2
 8005c58:	3b1e      	subs	r3, #30
 8005c5a:	2207      	movs	r2, #7
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43da      	mvns	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	400a      	ands	r2, r1
 8005c68:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68d9      	ldr	r1, [r3, #12]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	4403      	add	r3, r0
 8005c82:	3b1e      	subs	r3, #30
 8005c84:	409a      	lsls	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	e022      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6919      	ldr	r1, [r3, #16]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	4413      	add	r3, r2
 8005ca4:	2207      	movs	r2, #7
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43da      	mvns	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	400a      	ands	r2, r1
 8005cb2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6919      	ldr	r1, [r3, #16]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	4403      	add	r3, r0
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b06      	cmp	r3, #6
 8005cdc:	d824      	bhi.n	8005d28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	3b05      	subs	r3, #5
 8005cf0:	221f      	movs	r2, #31
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43da      	mvns	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	400a      	ands	r2, r1
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	3b05      	subs	r3, #5
 8005d1a:	fa00 f203 	lsl.w	r2, r0, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
 8005d26:	e04c      	b.n	8005dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d824      	bhi.n	8005d7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	3b23      	subs	r3, #35	; 0x23
 8005d42:	221f      	movs	r2, #31
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	43da      	mvns	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	400a      	ands	r2, r1
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	4618      	mov	r0, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	3b23      	subs	r3, #35	; 0x23
 8005d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
 8005d78:	e023      	b.n	8005dc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	3b41      	subs	r3, #65	; 0x41
 8005d8c:	221f      	movs	r2, #31
 8005d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d92:	43da      	mvns	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	400a      	ands	r2, r1
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	4618      	mov	r0, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	3b41      	subs	r3, #65	; 0x41
 8005db6:	fa00 f203 	lsl.w	r2, r0, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dc2:	4b22      	ldr	r3, [pc, #136]	; (8005e4c <HAL_ADC_ConfigChannel+0x234>)
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <HAL_ADC_ConfigChannel+0x238>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d109      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x1cc>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b12      	cmp	r3, #18
 8005dd6:	d105      	bne.n	8005de4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a19      	ldr	r2, [pc, #100]	; (8005e50 <HAL_ADC_ConfigChannel+0x238>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d123      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x21e>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b10      	cmp	r3, #16
 8005df4:	d003      	beq.n	8005dfe <HAL_ADC_ConfigChannel+0x1e6>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2b11      	cmp	r3, #17
 8005dfc:	d11b      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b10      	cmp	r3, #16
 8005e10:	d111      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e12:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <HAL_ADC_ConfigChannel+0x23c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <HAL_ADC_ConfigChannel+0x240>)
 8005e18:	fba2 2303 	umull	r2, r3, r2, r3
 8005e1c:	0c9a      	lsrs	r2, r3, #18
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e28:	e002      	b.n	8005e30 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f9      	bne.n	8005e2a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40012300 	.word	0x40012300
 8005e50:	40012000 	.word	0x40012000
 8005e54:	20000038 	.word	0x20000038
 8005e58:	431bde83 	.word	0x431bde83

08005e5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e64:	4b79      	ldr	r3, [pc, #484]	; (800604c <ADC_Init+0x1f0>)
 8005e66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6859      	ldr	r1, [r3, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	021a      	lsls	r2, r3, #8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689a      	ldr	r2, [r3, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6899      	ldr	r1, [r3, #8]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	4a58      	ldr	r2, [pc, #352]	; (8006050 <ADC_Init+0x1f4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d022      	beq.n	8005f3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6899      	ldr	r1, [r3, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6899      	ldr	r1, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	e00f      	b.n	8005f5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0202 	bic.w	r2, r2, #2
 8005f68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6899      	ldr	r1, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7e1b      	ldrb	r3, [r3, #24]
 8005f74:	005a      	lsls	r2, r3, #1
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01b      	beq.n	8005fc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005fa6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6859      	ldr	r1, [r3, #4]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	035a      	lsls	r2, r3, #13
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
 8005fbe:	e007      	b.n	8005fd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	051a      	lsls	r2, r3, #20
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6899      	ldr	r1, [r3, #8]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006012:	025a      	lsls	r2, r3, #9
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800602a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6899      	ldr	r1, [r3, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	029a      	lsls	r2, r3, #10
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]
}
 8006040:	bf00      	nop
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40012300 	.word	0x40012300
 8006050:	0f000001 	.word	0x0f000001

08006054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006064:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <__NVIC_SetPriorityGrouping+0x44>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006070:	4013      	ands	r3, r2
 8006072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800607c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006086:	4a04      	ldr	r2, [pc, #16]	; (8006098 <__NVIC_SetPriorityGrouping+0x44>)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	60d3      	str	r3, [r2, #12]
}
 800608c:	bf00      	nop
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	e000ed00 	.word	0xe000ed00

0800609c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060a0:	4b04      	ldr	r3, [pc, #16]	; (80060b4 <__NVIC_GetPriorityGrouping+0x18>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	f003 0307 	and.w	r3, r3, #7
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	e000ed00 	.word	0xe000ed00

080060b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	db0b      	blt.n	80060e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	f003 021f 	and.w	r2, r3, #31
 80060d0:	4907      	ldr	r1, [pc, #28]	; (80060f0 <__NVIC_EnableIRQ+0x38>)
 80060d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	2001      	movs	r0, #1
 80060da:	fa00 f202 	lsl.w	r2, r0, r2
 80060de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	e000e100 	.word	0xe000e100

080060f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	4603      	mov	r3, r0
 80060fc:	6039      	str	r1, [r7, #0]
 80060fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006104:	2b00      	cmp	r3, #0
 8006106:	db0a      	blt.n	800611e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	490c      	ldr	r1, [pc, #48]	; (8006140 <__NVIC_SetPriority+0x4c>)
 800610e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006112:	0112      	lsls	r2, r2, #4
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	440b      	add	r3, r1
 8006118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800611c:	e00a      	b.n	8006134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	4908      	ldr	r1, [pc, #32]	; (8006144 <__NVIC_SetPriority+0x50>)
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	3b04      	subs	r3, #4
 800612c:	0112      	lsls	r2, r2, #4
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	440b      	add	r3, r1
 8006132:	761a      	strb	r2, [r3, #24]
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	e000e100 	.word	0xe000e100
 8006144:	e000ed00 	.word	0xe000ed00

08006148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f1c3 0307 	rsb	r3, r3, #7
 8006162:	2b04      	cmp	r3, #4
 8006164:	bf28      	it	cs
 8006166:	2304      	movcs	r3, #4
 8006168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3304      	adds	r3, #4
 800616e:	2b06      	cmp	r3, #6
 8006170:	d902      	bls.n	8006178 <NVIC_EncodePriority+0x30>
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3b03      	subs	r3, #3
 8006176:	e000      	b.n	800617a <NVIC_EncodePriority+0x32>
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800617c:	f04f 32ff 	mov.w	r2, #4294967295
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	43da      	mvns	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	401a      	ands	r2, r3
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006190:	f04f 31ff 	mov.w	r1, #4294967295
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	43d9      	mvns	r1, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a0:	4313      	orrs	r3, r2
         );
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3724      	adds	r7, #36	; 0x24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061c0:	d301      	bcc.n	80061c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061c2:	2301      	movs	r3, #1
 80061c4:	e00f      	b.n	80061e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061c6:	4a0a      	ldr	r2, [pc, #40]	; (80061f0 <SysTick_Config+0x40>)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ce:	210f      	movs	r1, #15
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	f7ff ff8e 	bl	80060f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <SysTick_Config+0x40>)
 80061da:	2200      	movs	r2, #0
 80061dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061de:	4b04      	ldr	r3, [pc, #16]	; (80061f0 <SysTick_Config+0x40>)
 80061e0:	2207      	movs	r2, #7
 80061e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	e000e010 	.word	0xe000e010

080061f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff ff29 	bl	8006054 <__NVIC_SetPriorityGrouping>
}
 8006202:	bf00      	nop
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800620a:	b580      	push	{r7, lr}
 800620c:	b086      	sub	sp, #24
 800620e:	af00      	add	r7, sp, #0
 8006210:	4603      	mov	r3, r0
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800621c:	f7ff ff3e 	bl	800609c <__NVIC_GetPriorityGrouping>
 8006220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	6978      	ldr	r0, [r7, #20]
 8006228:	f7ff ff8e 	bl	8006148 <NVIC_EncodePriority>
 800622c:	4602      	mov	r2, r0
 800622e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006232:	4611      	mov	r1, r2
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff ff5d 	bl	80060f4 <__NVIC_SetPriority>
}
 800623a:	bf00      	nop
 800623c:	3718      	adds	r7, #24
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	4603      	mov	r3, r0
 800624a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800624c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff ff31 	bl	80060b8 <__NVIC_EnableIRQ>
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b082      	sub	sp, #8
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff ffa2 	bl	80061b0 <SysTick_Config>
 800626c:	4603      	mov	r3, r0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006284:	f7ff fc54 	bl	8005b30 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e099      	b.n	80063c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2202      	movs	r2, #2
 8006298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062b4:	e00f      	b.n	80062d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062b6:	f7ff fc3b 	bl	8005b30 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b05      	cmp	r3, #5
 80062c2:	d908      	bls.n	80062d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2203      	movs	r2, #3
 80062ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e078      	b.n	80063c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e8      	bne.n	80062b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4b38      	ldr	r3, [pc, #224]	; (80063d0 <HAL_DMA_Init+0x158>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800631a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2b04      	cmp	r3, #4
 800632e:	d107      	bne.n	8006340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006338:	4313      	orrs	r3, r2
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0307 	bic.w	r3, r3, #7
 8006356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	2b04      	cmp	r3, #4
 8006368:	d117      	bne.n	800639a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f9e9 	bl	8006754 <DMA_CheckFifoParam>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2240      	movs	r2, #64	; 0x40
 800638c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006396:	2301      	movs	r3, #1
 8006398:	e016      	b.n	80063c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f9a0 	bl	80066e8 <DMA_CalcBaseAndBitshift>
 80063a8:	4603      	mov	r3, r0
 80063aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b0:	223f      	movs	r2, #63	; 0x3f
 80063b2:	409a      	lsls	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	f010803f 	.word	0xf010803f

080063d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e0:	4b92      	ldr	r3, [pc, #584]	; (800662c <HAL_DMA_IRQHandler+0x258>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a92      	ldr	r2, [pc, #584]	; (8006630 <HAL_DMA_IRQHandler+0x25c>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0a9b      	lsrs	r3, r3, #10
 80063ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063fe:	2208      	movs	r2, #8
 8006400:	409a      	lsls	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01a      	beq.n	8006440 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	2208      	movs	r2, #8
 800642e:	409a      	lsls	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006444:	2201      	movs	r2, #1
 8006446:	409a      	lsls	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d012      	beq.n	8006476 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	2201      	movs	r2, #1
 8006464:	409a      	lsls	r2, r3
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647a:	2204      	movs	r2, #4
 800647c:	409a      	lsls	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4013      	ands	r3, r2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d012      	beq.n	80064ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006498:	2204      	movs	r2, #4
 800649a:	409a      	lsls	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a4:	f043 0204 	orr.w	r2, r3, #4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b0:	2210      	movs	r2, #16
 80064b2:	409a      	lsls	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d043      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03c      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ce:	2210      	movs	r2, #16
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d024      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	e01f      	b.n	8006544 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	e016      	b.n	8006544 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0208 	bic.w	r2, r2, #8
 8006532:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006548:	2220      	movs	r2, #32
 800654a:	409a      	lsls	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 808e 	beq.w	8006672 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8086 	beq.w	8006672 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656a:	2220      	movs	r2, #32
 800656c:	409a      	lsls	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b05      	cmp	r3, #5
 800657c:	d136      	bne.n	80065ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0216 	bic.w	r2, r2, #22
 800658c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800659c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <HAL_DMA_IRQHandler+0x1da>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0208 	bic.w	r2, r2, #8
 80065bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c2:	223f      	movs	r2, #63	; 0x3f
 80065c4:	409a      	lsls	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d07d      	beq.n	80066de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
        }
        return;
 80065ea:	e078      	b.n	80066de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01c      	beq.n	8006634 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d108      	bne.n	800661a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660c:	2b00      	cmp	r3, #0
 800660e:	d030      	beq.n	8006672 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
 8006618:	e02b      	b.n	8006672 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d027      	beq.n	8006672 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	4798      	blx	r3
 800662a:	e022      	b.n	8006672 <HAL_DMA_IRQHandler+0x29e>
 800662c:	20000038 	.word	0x20000038
 8006630:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0210 	bic.w	r2, r2, #16
 8006650:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006676:	2b00      	cmp	r3, #0
 8006678:	d032      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d022      	beq.n	80066cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2205      	movs	r2, #5
 800668a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0201 	bic.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d307      	bcc.n	80066ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f2      	bne.n	800669e <HAL_DMA_IRQHandler+0x2ca>
 80066b8:	e000      	b.n	80066bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80066ba:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d005      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	4798      	blx	r3
 80066dc:	e000      	b.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80066de:	bf00      	nop
    }
  }
}
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop

080066e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	3b10      	subs	r3, #16
 80066f8:	4a14      	ldr	r2, [pc, #80]	; (800674c <DMA_CalcBaseAndBitshift+0x64>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006702:	4a13      	ldr	r2, [pc, #76]	; (8006750 <DMA_CalcBaseAndBitshift+0x68>)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b03      	cmp	r3, #3
 8006714:	d909      	bls.n	800672a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	1d1a      	adds	r2, r3, #4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	659a      	str	r2, [r3, #88]	; 0x58
 8006728:	e007      	b.n	800673a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	aaaaaaab 	.word	0xaaaaaaab
 8006750:	0800eab0 	.word	0x0800eab0

08006754 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11f      	bne.n	80067ae <DMA_CheckFifoParam+0x5a>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b03      	cmp	r3, #3
 8006772:	d856      	bhi.n	8006822 <DMA_CheckFifoParam+0xce>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <DMA_CheckFifoParam+0x28>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679f 	.word	0x0800679f
 8006784:	0800678d 	.word	0x0800678d
 8006788:	08006823 	.word	0x08006823
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d046      	beq.n	8006826 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800679c:	e043      	b.n	8006826 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067a6:	d140      	bne.n	800682a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ac:	e03d      	b.n	800682a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b6:	d121      	bne.n	80067fc <DMA_CheckFifoParam+0xa8>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d837      	bhi.n	800682e <DMA_CheckFifoParam+0xda>
 80067be:	a201      	add	r2, pc, #4	; (adr r2, 80067c4 <DMA_CheckFifoParam+0x70>)
 80067c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067db 	.word	0x080067db
 80067cc:	080067d5 	.word	0x080067d5
 80067d0:	080067ed 	.word	0x080067ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
      break;
 80067d8:	e030      	b.n	800683c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d025      	beq.n	8006832 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067ea:	e022      	b.n	8006832 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067f4:	d11f      	bne.n	8006836 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80067fa:	e01c      	b.n	8006836 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d903      	bls.n	800680a <DMA_CheckFifoParam+0xb6>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d003      	beq.n	8006810 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006808:	e018      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	73fb      	strb	r3, [r7, #15]
      break;
 800680e:	e015      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
      break;
 8006820:	e00b      	b.n	800683a <DMA_CheckFifoParam+0xe6>
      break;
 8006822:	bf00      	nop
 8006824:	e00a      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      break;
 8006826:	bf00      	nop
 8006828:	e008      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      break;
 800682a:	bf00      	nop
 800682c:	e006      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      break;   
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <DMA_CheckFifoParam+0xe8>
      break;
 800683a:	bf00      	nop
    }
  } 
  
  return status; 
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop

0800684c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	; 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006856:	2300      	movs	r3, #0
 8006858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006862:	2300      	movs	r3, #0
 8006864:	61fb      	str	r3, [r7, #28]
 8006866:	e16b      	b.n	8006b40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006868:	2201      	movs	r2, #1
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4013      	ands	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	429a      	cmp	r2, r3
 8006882:	f040 815a 	bne.w	8006b3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d005      	beq.n	800689e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800689a:	2b02      	cmp	r3, #2
 800689c:	d130      	bne.n	8006900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	2203      	movs	r2, #3
 80068aa:	fa02 f303 	lsl.w	r3, r2, r3
 80068ae:	43db      	mvns	r3, r3
 80068b0:	69ba      	ldr	r2, [r7, #24]
 80068b2:	4013      	ands	r3, r2
 80068b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80068d4:	2201      	movs	r2, #1
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	43db      	mvns	r3, r3
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	4013      	ands	r3, r2
 80068e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 0201 	and.w	r2, r3, #1
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	fa02 f303 	lsl.w	r3, r2, r3
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d017      	beq.n	800693c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	2203      	movs	r2, #3
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	43db      	mvns	r3, r3
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	4013      	ands	r3, r2
 8006922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	4313      	orrs	r3, r2
 8006934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0303 	and.w	r3, r3, #3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d123      	bne.n	8006990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	08da      	lsrs	r2, r3, #3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3208      	adds	r2, #8
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	220f      	movs	r2, #15
 8006960:	fa02 f303 	lsl.w	r3, r2, r3
 8006964:	43db      	mvns	r3, r3
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4013      	ands	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	4313      	orrs	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	08da      	lsrs	r2, r3, #3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3208      	adds	r2, #8
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	2203      	movs	r2, #3
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	43db      	mvns	r3, r3
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	4013      	ands	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 0203 	and.w	r2, r3, #3
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	fa02 f303 	lsl.w	r3, r2, r3
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f000 80b4 	beq.w	8006b3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d2:	2300      	movs	r3, #0
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	4b60      	ldr	r3, [pc, #384]	; (8006b58 <HAL_GPIO_Init+0x30c>)
 80069d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069da:	4a5f      	ldr	r2, [pc, #380]	; (8006b58 <HAL_GPIO_Init+0x30c>)
 80069dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069e0:	6453      	str	r3, [r2, #68]	; 0x44
 80069e2:	4b5d      	ldr	r3, [pc, #372]	; (8006b58 <HAL_GPIO_Init+0x30c>)
 80069e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069ee:	4a5b      	ldr	r2, [pc, #364]	; (8006b5c <HAL_GPIO_Init+0x310>)
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	089b      	lsrs	r3, r3, #2
 80069f4:	3302      	adds	r3, #2
 80069f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	220f      	movs	r2, #15
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a52      	ldr	r2, [pc, #328]	; (8006b60 <HAL_GPIO_Init+0x314>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d02b      	beq.n	8006a72 <HAL_GPIO_Init+0x226>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a51      	ldr	r2, [pc, #324]	; (8006b64 <HAL_GPIO_Init+0x318>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d025      	beq.n	8006a6e <HAL_GPIO_Init+0x222>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a50      	ldr	r2, [pc, #320]	; (8006b68 <HAL_GPIO_Init+0x31c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d01f      	beq.n	8006a6a <HAL_GPIO_Init+0x21e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a4f      	ldr	r2, [pc, #316]	; (8006b6c <HAL_GPIO_Init+0x320>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d019      	beq.n	8006a66 <HAL_GPIO_Init+0x21a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a4e      	ldr	r2, [pc, #312]	; (8006b70 <HAL_GPIO_Init+0x324>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_GPIO_Init+0x216>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a4d      	ldr	r2, [pc, #308]	; (8006b74 <HAL_GPIO_Init+0x328>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00d      	beq.n	8006a5e <HAL_GPIO_Init+0x212>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a4c      	ldr	r2, [pc, #304]	; (8006b78 <HAL_GPIO_Init+0x32c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <HAL_GPIO_Init+0x20e>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a4b      	ldr	r2, [pc, #300]	; (8006b7c <HAL_GPIO_Init+0x330>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d101      	bne.n	8006a56 <HAL_GPIO_Init+0x20a>
 8006a52:	2307      	movs	r3, #7
 8006a54:	e00e      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a56:	2308      	movs	r3, #8
 8006a58:	e00c      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a5a:	2306      	movs	r3, #6
 8006a5c:	e00a      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a5e:	2305      	movs	r3, #5
 8006a60:	e008      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a62:	2304      	movs	r3, #4
 8006a64:	e006      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a66:	2303      	movs	r3, #3
 8006a68:	e004      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e002      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <HAL_GPIO_Init+0x228>
 8006a72:	2300      	movs	r3, #0
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	f002 0203 	and.w	r2, r2, #3
 8006a7a:	0092      	lsls	r2, r2, #2
 8006a7c:	4093      	lsls	r3, r2
 8006a7e:	69ba      	ldr	r2, [r7, #24]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a84:	4935      	ldr	r1, [pc, #212]	; (8006b5c <HAL_GPIO_Init+0x310>)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	089b      	lsrs	r3, r3, #2
 8006a8a:	3302      	adds	r3, #2
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a92:	4b3b      	ldr	r3, [pc, #236]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006ab6:	4a32      	ldr	r2, [pc, #200]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006abc:	4b30      	ldr	r3, [pc, #192]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ae0:	4a27      	ldr	r2, [pc, #156]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ae6:	4b26      	ldr	r3, [pc, #152]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b0a:	4a1d      	ldr	r2, [pc, #116]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b10:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b34:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <HAL_GPIO_Init+0x334>)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	2b0f      	cmp	r3, #15
 8006b44:	f67f ae90 	bls.w	8006868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	3724      	adds	r7, #36	; 0x24
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	40013800 	.word	0x40013800
 8006b60:	40020000 	.word	0x40020000
 8006b64:	40020400 	.word	0x40020400
 8006b68:	40020800 	.word	0x40020800
 8006b6c:	40020c00 	.word	0x40020c00
 8006b70:	40021000 	.word	0x40021000
 8006b74:	40021400 	.word	0x40021400
 8006b78:	40021800 	.word	0x40021800
 8006b7c:	40021c00 	.word	0x40021c00
 8006b80:	40013c00 	.word	0x40013c00

08006b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	887b      	ldrh	r3, [r7, #2]
 8006b96:	4013      	ands	r3, r2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
 8006ba0:	e001      	b.n	8006ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	807b      	strh	r3, [r7, #2]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bc4:	787b      	ldrb	r3, [r7, #1]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bca:	887a      	ldrh	r2, [r7, #2]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bd0:	e003      	b.n	8006bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bd2:	887b      	ldrh	r3, [r7, #2]
 8006bd4:	041a      	lsls	r2, r3, #16
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	619a      	str	r2, [r3, #24]
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e12b      	b.n	8006e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fb fbf2 	bl	80023f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c4c:	f001 fbd8 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 8006c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4a81      	ldr	r2, [pc, #516]	; (8006e5c <HAL_I2C_Init+0x274>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d807      	bhi.n	8006c6c <HAL_I2C_Init+0x84>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4a80      	ldr	r2, [pc, #512]	; (8006e60 <HAL_I2C_Init+0x278>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	bf94      	ite	ls
 8006c64:	2301      	movls	r3, #1
 8006c66:	2300      	movhi	r3, #0
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	e006      	b.n	8006c7a <HAL_I2C_Init+0x92>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a7d      	ldr	r2, [pc, #500]	; (8006e64 <HAL_I2C_Init+0x27c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	bf94      	ite	ls
 8006c74:	2301      	movls	r3, #1
 8006c76:	2300      	movhi	r3, #0
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0e7      	b.n	8006e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a78      	ldr	r2, [pc, #480]	; (8006e68 <HAL_I2C_Init+0x280>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	0c9b      	lsrs	r3, r3, #18
 8006c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a6a      	ldr	r2, [pc, #424]	; (8006e5c <HAL_I2C_Init+0x274>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d802      	bhi.n	8006cbc <HAL_I2C_Init+0xd4>
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	e009      	b.n	8006cd0 <HAL_I2C_Init+0xe8>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006cc2:	fb02 f303 	mul.w	r3, r2, r3
 8006cc6:	4a69      	ldr	r2, [pc, #420]	; (8006e6c <HAL_I2C_Init+0x284>)
 8006cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ccc:	099b      	lsrs	r3, r3, #6
 8006cce:	3301      	adds	r3, #1
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6812      	ldr	r2, [r2, #0]
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	495c      	ldr	r1, [pc, #368]	; (8006e5c <HAL_I2C_Init+0x274>)
 8006cec:	428b      	cmp	r3, r1
 8006cee:	d819      	bhi.n	8006d24 <HAL_I2C_Init+0x13c>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	1e59      	subs	r1, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	005b      	lsls	r3, r3, #1
 8006cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d04:	400b      	ands	r3, r1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <HAL_I2C_Init+0x138>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1e59      	subs	r1, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d18:	3301      	adds	r3, #1
 8006d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1e:	e051      	b.n	8006dc4 <HAL_I2C_Init+0x1dc>
 8006d20:	2304      	movs	r3, #4
 8006d22:	e04f      	b.n	8006dc4 <HAL_I2C_Init+0x1dc>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d111      	bne.n	8006d50 <HAL_I2C_Init+0x168>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	1e58      	subs	r0, r3, #1
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6859      	ldr	r1, [r3, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	440b      	add	r3, r1
 8006d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d3e:	3301      	adds	r3, #1
 8006d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bf0c      	ite	eq
 8006d48:	2301      	moveq	r3, #1
 8006d4a:	2300      	movne	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	e012      	b.n	8006d76 <HAL_I2C_Init+0x18e>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	1e58      	subs	r0, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6859      	ldr	r1, [r3, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	0099      	lsls	r1, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d66:	3301      	adds	r3, #1
 8006d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d001      	beq.n	8006d7e <HAL_I2C_Init+0x196>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e022      	b.n	8006dc4 <HAL_I2C_Init+0x1dc>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10e      	bne.n	8006da4 <HAL_I2C_Init+0x1bc>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1e58      	subs	r0, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6859      	ldr	r1, [r3, #4]
 8006d8e:	460b      	mov	r3, r1
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	440b      	add	r3, r1
 8006d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da2:	e00f      	b.n	8006dc4 <HAL_I2C_Init+0x1dc>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	1e58      	subs	r0, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6859      	ldr	r1, [r3, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	0099      	lsls	r1, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	6809      	ldr	r1, [r1, #0]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69da      	ldr	r2, [r3, #28]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6911      	ldr	r1, [r2, #16]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68d2      	ldr	r2, [r2, #12]
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	695a      	ldr	r2, [r3, #20]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f042 0201 	orr.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	000186a0 	.word	0x000186a0
 8006e60:	001e847f 	.word	0x001e847f
 8006e64:	003d08ff 	.word	0x003d08ff
 8006e68:	431bde83 	.word	0x431bde83
 8006e6c:	10624dd3 	.word	0x10624dd3

08006e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e8a:	f7fe fe51 	bl	8005b30 <HAL_GetTick>
 8006e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	f040 80d9 	bne.w	8007050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	2319      	movs	r3, #25
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	496d      	ldr	r1, [pc, #436]	; (800705c <HAL_I2C_Mem_Write+0x1ec>)
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fc7f 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e0cc      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_I2C_Mem_Write+0x56>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e0c5      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d007      	beq.n	8006eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2221      	movs	r2, #33	; 0x21
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2240      	movs	r2, #64	; 0x40
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a3a      	ldr	r2, [r7, #32]
 8006f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4a4d      	ldr	r2, [pc, #308]	; (8007060 <HAL_I2C_Mem_Write+0x1f0>)
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f2e:	88f8      	ldrh	r0, [r7, #6]
 8006f30:	893a      	ldrh	r2, [r7, #8]
 8006f32:	8979      	ldrh	r1, [r7, #10]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	9301      	str	r3, [sp, #4]
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fab6 	bl	80074b0 <I2C_RequestMemoryWrite>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d052      	beq.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e081      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fd00 	bl	8007958 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00d      	beq.n	8006f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d107      	bne.n	8006f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e06b      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d017      	beq.n	8006ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1aa      	bne.n	8006f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fcec 	bl	80079da <I2C_WaitOnBTFFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00d      	beq.n	8007024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	2b04      	cmp	r3, #4
 800700e:	d107      	bne.n	8007020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800701e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e016      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	e000      	b.n	8007052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007050:	2302      	movs	r3, #2
  }
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	00100002 	.word	0x00100002
 8007060:	ffff0000 	.word	0xffff0000

08007064 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af02      	add	r7, sp, #8
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	817b      	strh	r3, [r7, #10]
 8007076:	460b      	mov	r3, r1
 8007078:	813b      	strh	r3, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800707e:	f7fe fd57 	bl	8005b30 <HAL_GetTick>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b20      	cmp	r3, #32
 800708e:	f040 8208 	bne.w	80074a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2319      	movs	r3, #25
 8007098:	2201      	movs	r2, #1
 800709a:	497b      	ldr	r1, [pc, #492]	; (8007288 <HAL_I2C_Mem_Read+0x224>)
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fb85 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
 80070aa:	e1fb      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_I2C_Mem_Read+0x56>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e1f4      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d007      	beq.n	80070e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2222      	movs	r2, #34	; 0x22
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2240      	movs	r2, #64	; 0x40
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800710a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007110:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a5b      	ldr	r2, [pc, #364]	; (800728c <HAL_I2C_Mem_Read+0x228>)
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007122:	88f8      	ldrh	r0, [r7, #6]
 8007124:	893a      	ldrh	r2, [r7, #8]
 8007126:	8979      	ldrh	r1, [r7, #10]
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4603      	mov	r3, r0
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fa52 	bl	80075dc <I2C_RequestMemoryRead>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e1b0      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d113      	bne.n	8007172 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800714a:	2300      	movs	r3, #0
 800714c:	623b      	str	r3, [r7, #32]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	623b      	str	r3, [r7, #32]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	623b      	str	r3, [r7, #32]
 800715e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e184      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007176:	2b01      	cmp	r3, #1
 8007178:	d11b      	bne.n	80071b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	695b      	ldr	r3, [r3, #20]
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	e164      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d11b      	bne.n	80071f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071da:	2300      	movs	r3, #0
 80071dc:	61bb      	str	r3, [r7, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	e144      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007208:	e138      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800720e:	2b03      	cmp	r3, #3
 8007210:	f200 80f1 	bhi.w	80073f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007218:	2b01      	cmp	r3, #1
 800721a:	d123      	bne.n	8007264 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800721c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fc1b 	bl	8007a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e139      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	b2d2      	uxtb	r2, r2
 800723c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007262:	e10b      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007268:	2b02      	cmp	r3, #2
 800726a:	d14e      	bne.n	800730a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2200      	movs	r2, #0
 8007274:	4906      	ldr	r1, [pc, #24]	; (8007290 <HAL_I2C_Mem_Read+0x22c>)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fa98 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d008      	beq.n	8007294 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e10e      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
 8007286:	bf00      	nop
 8007288:	00100002 	.word	0x00100002
 800728c:	ffff0000 	.word	0xffff0000
 8007290:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691a      	ldr	r2, [r3, #16]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	1c5a      	adds	r2, r3, #1
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007308:	e0b8      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	2200      	movs	r2, #0
 8007312:	4966      	ldr	r1, [pc, #408]	; (80074ac <HAL_I2C_Mem_Read+0x448>)
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fa49 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0bf      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691a      	ldr	r2, [r3, #16]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	b2d2      	uxtb	r2, r2
 8007340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007350:	3b01      	subs	r3, #1
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	2200      	movs	r2, #0
 800736e:	494f      	ldr	r1, [pc, #316]	; (80074ac <HAL_I2C_Mem_Read+0x448>)
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 fa1b 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e091      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800738e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ac:	3b01      	subs	r3, #1
 80073ae:	b29a      	uxth	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691a      	ldr	r2, [r3, #16]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073f4:	e042      	b.n	800747c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 fb2e 	bl	8007a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e04c      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007426:	3b01      	subs	r3, #1
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b04      	cmp	r3, #4
 8007448:	d118      	bne.n	800747c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007472:	b29b      	uxth	r3, r3
 8007474:	3b01      	subs	r3, #1
 8007476:	b29a      	uxth	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007480:	2b00      	cmp	r3, #0
 8007482:	f47f aec2 	bne.w	800720a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	e000      	b.n	80074a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80074a2:	2302      	movs	r3, #2
  }
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3728      	adds	r7, #40	; 0x28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	00010004 	.word	0x00010004

080074b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b088      	sub	sp, #32
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	461a      	mov	r2, r3
 80074be:	4603      	mov	r3, r0
 80074c0:	817b      	strh	r3, [r7, #10]
 80074c2:	460b      	mov	r3, r1
 80074c4:	813b      	strh	r3, [r7, #8]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f960 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00d      	beq.n	800750e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007500:	d103      	bne.n	800750a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e05f      	b.n	80075ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800750e:	897b      	ldrh	r3, [r7, #10]
 8007510:	b2db      	uxtb	r3, r3
 8007512:	461a      	mov	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800751c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	6a3a      	ldr	r2, [r7, #32]
 8007522:	492d      	ldr	r1, [pc, #180]	; (80075d8 <I2C_RequestMemoryWrite+0x128>)
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f998 	bl	800785a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e04c      	b.n	80075ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800754a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754c:	6a39      	ldr	r1, [r7, #32]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fa02 	bl	8007958 <I2C_WaitOnTXEFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00d      	beq.n	8007576 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	2b04      	cmp	r3, #4
 8007560:	d107      	bne.n	8007572 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007570:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e02b      	b.n	80075ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007576:	88fb      	ldrh	r3, [r7, #6]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d105      	bne.n	8007588 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	611a      	str	r2, [r3, #16]
 8007586:	e021      	b.n	80075cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007588:	893b      	ldrh	r3, [r7, #8]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	b29b      	uxth	r3, r3
 800758e:	b2da      	uxtb	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007598:	6a39      	ldr	r1, [r7, #32]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 f9dc 	bl	8007958 <I2C_WaitOnTXEFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00d      	beq.n	80075c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d107      	bne.n	80075be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e005      	b.n	80075ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075c2:	893b      	ldrh	r3, [r7, #8]
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	00010002 	.word	0x00010002

080075dc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	4608      	mov	r0, r1
 80075e6:	4611      	mov	r1, r2
 80075e8:	461a      	mov	r2, r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	817b      	strh	r3, [r7, #10]
 80075ee:	460b      	mov	r3, r1
 80075f0:	813b      	strh	r3, [r7, #8]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007604:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007614:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	2200      	movs	r2, #0
 800761e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f8c2 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763c:	d103      	bne.n	8007646 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007644:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e0aa      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800764a:	897b      	ldrh	r3, [r7, #10]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007658:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	6a3a      	ldr	r2, [r7, #32]
 800765e:	4952      	ldr	r1, [pc, #328]	; (80077a8 <I2C_RequestMemoryRead+0x1cc>)
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f8fa 	bl	800785a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e097      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	695b      	ldr	r3, [r3, #20]
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007688:	6a39      	ldr	r1, [r7, #32]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f964 	bl	8007958 <I2C_WaitOnTXEFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00d      	beq.n	80076b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	2b04      	cmp	r3, #4
 800769c:	d107      	bne.n	80076ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e076      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d105      	bne.n	80076c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076b8:	893b      	ldrh	r3, [r7, #8]
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	611a      	str	r2, [r3, #16]
 80076c2:	e021      	b.n	8007708 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80076c4:	893b      	ldrh	r3, [r7, #8]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d4:	6a39      	ldr	r1, [r7, #32]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f93e 	bl	8007958 <I2C_WaitOnTXEFlagUntilTimeout>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	2b04      	cmp	r3, #4
 80076e8:	d107      	bne.n	80076fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e050      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80076fe:	893b      	ldrh	r3, [r7, #8]
 8007700:	b2da      	uxtb	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770a:	6a39      	ldr	r1, [r7, #32]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f923 	bl	8007958 <I2C_WaitOnTXEFlagUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00d      	beq.n	8007734 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771c:	2b04      	cmp	r3, #4
 800771e:	d107      	bne.n	8007730 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800772e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e035      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007742:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	9300      	str	r3, [sp, #0]
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	2200      	movs	r2, #0
 800774c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 f82b 	bl	80077ac <I2C_WaitOnFlagUntilTimeout>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00d      	beq.n	8007778 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800776a:	d103      	bne.n	8007774 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e013      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007778:	897b      	ldrh	r3, [r7, #10]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	f043 0301 	orr.w	r3, r3, #1
 8007780:	b2da      	uxtb	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	4906      	ldr	r1, [pc, #24]	; (80077a8 <I2C_RequestMemoryRead+0x1cc>)
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f000 f863 	bl	800785a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e000      	b.n	80077a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	00010002 	.word	0x00010002

080077ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077bc:	e025      	b.n	800780a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d021      	beq.n	800780a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077c6:	f7fe f9b3 	bl	8005b30 <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d302      	bcc.n	80077dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d116      	bne.n	800780a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e023      	b.n	8007852 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	0c1b      	lsrs	r3, r3, #16
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d10d      	bne.n	8007830 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	43da      	mvns	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4013      	ands	r3, r2
 8007820:	b29b      	uxth	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	bf0c      	ite	eq
 8007826:	2301      	moveq	r3, #1
 8007828:	2300      	movne	r3, #0
 800782a:	b2db      	uxtb	r3, r3
 800782c:	461a      	mov	r2, r3
 800782e:	e00c      	b.n	800784a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	43da      	mvns	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4013      	ands	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf0c      	ite	eq
 8007842:	2301      	moveq	r3, #1
 8007844:	2300      	movne	r3, #0
 8007846:	b2db      	uxtb	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	429a      	cmp	r2, r3
 800784e:	d0b6      	beq.n	80077be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
 8007866:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007868:	e051      	b.n	800790e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007878:	d123      	bne.n	80078c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007888:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007892:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	f043 0204 	orr.w	r2, r3, #4
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e046      	b.n	8007950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c8:	d021      	beq.n	800790e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ca:	f7fe f931 	bl	8005b30 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d302      	bcc.n	80078e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d116      	bne.n	800790e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f043 0220 	orr.w	r2, r3, #32
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e020      	b.n	8007950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	0c1b      	lsrs	r3, r3, #16
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10c      	bne.n	8007932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	43da      	mvns	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	4013      	ands	r3, r2
 8007924:	b29b      	uxth	r3, r3
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf14      	ite	ne
 800792a:	2301      	movne	r3, #1
 800792c:	2300      	moveq	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e00b      	b.n	800794a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	43da      	mvns	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	4013      	ands	r3, r2
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d18d      	bne.n	800786a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007964:	e02d      	b.n	80079c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f8ce 	bl	8007b08 <I2C_IsAcknowledgeFailed>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e02d      	b.n	80079d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d021      	beq.n	80079c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797e:	f7fe f8d7 	bl	8005b30 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	429a      	cmp	r2, r3
 800798c:	d302      	bcc.n	8007994 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d116      	bne.n	80079c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e007      	b.n	80079d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d1ca      	bne.n	8007966 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b084      	sub	sp, #16
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80079e6:	e02d      	b.n	8007a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f88d 	bl	8007b08 <I2C_IsAcknowledgeFailed>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e02d      	b.n	8007a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d021      	beq.n	8007a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a00:	f7fe f896 	bl	8005b30 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d302      	bcc.n	8007a16 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d116      	bne.n	8007a44 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e007      	b.n	8007a54 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d1ca      	bne.n	80079e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a68:	e042      	b.n	8007af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	f003 0310 	and.w	r3, r3, #16
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d119      	bne.n	8007aac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f06f 0210 	mvn.w	r2, #16
 8007a80:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e029      	b.n	8007b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aac:	f7fe f840 	bl	8005b30 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d302      	bcc.n	8007ac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d116      	bne.n	8007af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	f043 0220 	orr.w	r2, r3, #32
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e007      	b.n	8007b00 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d1b5      	bne.n	8007a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1e:	d11b      	bne.n	8007b58 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b28:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	f043 0204 	orr.w	r2, r3, #4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e000      	b.n	8007b5a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e264      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d075      	beq.n	8007c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b86:	4ba3      	ldr	r3, [pc, #652]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 030c 	and.w	r3, r3, #12
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d00c      	beq.n	8007bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b92:	4ba0      	ldr	r3, [pc, #640]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007b9a:	2b08      	cmp	r3, #8
 8007b9c:	d112      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b9e:	4b9d      	ldr	r3, [pc, #628]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007baa:	d10b      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bac:	4b99      	ldr	r3, [pc, #612]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d05b      	beq.n	8007c70 <HAL_RCC_OscConfig+0x108>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d157      	bne.n	8007c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e23f      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bcc:	d106      	bne.n	8007bdc <HAL_RCC_OscConfig+0x74>
 8007bce:	4b91      	ldr	r3, [pc, #580]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a90      	ldr	r2, [pc, #576]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	e01d      	b.n	8007c18 <HAL_RCC_OscConfig+0xb0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x98>
 8007be6:	4b8b      	ldr	r3, [pc, #556]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a8a      	ldr	r2, [pc, #552]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bf0:	6013      	str	r3, [r2, #0]
 8007bf2:	4b88      	ldr	r3, [pc, #544]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a87      	ldr	r2, [pc, #540]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bfc:	6013      	str	r3, [r2, #0]
 8007bfe:	e00b      	b.n	8007c18 <HAL_RCC_OscConfig+0xb0>
 8007c00:	4b84      	ldr	r3, [pc, #528]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a83      	ldr	r2, [pc, #524]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	4b81      	ldr	r3, [pc, #516]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a80      	ldr	r2, [pc, #512]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d013      	beq.n	8007c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c20:	f7fd ff86 	bl	8005b30 <HAL_GetTick>
 8007c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c26:	e008      	b.n	8007c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c28:	f7fd ff82 	bl	8005b30 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	2b64      	cmp	r3, #100	; 0x64
 8007c34:	d901      	bls.n	8007c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e204      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c3a:	4b76      	ldr	r3, [pc, #472]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f0      	beq.n	8007c28 <HAL_RCC_OscConfig+0xc0>
 8007c46:	e014      	b.n	8007c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c48:	f7fd ff72 	bl	8005b30 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c50:	f7fd ff6e 	bl	8005b30 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b64      	cmp	r3, #100	; 0x64
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e1f0      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c62:	4b6c      	ldr	r3, [pc, #432]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0xe8>
 8007c6e:	e000      	b.n	8007c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d063      	beq.n	8007d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c7e:	4b65      	ldr	r3, [pc, #404]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 030c 	and.w	r3, r3, #12
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c8a:	4b62      	ldr	r3, [pc, #392]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d11c      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c96:	4b5f      	ldr	r3, [pc, #380]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d116      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ca2:	4b5c      	ldr	r3, [pc, #368]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d005      	beq.n	8007cba <HAL_RCC_OscConfig+0x152>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d001      	beq.n	8007cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e1c4      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cba:	4b56      	ldr	r3, [pc, #344]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	4952      	ldr	r1, [pc, #328]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cce:	e03a      	b.n	8007d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d020      	beq.n	8007d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cd8:	4b4f      	ldr	r3, [pc, #316]	; (8007e18 <HAL_RCC_OscConfig+0x2b0>)
 8007cda:	2201      	movs	r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cde:	f7fd ff27 	bl	8005b30 <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ce6:	f7fd ff23 	bl	8005b30 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e1a5      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cf8:	4b46      	ldr	r3, [pc, #280]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d04:	4b43      	ldr	r3, [pc, #268]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	00db      	lsls	r3, r3, #3
 8007d12:	4940      	ldr	r1, [pc, #256]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	600b      	str	r3, [r1, #0]
 8007d18:	e015      	b.n	8007d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d1a:	4b3f      	ldr	r3, [pc, #252]	; (8007e18 <HAL_RCC_OscConfig+0x2b0>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d20:	f7fd ff06 	bl	8005b30 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d28:	f7fd ff02 	bl	8005b30 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e184      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d3a:	4b36      	ldr	r3, [pc, #216]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0302 	and.w	r3, r3, #2
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d030      	beq.n	8007db4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d016      	beq.n	8007d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d5a:	4b30      	ldr	r3, [pc, #192]	; (8007e1c <HAL_RCC_OscConfig+0x2b4>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d60:	f7fd fee6 	bl	8005b30 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d68:	f7fd fee2 	bl	8005b30 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e164      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7e:	f003 0302 	and.w	r3, r3, #2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0x200>
 8007d86:	e015      	b.n	8007db4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d88:	4b24      	ldr	r3, [pc, #144]	; (8007e1c <HAL_RCC_OscConfig+0x2b4>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d8e:	f7fd fecf 	bl	8005b30 <HAL_GetTick>
 8007d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d96:	f7fd fecb 	bl	8005b30 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e14d      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007da8:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1f0      	bne.n	8007d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80a0 	beq.w	8007f02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dc6:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10f      	bne.n	8007df2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60bb      	str	r3, [r7, #8]
 8007dd6:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	4a0e      	ldr	r2, [pc, #56]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007de0:	6413      	str	r3, [r2, #64]	; 0x40
 8007de2:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <HAL_RCC_OscConfig+0x2ac>)
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dea:	60bb      	str	r3, [r7, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007dee:	2301      	movs	r3, #1
 8007df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007df2:	4b0b      	ldr	r3, [pc, #44]	; (8007e20 <HAL_RCC_OscConfig+0x2b8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d121      	bne.n	8007e42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <HAL_RCC_OscConfig+0x2b8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a07      	ldr	r2, [pc, #28]	; (8007e20 <HAL_RCC_OscConfig+0x2b8>)
 8007e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e0a:	f7fd fe91 	bl	8005b30 <HAL_GetTick>
 8007e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e10:	e011      	b.n	8007e36 <HAL_RCC_OscConfig+0x2ce>
 8007e12:	bf00      	nop
 8007e14:	40023800 	.word	0x40023800
 8007e18:	42470000 	.word	0x42470000
 8007e1c:	42470e80 	.word	0x42470e80
 8007e20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e24:	f7fd fe84 	bl	8005b30 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e106      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e36:	4b85      	ldr	r3, [pc, #532]	; (800804c <HAL_RCC_OscConfig+0x4e4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f0      	beq.n	8007e24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d106      	bne.n	8007e58 <HAL_RCC_OscConfig+0x2f0>
 8007e4a:	4b81      	ldr	r3, [pc, #516]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4e:	4a80      	ldr	r2, [pc, #512]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e50:	f043 0301 	orr.w	r3, r3, #1
 8007e54:	6713      	str	r3, [r2, #112]	; 0x70
 8007e56:	e01c      	b.n	8007e92 <HAL_RCC_OscConfig+0x32a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	2b05      	cmp	r3, #5
 8007e5e:	d10c      	bne.n	8007e7a <HAL_RCC_OscConfig+0x312>
 8007e60:	4b7b      	ldr	r3, [pc, #492]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e64:	4a7a      	ldr	r2, [pc, #488]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e66:	f043 0304 	orr.w	r3, r3, #4
 8007e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e6c:	4b78      	ldr	r3, [pc, #480]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	4a77      	ldr	r2, [pc, #476]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	6713      	str	r3, [r2, #112]	; 0x70
 8007e78:	e00b      	b.n	8007e92 <HAL_RCC_OscConfig+0x32a>
 8007e7a:	4b75      	ldr	r3, [pc, #468]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	4a74      	ldr	r2, [pc, #464]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	6713      	str	r3, [r2, #112]	; 0x70
 8007e86:	4b72      	ldr	r3, [pc, #456]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8a:	4a71      	ldr	r2, [pc, #452]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007e8c:	f023 0304 	bic.w	r3, r3, #4
 8007e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d015      	beq.n	8007ec6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e9a:	f7fd fe49 	bl	8005b30 <HAL_GetTick>
 8007e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ea0:	e00a      	b.n	8007eb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ea2:	f7fd fe45 	bl	8005b30 <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d901      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e0c5      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eb8:	4b65      	ldr	r3, [pc, #404]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0ee      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x33a>
 8007ec4:	e014      	b.n	8007ef0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ec6:	f7fd fe33 	bl	8005b30 <HAL_GetTick>
 8007eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ecc:	e00a      	b.n	8007ee4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ece:	f7fd fe2f 	bl	8005b30 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e0af      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ee4:	4b5a      	ldr	r3, [pc, #360]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1ee      	bne.n	8007ece <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d105      	bne.n	8007f02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ef6:	4b56      	ldr	r3, [pc, #344]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	4a55      	ldr	r2, [pc, #340]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 809b 	beq.w	8008042 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f0c:	4b50      	ldr	r3, [pc, #320]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 030c 	and.w	r3, r3, #12
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d05c      	beq.n	8007fd2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d141      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f20:	4b4c      	ldr	r3, [pc, #304]	; (8008054 <HAL_RCC_OscConfig+0x4ec>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f26:	f7fd fe03 	bl	8005b30 <HAL_GetTick>
 8007f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f2e:	f7fd fdff 	bl	8005b30 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e081      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f40:	4b43      	ldr	r3, [pc, #268]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f0      	bne.n	8007f2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	019b      	lsls	r3, r3, #6
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	3b01      	subs	r3, #1
 8007f66:	041b      	lsls	r3, r3, #16
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	4937      	ldr	r1, [pc, #220]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f76:	4b37      	ldr	r3, [pc, #220]	; (8008054 <HAL_RCC_OscConfig+0x4ec>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f7c:	f7fd fdd8 	bl	8005b30 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f84:	f7fd fdd4 	bl	8005b30 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e056      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f96:	4b2e      	ldr	r3, [pc, #184]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <HAL_RCC_OscConfig+0x41c>
 8007fa2:	e04e      	b.n	8008042 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa4:	4b2b      	ldr	r3, [pc, #172]	; (8008054 <HAL_RCC_OscConfig+0x4ec>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007faa:	f7fd fdc1 	bl	8005b30 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fb0:	e008      	b.n	8007fc4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fb2:	f7fd fdbd 	bl	8005b30 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d901      	bls.n	8007fc4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e03f      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fc4:	4b22      	ldr	r3, [pc, #136]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1f0      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x44a>
 8007fd0:	e037      	b.n	8008042 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e032      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fde:	4b1c      	ldr	r3, [pc, #112]	; (8008050 <HAL_RCC_OscConfig+0x4e8>)
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d028      	beq.n	800803e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d121      	bne.n	800803e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008004:	429a      	cmp	r2, r3
 8008006:	d11a      	bne.n	800803e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800800e:	4013      	ands	r3, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008014:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008016:	4293      	cmp	r3, r2
 8008018:	d111      	bne.n	800803e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008024:	085b      	lsrs	r3, r3, #1
 8008026:	3b01      	subs	r3, #1
 8008028:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800802a:	429a      	cmp	r2, r3
 800802c:	d107      	bne.n	800803e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800803a:	429a      	cmp	r2, r3
 800803c:	d001      	beq.n	8008042 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	40007000 	.word	0x40007000
 8008050:	40023800 	.word	0x40023800
 8008054:	42470060 	.word	0x42470060

08008058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e0cc      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800806c:	4b68      	ldr	r3, [pc, #416]	; (8008210 <HAL_RCC_ClockConfig+0x1b8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0307 	and.w	r3, r3, #7
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	429a      	cmp	r2, r3
 8008078:	d90c      	bls.n	8008094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800807a:	4b65      	ldr	r3, [pc, #404]	; (8008210 <HAL_RCC_ClockConfig+0x1b8>)
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	b2d2      	uxtb	r2, r2
 8008080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008082:	4b63      	ldr	r3, [pc, #396]	; (8008210 <HAL_RCC_ClockConfig+0x1b8>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e0b8      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d020      	beq.n	80080e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080ac:	4b59      	ldr	r3, [pc, #356]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	4a58      	ldr	r2, [pc, #352]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80080b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0308 	and.w	r3, r3, #8
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80080c4:	4b53      	ldr	r3, [pc, #332]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	4a52      	ldr	r2, [pc, #328]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80080ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080d0:	4b50      	ldr	r3, [pc, #320]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	494d      	ldr	r1, [pc, #308]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d044      	beq.n	8008178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d107      	bne.n	8008106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080f6:	4b47      	ldr	r3, [pc, #284]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d119      	bne.n	8008136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e07f      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d003      	beq.n	8008116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008112:	2b03      	cmp	r3, #3
 8008114:	d107      	bne.n	8008126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008116:	4b3f      	ldr	r3, [pc, #252]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e06f      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008126:	4b3b      	ldr	r3, [pc, #236]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e067      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008136:	4b37      	ldr	r3, [pc, #220]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f023 0203 	bic.w	r2, r3, #3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	4934      	ldr	r1, [pc, #208]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 8008144:	4313      	orrs	r3, r2
 8008146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008148:	f7fd fcf2 	bl	8005b30 <HAL_GetTick>
 800814c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800814e:	e00a      	b.n	8008166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008150:	f7fd fcee 	bl	8005b30 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	4293      	cmp	r3, r2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e04f      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008166:	4b2b      	ldr	r3, [pc, #172]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 020c 	and.w	r2, r3, #12
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	429a      	cmp	r2, r3
 8008176:	d1eb      	bne.n	8008150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <HAL_RCC_ClockConfig+0x1b8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	429a      	cmp	r2, r3
 8008184:	d20c      	bcs.n	80081a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008186:	4b22      	ldr	r3, [pc, #136]	; (8008210 <HAL_RCC_ClockConfig+0x1b8>)
 8008188:	683a      	ldr	r2, [r7, #0]
 800818a:	b2d2      	uxtb	r2, r2
 800818c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800818e:	4b20      	ldr	r3, [pc, #128]	; (8008210 <HAL_RCC_ClockConfig+0x1b8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d001      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e032      	b.n	8008206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d008      	beq.n	80081be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081ac:	4b19      	ldr	r3, [pc, #100]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	4916      	ldr	r1, [pc, #88]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0308 	and.w	r3, r3, #8
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d009      	beq.n	80081de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081ca:	4b12      	ldr	r3, [pc, #72]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	490e      	ldr	r1, [pc, #56]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80081da:	4313      	orrs	r3, r2
 80081dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80081de:	f000 f821 	bl	8008224 <HAL_RCC_GetSysClockFreq>
 80081e2:	4602      	mov	r2, r0
 80081e4:	4b0b      	ldr	r3, [pc, #44]	; (8008214 <HAL_RCC_ClockConfig+0x1bc>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	091b      	lsrs	r3, r3, #4
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	490a      	ldr	r1, [pc, #40]	; (8008218 <HAL_RCC_ClockConfig+0x1c0>)
 80081f0:	5ccb      	ldrb	r3, [r1, r3]
 80081f2:	fa22 f303 	lsr.w	r3, r2, r3
 80081f6:	4a09      	ldr	r2, [pc, #36]	; (800821c <HAL_RCC_ClockConfig+0x1c4>)
 80081f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80081fa:	4b09      	ldr	r3, [pc, #36]	; (8008220 <HAL_RCC_ClockConfig+0x1c8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fd fc52 	bl	8005aa8 <HAL_InitTick>

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	40023c00 	.word	0x40023c00
 8008214:	40023800 	.word	0x40023800
 8008218:	0800ea98 	.word	0x0800ea98
 800821c:	20000038 	.word	0x20000038
 8008220:	20000074 	.word	0x20000074

08008224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008224:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	607b      	str	r3, [r7, #4]
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	2300      	movs	r3, #0
 8008236:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800823c:	4b67      	ldr	r3, [pc, #412]	; (80083dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	f003 030c 	and.w	r3, r3, #12
 8008244:	2b08      	cmp	r3, #8
 8008246:	d00d      	beq.n	8008264 <HAL_RCC_GetSysClockFreq+0x40>
 8008248:	2b08      	cmp	r3, #8
 800824a:	f200 80bd 	bhi.w	80083c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <HAL_RCC_GetSysClockFreq+0x34>
 8008252:	2b04      	cmp	r3, #4
 8008254:	d003      	beq.n	800825e <HAL_RCC_GetSysClockFreq+0x3a>
 8008256:	e0b7      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008258:	4b61      	ldr	r3, [pc, #388]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800825a:	60bb      	str	r3, [r7, #8]
       break;
 800825c:	e0b7      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800825e:	4b61      	ldr	r3, [pc, #388]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008260:	60bb      	str	r3, [r7, #8]
      break;
 8008262:	e0b4      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008264:	4b5d      	ldr	r3, [pc, #372]	; (80083dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800826c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800826e:	4b5b      	ldr	r3, [pc, #364]	; (80083dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d04d      	beq.n	8008316 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800827a:	4b58      	ldr	r3, [pc, #352]	; (80083dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	099b      	lsrs	r3, r3, #6
 8008280:	461a      	mov	r2, r3
 8008282:	f04f 0300 	mov.w	r3, #0
 8008286:	f240 10ff 	movw	r0, #511	; 0x1ff
 800828a:	f04f 0100 	mov.w	r1, #0
 800828e:	ea02 0800 	and.w	r8, r2, r0
 8008292:	ea03 0901 	and.w	r9, r3, r1
 8008296:	4640      	mov	r0, r8
 8008298:	4649      	mov	r1, r9
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	014b      	lsls	r3, r1, #5
 80082a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80082a8:	0142      	lsls	r2, r0, #5
 80082aa:	4610      	mov	r0, r2
 80082ac:	4619      	mov	r1, r3
 80082ae:	ebb0 0008 	subs.w	r0, r0, r8
 80082b2:	eb61 0109 	sbc.w	r1, r1, r9
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	f04f 0300 	mov.w	r3, #0
 80082be:	018b      	lsls	r3, r1, #6
 80082c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80082c4:	0182      	lsls	r2, r0, #6
 80082c6:	1a12      	subs	r2, r2, r0
 80082c8:	eb63 0301 	sbc.w	r3, r3, r1
 80082cc:	f04f 0000 	mov.w	r0, #0
 80082d0:	f04f 0100 	mov.w	r1, #0
 80082d4:	00d9      	lsls	r1, r3, #3
 80082d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082da:	00d0      	lsls	r0, r2, #3
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	eb12 0208 	adds.w	r2, r2, r8
 80082e4:	eb43 0309 	adc.w	r3, r3, r9
 80082e8:	f04f 0000 	mov.w	r0, #0
 80082ec:	f04f 0100 	mov.w	r1, #0
 80082f0:	0259      	lsls	r1, r3, #9
 80082f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80082f6:	0250      	lsls	r0, r2, #9
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4610      	mov	r0, r2
 80082fe:	4619      	mov	r1, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	461a      	mov	r2, r3
 8008304:	f04f 0300 	mov.w	r3, #0
 8008308:	f7f8 fc3e 	bl	8000b88 <__aeabi_uldivmod>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4613      	mov	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e04a      	b.n	80083ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008316:	4b31      	ldr	r3, [pc, #196]	; (80083dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	099b      	lsrs	r3, r3, #6
 800831c:	461a      	mov	r2, r3
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008326:	f04f 0100 	mov.w	r1, #0
 800832a:	ea02 0400 	and.w	r4, r2, r0
 800832e:	ea03 0501 	and.w	r5, r3, r1
 8008332:	4620      	mov	r0, r4
 8008334:	4629      	mov	r1, r5
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	014b      	lsls	r3, r1, #5
 8008340:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008344:	0142      	lsls	r2, r0, #5
 8008346:	4610      	mov	r0, r2
 8008348:	4619      	mov	r1, r3
 800834a:	1b00      	subs	r0, r0, r4
 800834c:	eb61 0105 	sbc.w	r1, r1, r5
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	f04f 0300 	mov.w	r3, #0
 8008358:	018b      	lsls	r3, r1, #6
 800835a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800835e:	0182      	lsls	r2, r0, #6
 8008360:	1a12      	subs	r2, r2, r0
 8008362:	eb63 0301 	sbc.w	r3, r3, r1
 8008366:	f04f 0000 	mov.w	r0, #0
 800836a:	f04f 0100 	mov.w	r1, #0
 800836e:	00d9      	lsls	r1, r3, #3
 8008370:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008374:	00d0      	lsls	r0, r2, #3
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	1912      	adds	r2, r2, r4
 800837c:	eb45 0303 	adc.w	r3, r5, r3
 8008380:	f04f 0000 	mov.w	r0, #0
 8008384:	f04f 0100 	mov.w	r1, #0
 8008388:	0299      	lsls	r1, r3, #10
 800838a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800838e:	0290      	lsls	r0, r2, #10
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4610      	mov	r0, r2
 8008396:	4619      	mov	r1, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	461a      	mov	r2, r3
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	f7f8 fbf2 	bl	8000b88 <__aeabi_uldivmod>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4613      	mov	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	0c1b      	lsrs	r3, r3, #16
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	3301      	adds	r3, #1
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c4:	60bb      	str	r3, [r7, #8]
      break;
 80083c6:	e002      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083c8:	4b05      	ldr	r3, [pc, #20]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80083ca:	60bb      	str	r3, [r7, #8]
      break;
 80083cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083ce:	68bb      	ldr	r3, [r7, #8]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	00f42400 	.word	0x00f42400
 80083e4:	007a1200 	.word	0x007a1200

080083e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083ec:	4b03      	ldr	r3, [pc, #12]	; (80083fc <HAL_RCC_GetHCLKFreq+0x14>)
 80083ee:	681b      	ldr	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000038 	.word	0x20000038

08008400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008404:	f7ff fff0 	bl	80083e8 <HAL_RCC_GetHCLKFreq>
 8008408:	4602      	mov	r2, r0
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	0a9b      	lsrs	r3, r3, #10
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	4903      	ldr	r1, [pc, #12]	; (8008424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008416:	5ccb      	ldrb	r3, [r1, r3]
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800841c:	4618      	mov	r0, r3
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40023800 	.word	0x40023800
 8008424:	0800eaa8 	.word	0x0800eaa8

08008428 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e07b      	b.n	8008532 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	d108      	bne.n	8008454 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800844a:	d009      	beq.n	8008460 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	61da      	str	r2, [r3, #28]
 8008452:	e005      	b.n	8008460 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d106      	bne.n	8008480 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fb ffe6 	bl	800444c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008496:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084a8:	431a      	orrs	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084d0:	431a      	orrs	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e4:	ea42 0103 	orr.w	r1, r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	0c1b      	lsrs	r3, r3, #16
 80084fe:	f003 0104 	and.w	r1, r3, #4
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	f003 0210 	and.w	r2, r3, #16
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b088      	sub	sp, #32
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008554:	2b01      	cmp	r3, #1
 8008556:	d101      	bne.n	800855c <HAL_SPI_Transmit+0x22>
 8008558:	2302      	movs	r3, #2
 800855a:	e126      	b.n	80087aa <HAL_SPI_Transmit+0x270>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008564:	f7fd fae4 	bl	8005b30 <HAL_GetTick>
 8008568:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b01      	cmp	r3, #1
 8008578:	d002      	beq.n	8008580 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800857a:	2302      	movs	r3, #2
 800857c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800857e:	e10b      	b.n	8008798 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <HAL_SPI_Transmit+0x52>
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d102      	bne.n	8008592 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008590:	e102      	b.n	8008798 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2203      	movs	r2, #3
 8008596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	88fa      	ldrh	r2, [r7, #6]
 80085aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	88fa      	ldrh	r2, [r7, #6]
 80085b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d8:	d10f      	bne.n	80085fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	d007      	beq.n	8008618 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008616:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008620:	d14b      	bne.n	80086ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <HAL_SPI_Transmit+0xf6>
 800862a:	8afb      	ldrh	r3, [r7, #22]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d13e      	bne.n	80086ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008634:	881a      	ldrh	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	1c9a      	adds	r2, r3, #2
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008654:	e02b      	b.n	80086ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b02      	cmp	r3, #2
 8008662:	d112      	bne.n	800868a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	881a      	ldrh	r2, [r3, #0]
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008674:	1c9a      	adds	r2, r3, #2
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800867e:	b29b      	uxth	r3, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	b29a      	uxth	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	86da      	strh	r2, [r3, #54]	; 0x36
 8008688:	e011      	b.n	80086ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800868a:	f7fd fa51 	bl	8005b30 <HAL_GetTick>
 800868e:	4602      	mov	r2, r0
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d803      	bhi.n	80086a2 <HAL_SPI_Transmit+0x168>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d102      	bne.n	80086a8 <HAL_SPI_Transmit+0x16e>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d102      	bne.n	80086ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80086ac:	e074      	b.n	8008798 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1ce      	bne.n	8008656 <HAL_SPI_Transmit+0x11c>
 80086b8:	e04c      	b.n	8008754 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <HAL_SPI_Transmit+0x18e>
 80086c2:	8afb      	ldrh	r3, [r7, #22]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d140      	bne.n	800874a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	330c      	adds	r3, #12
 80086d2:	7812      	ldrb	r2, [r2, #0]
 80086d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80086ee:	e02c      	b.n	800874a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d113      	bne.n	8008726 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	330c      	adds	r3, #12
 8008708:	7812      	ldrb	r2, [r2, #0]
 800870a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	86da      	strh	r2, [r3, #54]	; 0x36
 8008724:	e011      	b.n	800874a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008726:	f7fd fa03 	bl	8005b30 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	683a      	ldr	r2, [r7, #0]
 8008732:	429a      	cmp	r2, r3
 8008734:	d803      	bhi.n	800873e <HAL_SPI_Transmit+0x204>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800873c:	d102      	bne.n	8008744 <HAL_SPI_Transmit+0x20a>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008748:	e026      	b.n	8008798 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1cd      	bne.n	80086f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fbcb 	bl	8008ef4 <SPI_EndRxTxTransaction>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2220      	movs	r2, #32
 8008768:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008772:	2300      	movs	r3, #0
 8008774:	613b      	str	r3, [r7, #16]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	613b      	str	r3, [r7, #16]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	77fb      	strb	r3, [r7, #31]
 8008794:	e000      	b.n	8008798 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008796:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80087a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3720      	adds	r7, #32
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b088      	sub	sp, #32
 80087b6:	af02      	add	r7, sp, #8
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	4613      	mov	r3, r2
 80087c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ce:	d112      	bne.n	80087f6 <HAL_SPI_Receive+0x44>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10e      	bne.n	80087f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2204      	movs	r2, #4
 80087dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087e0:	88fa      	ldrh	r2, [r7, #6]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	4613      	mov	r3, r2
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	68b9      	ldr	r1, [r7, #8]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f8f1 	bl	80089d4 <HAL_SPI_TransmitReceive>
 80087f2:	4603      	mov	r3, r0
 80087f4:	e0ea      	b.n	80089cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d101      	bne.n	8008804 <HAL_SPI_Receive+0x52>
 8008800:	2302      	movs	r3, #2
 8008802:	e0e3      	b.n	80089cc <HAL_SPI_Receive+0x21a>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800880c:	f7fd f990 	bl	8005b30 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b01      	cmp	r3, #1
 800881c:	d002      	beq.n	8008824 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800881e:	2302      	movs	r3, #2
 8008820:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008822:	e0ca      	b.n	80089ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <HAL_SPI_Receive+0x7e>
 800882a:	88fb      	ldrh	r3, [r7, #6]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d102      	bne.n	8008836 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008834:	e0c1      	b.n	80089ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2204      	movs	r2, #4
 800883a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	88fa      	ldrh	r2, [r7, #6]
 800884e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	88fa      	ldrh	r2, [r7, #6]
 8008854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800887c:	d10f      	bne.n	800889e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800888c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800889c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b40      	cmp	r3, #64	; 0x40
 80088aa:	d007      	beq.n	80088bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d162      	bne.n	800898a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80088c4:	e02e      	b.n	8008924 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d115      	bne.n	8008900 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f103 020c 	add.w	r2, r3, #12
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	7812      	ldrb	r2, [r2, #0]
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088fe:	e011      	b.n	8008924 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008900:	f7fd f916 	bl	8005b30 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d803      	bhi.n	8008918 <HAL_SPI_Receive+0x166>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d102      	bne.n	800891e <HAL_SPI_Receive+0x16c>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008922:	e04a      	b.n	80089ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008928:	b29b      	uxth	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1cb      	bne.n	80088c6 <HAL_SPI_Receive+0x114>
 800892e:	e031      	b.n	8008994 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	2b01      	cmp	r3, #1
 800893c:	d113      	bne.n	8008966 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008948:	b292      	uxth	r2, r2
 800894a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	1c9a      	adds	r2, r3, #2
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800895a:	b29b      	uxth	r3, r3
 800895c:	3b01      	subs	r3, #1
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008964:	e011      	b.n	800898a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008966:	f7fd f8e3 	bl	8005b30 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d803      	bhi.n	800897e <HAL_SPI_Receive+0x1cc>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800897c:	d102      	bne.n	8008984 <HAL_SPI_Receive+0x1d2>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d102      	bne.n	800898a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008988:	e017      	b.n	80089ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1cd      	bne.n	8008930 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	6839      	ldr	r1, [r7, #0]
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fa45 	bl	8008e28 <SPI_EndRxTransaction>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	75fb      	strb	r3, [r7, #23]
 80089b6:	e000      	b.n	80089ba <HAL_SPI_Receive+0x208>
  }

error :
 80089b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	; 0x30
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80089e2:	2301      	movs	r3, #1
 80089e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_SPI_TransmitReceive+0x26>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e18a      	b.n	8008d10 <HAL_SPI_TransmitReceive+0x33c>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a02:	f7fd f895 	bl	8005b30 <HAL_GetTick>
 8008a06:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008a18:	887b      	ldrh	r3, [r7, #2]
 8008a1a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d00f      	beq.n	8008a44 <HAL_SPI_TransmitReceive+0x70>
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a2a:	d107      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d103      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x68>
 8008a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d003      	beq.n	8008a44 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008a3c:	2302      	movs	r3, #2
 8008a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a42:	e15b      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <HAL_SPI_TransmitReceive+0x82>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <HAL_SPI_TransmitReceive+0x82>
 8008a50:	887b      	ldrh	r3, [r7, #2]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d103      	bne.n	8008a5e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008a5c:	e14e      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	d003      	beq.n	8008a72 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	887a      	ldrh	r2, [r7, #2]
 8008a82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	887a      	ldrh	r2, [r7, #2]
 8008a88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	887a      	ldrh	r2, [r7, #2]
 8008a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	887a      	ldrh	r2, [r7, #2]
 8008a9a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d007      	beq.n	8008ac6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ac4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ace:	d178      	bne.n	8008bc2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <HAL_SPI_TransmitReceive+0x10a>
 8008ad8:	8b7b      	ldrh	r3, [r7, #26]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d166      	bne.n	8008bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	881a      	ldrh	r2, [r3, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aee:	1c9a      	adds	r2, r3, #2
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b02:	e053      	b.n	8008bac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d11b      	bne.n	8008b4a <HAL_SPI_TransmitReceive+0x176>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d016      	beq.n	8008b4a <HAL_SPI_TransmitReceive+0x176>
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d113      	bne.n	8008b4a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b26:	881a      	ldrh	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	1c9a      	adds	r2, r3, #2
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d119      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x1b8>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d014      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	b292      	uxth	r2, r2
 8008b6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	1c9a      	adds	r2, r3, #2
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008b8c:	f7fc ffd0 	bl	8005b30 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d807      	bhi.n	8008bac <HAL_SPI_TransmitReceive+0x1d8>
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d003      	beq.n	8008bac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008baa:	e0a7      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1a6      	bne.n	8008b04 <HAL_SPI_TransmitReceive+0x130>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1a1      	bne.n	8008b04 <HAL_SPI_TransmitReceive+0x130>
 8008bc0:	e07c      	b.n	8008cbc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <HAL_SPI_TransmitReceive+0x1fc>
 8008bca:	8b7b      	ldrh	r3, [r7, #26]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d16b      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	330c      	adds	r3, #12
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bf6:	e057      	b.n	8008ca8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d11c      	bne.n	8008c40 <HAL_SPI_TransmitReceive+0x26c>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d017      	beq.n	8008c40 <HAL_SPI_TransmitReceive+0x26c>
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d114      	bne.n	8008c40 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	330c      	adds	r3, #12
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	3b01      	subs	r3, #1
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d119      	bne.n	8008c82 <HAL_SPI_TransmitReceive+0x2ae>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d014      	beq.n	8008c82 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	b2d2      	uxtb	r2, r2
 8008c64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	1c5a      	adds	r2, r3, #1
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c82:	f7fc ff55 	bl	8005b30 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d803      	bhi.n	8008c9a <HAL_SPI_TransmitReceive+0x2c6>
 8008c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c98:	d102      	bne.n	8008ca0 <HAL_SPI_TransmitReceive+0x2cc>
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d103      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ca6:	e029      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1a2      	bne.n	8008bf8 <HAL_SPI_TransmitReceive+0x224>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d19d      	bne.n	8008bf8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 f917 	bl	8008ef4 <SPI_EndRxTxTransaction>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d006      	beq.n	8008cda <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008cd8:	e010      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10b      	bne.n	8008cfa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	617b      	str	r3, [r7, #20]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	617b      	str	r3, [r7, #20]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	e000      	b.n	8008cfc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008cfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3730      	adds	r7, #48	; 0x30
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	4613      	mov	r3, r2
 8008d26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d28:	f7fc ff02 	bl	8005b30 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	4413      	add	r3, r2
 8008d36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d38:	f7fc fefa 	bl	8005b30 <HAL_GetTick>
 8008d3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008d3e:	4b39      	ldr	r3, [pc, #228]	; (8008e24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	015b      	lsls	r3, r3, #5
 8008d44:	0d1b      	lsrs	r3, r3, #20
 8008d46:	69fa      	ldr	r2, [r7, #28]
 8008d48:	fb02 f303 	mul.w	r3, r2, r3
 8008d4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d4e:	e054      	b.n	8008dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d050      	beq.n	8008dfa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008d58:	f7fc feea 	bl	8005b30 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d902      	bls.n	8008d6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d13d      	bne.n	8008dea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d86:	d111      	bne.n	8008dac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d90:	d004      	beq.n	8008d9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d9a:	d107      	bne.n	8008dac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008daa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db4:	d10f      	bne.n	8008dd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e017      	b.n	8008e1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	3b01      	subs	r3, #1
 8008df8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	4013      	ands	r3, r2
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	bf0c      	ite	eq
 8008e0a:	2301      	moveq	r3, #1
 8008e0c:	2300      	movne	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	461a      	mov	r2, r3
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d19b      	bne.n	8008d50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3720      	adds	r7, #32
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000038 	.word	0x20000038

08008e28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af02      	add	r7, sp, #8
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e3c:	d111      	bne.n	8008e62 <SPI_EndRxTransaction+0x3a>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e46:	d004      	beq.n	8008e52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e50:	d107      	bne.n	8008e62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e6a:	d12a      	bne.n	8008ec2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e74:	d012      	beq.n	8008e9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	2180      	movs	r1, #128	; 0x80
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff ff49 	bl	8008d18 <SPI_WaitFlagStateUntilTimeout>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d02d      	beq.n	8008ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e90:	f043 0220 	orr.w	r2, r3, #32
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e026      	b.n	8008eea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	9300      	str	r3, [sp, #0]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f7ff ff36 	bl	8008d18 <SPI_WaitFlagStateUntilTimeout>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01a      	beq.n	8008ee8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb6:	f043 0220 	orr.w	r2, r3, #32
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e013      	b.n	8008eea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	2101      	movs	r1, #1
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f7ff ff23 	bl	8008d18 <SPI_WaitFlagStateUntilTimeout>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008edc:	f043 0220 	orr.w	r2, r3, #32
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e000      	b.n	8008eea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f00:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <SPI_EndRxTxTransaction+0x7c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <SPI_EndRxTxTransaction+0x80>)
 8008f06:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0a:	0d5b      	lsrs	r3, r3, #21
 8008f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f10:	fb02 f303 	mul.w	r3, r2, r3
 8008f14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f1e:	d112      	bne.n	8008f46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2200      	movs	r2, #0
 8008f28:	2180      	movs	r1, #128	; 0x80
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f7ff fef4 	bl	8008d18 <SPI_WaitFlagStateUntilTimeout>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d016      	beq.n	8008f64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f3a:	f043 0220 	orr.w	r2, r3, #32
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e00f      	b.n	8008f66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d0f2      	beq.n	8008f46 <SPI_EndRxTxTransaction+0x52>
 8008f60:	e000      	b.n	8008f64 <SPI_EndRxTxTransaction+0x70>
        break;
 8008f62:	bf00      	nop
  }

  return HAL_OK;
 8008f64:	2300      	movs	r3, #0
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000038 	.word	0x20000038
 8008f74:	165e9f81 	.word	0x165e9f81

08008f78 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e034      	b.n	8008ff8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7f9 f8da 	bl	800215c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	f001 f8c8 	bl	800a148 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	f001 f912 	bl	800a1ec <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6858      	ldr	r0, [r3, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	f001 f947 	bl	800a268 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	6892      	ldr	r2, [r2, #8]
 8008fe2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	6892      	ldr	r2, [r2, #8]
 8008fee:	f041 0101 	orr.w	r1, r1, #1
 8008ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e041      	b.n	8009096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fb fc80 	bl	800492c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f000 fce2 	bl	8009a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3708      	adds	r7, #8
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d001      	beq.n	80090b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e046      	b.n	8009146 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <HAL_TIM_Base_Start+0xb4>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d022      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d2:	d01d      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <HAL_TIM_Base_Start+0xb8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d018      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1e      	ldr	r2, [pc, #120]	; (800915c <HAL_TIM_Base_Start+0xbc>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d013      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a1c      	ldr	r2, [pc, #112]	; (8009160 <HAL_TIM_Base_Start+0xc0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00e      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <HAL_TIM_Base_Start+0xc4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d009      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a19      	ldr	r2, [pc, #100]	; (8009168 <HAL_TIM_Base_Start+0xc8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d004      	beq.n	8009110 <HAL_TIM_Base_Start+0x70>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a18      	ldr	r2, [pc, #96]	; (800916c <HAL_TIM_Base_Start+0xcc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d111      	bne.n	8009134 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2b06      	cmp	r3, #6
 8009120:	d010      	beq.n	8009144 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0201 	orr.w	r2, r2, #1
 8009130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009132:	e007      	b.n	8009144 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40010000 	.word	0x40010000
 8009158:	40000400 	.word	0x40000400
 800915c:	40000800 	.word	0x40000800
 8009160:	40000c00 	.word	0x40000c00
 8009164:	40010400 	.word	0x40010400
 8009168:	40014000 	.word	0x40014000
 800916c:	40001800 	.word	0x40001800

08009170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	d001      	beq.n	8009188 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e04e      	b.n	8009226 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68da      	ldr	r2, [r3, #12]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f042 0201 	orr.w	r2, r2, #1
 800919e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a23      	ldr	r2, [pc, #140]	; (8009234 <HAL_TIM_Base_Start_IT+0xc4>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d022      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b2:	d01d      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1f      	ldr	r2, [pc, #124]	; (8009238 <HAL_TIM_Base_Start_IT+0xc8>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d018      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1e      	ldr	r2, [pc, #120]	; (800923c <HAL_TIM_Base_Start_IT+0xcc>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1c      	ldr	r2, [pc, #112]	; (8009240 <HAL_TIM_Base_Start_IT+0xd0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00e      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a1b      	ldr	r2, [pc, #108]	; (8009244 <HAL_TIM_Base_Start_IT+0xd4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d009      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a19      	ldr	r2, [pc, #100]	; (8009248 <HAL_TIM_Base_Start_IT+0xd8>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <HAL_TIM_Base_Start_IT+0x80>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a18      	ldr	r2, [pc, #96]	; (800924c <HAL_TIM_Base_Start_IT+0xdc>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d111      	bne.n	8009214 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b06      	cmp	r3, #6
 8009200:	d010      	beq.n	8009224 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0201 	orr.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009212:	e007      	b.n	8009224 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0201 	orr.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	40010000 	.word	0x40010000
 8009238:	40000400 	.word	0x40000400
 800923c:	40000800 	.word	0x40000800
 8009240:	40000c00 	.word	0x40000c00
 8009244:	40010400 	.word	0x40010400
 8009248:	40014000 	.word	0x40014000
 800924c:	40001800 	.word	0x40001800

08009250 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e041      	b.n	80092e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d106      	bne.n	800927c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f839 	bl	80092ee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f000 fbba 	bl	8009a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2201      	movs	r2, #1
 80092b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
	...

08009304 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <HAL_TIM_PWM_Start+0x24>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	bf14      	ite	ne
 8009320:	2301      	movne	r3, #1
 8009322:	2300      	moveq	r3, #0
 8009324:	b2db      	uxtb	r3, r3
 8009326:	e022      	b.n	800936e <HAL_TIM_PWM_Start+0x6a>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b04      	cmp	r3, #4
 800932c:	d109      	bne.n	8009342 <HAL_TIM_PWM_Start+0x3e>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b01      	cmp	r3, #1
 8009338:	bf14      	ite	ne
 800933a:	2301      	movne	r3, #1
 800933c:	2300      	moveq	r3, #0
 800933e:	b2db      	uxtb	r3, r3
 8009340:	e015      	b.n	800936e <HAL_TIM_PWM_Start+0x6a>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b08      	cmp	r3, #8
 8009346:	d109      	bne.n	800935c <HAL_TIM_PWM_Start+0x58>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b01      	cmp	r3, #1
 8009352:	bf14      	ite	ne
 8009354:	2301      	movne	r3, #1
 8009356:	2300      	moveq	r3, #0
 8009358:	b2db      	uxtb	r3, r3
 800935a:	e008      	b.n	800936e <HAL_TIM_PWM_Start+0x6a>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009362:	b2db      	uxtb	r3, r3
 8009364:	2b01      	cmp	r3, #1
 8009366:	bf14      	ite	ne
 8009368:	2301      	movne	r3, #1
 800936a:	2300      	moveq	r3, #0
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e07c      	b.n	8009470 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <HAL_TIM_PWM_Start+0x82>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009384:	e013      	b.n	80093ae <HAL_TIM_PWM_Start+0xaa>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	2b04      	cmp	r3, #4
 800938a:	d104      	bne.n	8009396 <HAL_TIM_PWM_Start+0x92>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2202      	movs	r2, #2
 8009390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009394:	e00b      	b.n	80093ae <HAL_TIM_PWM_Start+0xaa>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b08      	cmp	r3, #8
 800939a:	d104      	bne.n	80093a6 <HAL_TIM_PWM_Start+0xa2>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a4:	e003      	b.n	80093ae <HAL_TIM_PWM_Start+0xaa>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2202      	movs	r2, #2
 80093aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2201      	movs	r2, #1
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f000 fe10 	bl	8009fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a2d      	ldr	r2, [pc, #180]	; (8009478 <HAL_TIM_PWM_Start+0x174>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <HAL_TIM_PWM_Start+0xcc>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a2c      	ldr	r2, [pc, #176]	; (800947c <HAL_TIM_PWM_Start+0x178>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d101      	bne.n	80093d4 <HAL_TIM_PWM_Start+0xd0>
 80093d0:	2301      	movs	r3, #1
 80093d2:	e000      	b.n	80093d6 <HAL_TIM_PWM_Start+0xd2>
 80093d4:	2300      	movs	r3, #0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a22      	ldr	r2, [pc, #136]	; (8009478 <HAL_TIM_PWM_Start+0x174>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d022      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d01d      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <HAL_TIM_PWM_Start+0x17c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d018      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a1d      	ldr	r2, [pc, #116]	; (8009484 <HAL_TIM_PWM_Start+0x180>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d013      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a1c      	ldr	r2, [pc, #112]	; (8009488 <HAL_TIM_PWM_Start+0x184>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00e      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a16      	ldr	r2, [pc, #88]	; (800947c <HAL_TIM_PWM_Start+0x178>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d009      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a18      	ldr	r2, [pc, #96]	; (800948c <HAL_TIM_PWM_Start+0x188>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d004      	beq.n	800943a <HAL_TIM_PWM_Start+0x136>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a16      	ldr	r2, [pc, #88]	; (8009490 <HAL_TIM_PWM_Start+0x18c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d111      	bne.n	800945e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b06      	cmp	r3, #6
 800944a:	d010      	beq.n	800946e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f042 0201 	orr.w	r2, r2, #1
 800945a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800945c:	e007      	b.n	800946e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f042 0201 	orr.w	r2, r2, #1
 800946c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	40010000 	.word	0x40010000
 800947c:	40010400 	.word	0x40010400
 8009480:	40000400 	.word	0x40000400
 8009484:	40000800 	.word	0x40000800
 8009488:	40000c00 	.word	0x40000c00
 800948c:	40014000 	.word	0x40014000
 8009490:	40001800 	.word	0x40001800

08009494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d122      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d11b      	bne.n	80094f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0202 	mvn.w	r2, #2
 80094c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa77 	bl	80099ca <HAL_TIM_IC_CaptureCallback>
 80094dc:	e005      	b.n	80094ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa69 	bl	80099b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 fa7a 	bl	80099de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	f003 0304 	and.w	r3, r3, #4
 80094fa:	2b04      	cmp	r3, #4
 80094fc:	d122      	bne.n	8009544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b04      	cmp	r3, #4
 800950a:	d11b      	bne.n	8009544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f06f 0204 	mvn.w	r2, #4
 8009514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2202      	movs	r2, #2
 800951a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa4d 	bl	80099ca <HAL_TIM_IC_CaptureCallback>
 8009530:	e005      	b.n	800953e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa3f 	bl	80099b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fa50 	bl	80099de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0308 	and.w	r3, r3, #8
 800954e:	2b08      	cmp	r3, #8
 8009550:	d122      	bne.n	8009598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f003 0308 	and.w	r3, r3, #8
 800955c:	2b08      	cmp	r3, #8
 800955e:	d11b      	bne.n	8009598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f06f 0208 	mvn.w	r2, #8
 8009568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2204      	movs	r2, #4
 800956e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 fa23 	bl	80099ca <HAL_TIM_IC_CaptureCallback>
 8009584:	e005      	b.n	8009592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa15 	bl	80099b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa26 	bl	80099de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	f003 0310 	and.w	r3, r3, #16
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	d122      	bne.n	80095ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	d11b      	bne.n	80095ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f06f 0210 	mvn.w	r2, #16
 80095bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2208      	movs	r2, #8
 80095c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d003      	beq.n	80095da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f9f9 	bl	80099ca <HAL_TIM_IC_CaptureCallback>
 80095d8:	e005      	b.n	80095e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f9eb 	bl	80099b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f9fc 	bl	80099de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d10e      	bne.n	8009618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b01      	cmp	r3, #1
 8009606:	d107      	bne.n	8009618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f06f 0201 	mvn.w	r2, #1
 8009610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fa fe18 	bl	8004248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b80      	cmp	r3, #128	; 0x80
 8009624:	d10e      	bne.n	8009644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009630:	2b80      	cmp	r3, #128	; 0x80
 8009632:	d107      	bne.n	8009644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800963c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fd78 	bl	800a134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b40      	cmp	r3, #64	; 0x40
 8009650:	d10e      	bne.n	8009670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965c:	2b40      	cmp	r3, #64	; 0x40
 800965e:	d107      	bne.n	8009670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9c1 	bl	80099f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b20      	cmp	r3, #32
 800967c:	d10e      	bne.n	800969c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b20      	cmp	r3, #32
 800968a:	d107      	bne.n	800969c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0220 	mvn.w	r2, #32
 8009694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fd42 	bl	800a120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800969c:	bf00      	nop
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d101      	bne.n	80096c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096be:	2302      	movs	r3, #2
 80096c0:	e0ae      	b.n	8009820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2b0c      	cmp	r3, #12
 80096ce:	f200 809f 	bhi.w	8009810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80096d2:	a201      	add	r2, pc, #4	; (adr r2, 80096d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d8:	0800970d 	.word	0x0800970d
 80096dc:	08009811 	.word	0x08009811
 80096e0:	08009811 	.word	0x08009811
 80096e4:	08009811 	.word	0x08009811
 80096e8:	0800974d 	.word	0x0800974d
 80096ec:	08009811 	.word	0x08009811
 80096f0:	08009811 	.word	0x08009811
 80096f4:	08009811 	.word	0x08009811
 80096f8:	0800978f 	.word	0x0800978f
 80096fc:	08009811 	.word	0x08009811
 8009700:	08009811 	.word	0x08009811
 8009704:	08009811 	.word	0x08009811
 8009708:	080097cf 	.word	0x080097cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 fa18 	bl	8009b48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0208 	orr.w	r2, r2, #8
 8009726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0204 	bic.w	r2, r2, #4
 8009736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6999      	ldr	r1, [r3, #24]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	691a      	ldr	r2, [r3, #16]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	619a      	str	r2, [r3, #24]
      break;
 800974a:	e064      	b.n	8009816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fa68 	bl	8009c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6999      	ldr	r1, [r3, #24]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	021a      	lsls	r2, r3, #8
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	619a      	str	r2, [r3, #24]
      break;
 800978c:	e043      	b.n	8009816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fabd 	bl	8009d14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0208 	orr.w	r2, r2, #8
 80097a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69da      	ldr	r2, [r3, #28]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0204 	bic.w	r2, r2, #4
 80097b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69d9      	ldr	r1, [r3, #28]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	691a      	ldr	r2, [r3, #16]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	61da      	str	r2, [r3, #28]
      break;
 80097cc:	e023      	b.n	8009816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fb11 	bl	8009dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69da      	ldr	r2, [r3, #28]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69d9      	ldr	r1, [r3, #28]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	021a      	lsls	r2, r3, #8
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	61da      	str	r2, [r3, #28]
      break;
 800980e:	e002      	b.n	8009816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	75fb      	strb	r3, [r7, #23]
      break;
 8009814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_TIM_ConfigClockSource+0x1c>
 8009840:	2302      	movs	r3, #2
 8009842:	e0b4      	b.n	80099ae <HAL_TIM_ConfigClockSource+0x186>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800986a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68ba      	ldr	r2, [r7, #8]
 8009872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800987c:	d03e      	beq.n	80098fc <HAL_TIM_ConfigClockSource+0xd4>
 800987e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009882:	f200 8087 	bhi.w	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 8009886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800988a:	f000 8086 	beq.w	800999a <HAL_TIM_ConfigClockSource+0x172>
 800988e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009892:	d87f      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 8009894:	2b70      	cmp	r3, #112	; 0x70
 8009896:	d01a      	beq.n	80098ce <HAL_TIM_ConfigClockSource+0xa6>
 8009898:	2b70      	cmp	r3, #112	; 0x70
 800989a:	d87b      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 800989c:	2b60      	cmp	r3, #96	; 0x60
 800989e:	d050      	beq.n	8009942 <HAL_TIM_ConfigClockSource+0x11a>
 80098a0:	2b60      	cmp	r3, #96	; 0x60
 80098a2:	d877      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 80098a4:	2b50      	cmp	r3, #80	; 0x50
 80098a6:	d03c      	beq.n	8009922 <HAL_TIM_ConfigClockSource+0xfa>
 80098a8:	2b50      	cmp	r3, #80	; 0x50
 80098aa:	d873      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 80098ac:	2b40      	cmp	r3, #64	; 0x40
 80098ae:	d058      	beq.n	8009962 <HAL_TIM_ConfigClockSource+0x13a>
 80098b0:	2b40      	cmp	r3, #64	; 0x40
 80098b2:	d86f      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 80098b4:	2b30      	cmp	r3, #48	; 0x30
 80098b6:	d064      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x15a>
 80098b8:	2b30      	cmp	r3, #48	; 0x30
 80098ba:	d86b      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 80098bc:	2b20      	cmp	r3, #32
 80098be:	d060      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x15a>
 80098c0:	2b20      	cmp	r3, #32
 80098c2:	d867      	bhi.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d05c      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x15a>
 80098c8:	2b10      	cmp	r3, #16
 80098ca:	d05a      	beq.n	8009982 <HAL_TIM_ConfigClockSource+0x15a>
 80098cc:	e062      	b.n	8009994 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6899      	ldr	r1, [r3, #8]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	f000 fb5d 	bl	8009f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80098f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	609a      	str	r2, [r3, #8]
      break;
 80098fa:	e04f      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6818      	ldr	r0, [r3, #0]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	6899      	ldr	r1, [r3, #8]
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	f000 fb46 	bl	8009f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800991e:	609a      	str	r2, [r3, #8]
      break;
 8009920:	e03c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6818      	ldr	r0, [r3, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	6859      	ldr	r1, [r3, #4]
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	461a      	mov	r2, r3
 8009930:	f000 faba 	bl	8009ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2150      	movs	r1, #80	; 0x50
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fb13 	bl	8009f66 <TIM_ITRx_SetConfig>
      break;
 8009940:	e02c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6859      	ldr	r1, [r3, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	68db      	ldr	r3, [r3, #12]
 800994e:	461a      	mov	r2, r3
 8009950:	f000 fad9 	bl	8009f06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	2160      	movs	r1, #96	; 0x60
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fb03 	bl	8009f66 <TIM_ITRx_SetConfig>
      break;
 8009960:	e01c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6818      	ldr	r0, [r3, #0]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	6859      	ldr	r1, [r3, #4]
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	461a      	mov	r2, r3
 8009970:	f000 fa9a 	bl	8009ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2140      	movs	r1, #64	; 0x40
 800997a:	4618      	mov	r0, r3
 800997c:	f000 faf3 	bl	8009f66 <TIM_ITRx_SetConfig>
      break;
 8009980:	e00c      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4619      	mov	r1, r3
 800998c:	4610      	mov	r0, r2
 800998e:	f000 faea 	bl	8009f66 <TIM_ITRx_SetConfig>
      break;
 8009992:	e003      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	73fb      	strb	r3, [r7, #15]
      break;
 8009998:	e000      	b.n	800999c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800999a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b083      	sub	sp, #12
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b083      	sub	sp, #12
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099d2:	bf00      	nop
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099de:	b480      	push	{r7}
 80099e0:	b083      	sub	sp, #12
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
	...

08009a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a40      	ldr	r2, [pc, #256]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d013      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a26:	d00f      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a3d      	ldr	r2, [pc, #244]	; (8009b20 <TIM_Base_SetConfig+0x118>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00b      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a3c      	ldr	r2, [pc, #240]	; (8009b24 <TIM_Base_SetConfig+0x11c>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d007      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a3b      	ldr	r2, [pc, #236]	; (8009b28 <TIM_Base_SetConfig+0x120>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d003      	beq.n	8009a48 <TIM_Base_SetConfig+0x40>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a3a      	ldr	r2, [pc, #232]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d108      	bne.n	8009a5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a2f      	ldr	r2, [pc, #188]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d02b      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a68:	d027      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <TIM_Base_SetConfig+0x118>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d023      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a2b      	ldr	r2, [pc, #172]	; (8009b24 <TIM_Base_SetConfig+0x11c>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d01f      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a2a      	ldr	r2, [pc, #168]	; (8009b28 <TIM_Base_SetConfig+0x120>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d01b      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a29      	ldr	r2, [pc, #164]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d017      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a28      	ldr	r2, [pc, #160]	; (8009b30 <TIM_Base_SetConfig+0x128>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d013      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a27      	ldr	r2, [pc, #156]	; (8009b34 <TIM_Base_SetConfig+0x12c>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d00f      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a26      	ldr	r2, [pc, #152]	; (8009b38 <TIM_Base_SetConfig+0x130>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d00b      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a25      	ldr	r2, [pc, #148]	; (8009b3c <TIM_Base_SetConfig+0x134>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d007      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a24      	ldr	r2, [pc, #144]	; (8009b40 <TIM_Base_SetConfig+0x138>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d003      	beq.n	8009aba <TIM_Base_SetConfig+0xb2>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a23      	ldr	r2, [pc, #140]	; (8009b44 <TIM_Base_SetConfig+0x13c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d108      	bne.n	8009acc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a0a      	ldr	r2, [pc, #40]	; (8009b1c <TIM_Base_SetConfig+0x114>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d003      	beq.n	8009b00 <TIM_Base_SetConfig+0xf8>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a0c      	ldr	r2, [pc, #48]	; (8009b2c <TIM_Base_SetConfig+0x124>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d103      	bne.n	8009b08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	691a      	ldr	r2, [r3, #16]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	615a      	str	r2, [r3, #20]
}
 8009b0e:	bf00      	nop
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40000400 	.word	0x40000400
 8009b24:	40000800 	.word	0x40000800
 8009b28:	40000c00 	.word	0x40000c00
 8009b2c:	40010400 	.word	0x40010400
 8009b30:	40014000 	.word	0x40014000
 8009b34:	40014400 	.word	0x40014400
 8009b38:	40014800 	.word	0x40014800
 8009b3c:	40001800 	.word	0x40001800
 8009b40:	40001c00 	.word	0x40001c00
 8009b44:	40002000 	.word	0x40002000

08009b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b087      	sub	sp, #28
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	f023 0201 	bic.w	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0303 	bic.w	r3, r3, #3
 8009b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	f023 0302 	bic.w	r3, r3, #2
 8009b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	697a      	ldr	r2, [r7, #20]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a20      	ldr	r2, [pc, #128]	; (8009c20 <TIM_OC1_SetConfig+0xd8>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_OC1_SetConfig+0x64>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a1f      	ldr	r2, [pc, #124]	; (8009c24 <TIM_OC1_SetConfig+0xdc>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d10c      	bne.n	8009bc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	f023 0308 	bic.w	r3, r3, #8
 8009bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f023 0304 	bic.w	r3, r3, #4
 8009bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a15      	ldr	r2, [pc, #84]	; (8009c20 <TIM_OC1_SetConfig+0xd8>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d003      	beq.n	8009bd6 <TIM_OC1_SetConfig+0x8e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a14      	ldr	r2, [pc, #80]	; (8009c24 <TIM_OC1_SetConfig+0xdc>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d111      	bne.n	8009bfa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	621a      	str	r2, [r3, #32]
}
 8009c14:	bf00      	nop
 8009c16:	371c      	adds	r7, #28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	40010000 	.word	0x40010000
 8009c24:	40010400 	.word	0x40010400

08009c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	f023 0210 	bic.w	r2, r3, #16
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	021b      	lsls	r3, r3, #8
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f023 0320 	bic.w	r3, r3, #32
 8009c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	697a      	ldr	r2, [r7, #20]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a22      	ldr	r2, [pc, #136]	; (8009d0c <TIM_OC2_SetConfig+0xe4>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d003      	beq.n	8009c90 <TIM_OC2_SetConfig+0x68>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a21      	ldr	r2, [pc, #132]	; (8009d10 <TIM_OC2_SetConfig+0xe8>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10d      	bne.n	8009cac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	011b      	lsls	r3, r3, #4
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <TIM_OC2_SetConfig+0xe4>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d003      	beq.n	8009cbc <TIM_OC2_SetConfig+0x94>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a16      	ldr	r2, [pc, #88]	; (8009d10 <TIM_OC2_SetConfig+0xe8>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d113      	bne.n	8009ce4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	621a      	str	r2, [r3, #32]
}
 8009cfe:	bf00      	nop
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
 8009d0a:	bf00      	nop
 8009d0c:	40010000 	.word	0x40010000
 8009d10:	40010400 	.word	0x40010400

08009d14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a21      	ldr	r2, [pc, #132]	; (8009df4 <TIM_OC3_SetConfig+0xe0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d003      	beq.n	8009d7a <TIM_OC3_SetConfig+0x66>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a20      	ldr	r2, [pc, #128]	; (8009df8 <TIM_OC3_SetConfig+0xe4>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d10d      	bne.n	8009d96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	697a      	ldr	r2, [r7, #20]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a16      	ldr	r2, [pc, #88]	; (8009df4 <TIM_OC3_SetConfig+0xe0>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d003      	beq.n	8009da6 <TIM_OC3_SetConfig+0x92>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a15      	ldr	r2, [pc, #84]	; (8009df8 <TIM_OC3_SetConfig+0xe4>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d113      	bne.n	8009dce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	011b      	lsls	r3, r3, #4
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	621a      	str	r2, [r3, #32]
}
 8009de8:	bf00      	nop
 8009dea:	371c      	adds	r7, #28
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40010400 	.word	0x40010400

08009dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	021b      	lsls	r3, r3, #8
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	031b      	lsls	r3, r3, #12
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a12      	ldr	r2, [pc, #72]	; (8009ea0 <TIM_OC4_SetConfig+0xa4>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d003      	beq.n	8009e64 <TIM_OC4_SetConfig+0x68>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a11      	ldr	r2, [pc, #68]	; (8009ea4 <TIM_OC4_SetConfig+0xa8>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d109      	bne.n	8009e78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	019b      	lsls	r3, r3, #6
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40010400 	.word	0x40010400

08009ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1b      	ldr	r3, [r3, #32]
 8009eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	f023 0201 	bic.w	r2, r3, #1
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	699b      	ldr	r3, [r3, #24]
 8009eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 030a 	bic.w	r3, r3, #10
 8009ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	621a      	str	r2, [r3, #32]
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b087      	sub	sp, #28
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	f023 0210 	bic.w	r2, r3, #16
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	031b      	lsls	r3, r3, #12
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	621a      	str	r2, [r3, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	f043 0307 	orr.w	r3, r3, #7
 8009f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	609a      	str	r2, [r3, #8]
}
 8009f90:	bf00      	nop
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	607a      	str	r2, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	021a      	lsls	r2, r3, #8
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	697a      	ldr	r2, [r7, #20]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	609a      	str	r2, [r3, #8]
}
 8009fd0:	bf00      	nop
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f003 031f 	and.w	r3, r3, #31
 8009fee:	2201      	movs	r2, #1
 8009ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6a1a      	ldr	r2, [r3, #32]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	401a      	ands	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6a1a      	ldr	r2, [r3, #32]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f003 031f 	and.w	r3, r3, #31
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	fa01 f303 	lsl.w	r3, r1, r3
 800a014:	431a      	orrs	r2, r3
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	621a      	str	r2, [r3, #32]
}
 800a01a:	bf00      	nop
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
	...

0800a028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d101      	bne.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a03c:	2302      	movs	r3, #2
 800a03e:	e05a      	b.n	800a0f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a21      	ldr	r2, [pc, #132]	; (800a104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d022      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08c:	d01d      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a1d      	ldr	r2, [pc, #116]	; (800a108 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d018      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a1b      	ldr	r2, [pc, #108]	; (800a10c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d013      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a1a      	ldr	r2, [pc, #104]	; (800a110 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00e      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a18      	ldr	r2, [pc, #96]	; (800a114 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d009      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a17      	ldr	r2, [pc, #92]	; (800a118 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d004      	beq.n	800a0ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a15      	ldr	r2, [pc, #84]	; (800a11c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d10c      	bne.n	800a0e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	40010000 	.word	0x40010000
 800a108:	40000400 	.word	0x40000400
 800a10c:	40000800 	.word	0x40000800
 800a110:	40000c00 	.word	0x40000c00
 800a114:	40010400 	.word	0x40010400
 800a118:	40014000 	.word	0x40014000
 800a11c:	40001800 	.word	0x40001800

0800a120 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a160:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	4b20      	ldr	r3, [pc, #128]	; (800a1e8 <FSMC_NORSRAM_Init+0xa0>)
 800a166:	4013      	ands	r3, r2
 800a168:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a172:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a178:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a17e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a184:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800a18a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800a190:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a196:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a19c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a1a2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a1a8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800a1ae:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800a1b4:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d103      	bne.n	800a1cc <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ca:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	fff00080 	.word	0xfff00080

0800a1ec <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a206:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a20e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a21a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a222:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a22a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	3b01      	subs	r3, #1
 800a232:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a234:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	3b02      	subs	r3, #2
 800a23c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a23e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a244:	4313      	orrs	r3, r2
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4313      	orrs	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	1c5a      	adds	r2, r3, #1
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6979      	ldr	r1, [r7, #20]
 800a254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
	...

0800a268 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a280:	d122      	bne.n	800a2c8 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	4b15      	ldr	r3, [pc, #84]	; (800a2e4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a290:	4013      	ands	r3, r2
 800a292:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a29e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a2a6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a2ae:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a2b4:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	6979      	ldr	r1, [r7, #20]
 800a2c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a2c6:	e005      	b.n	800a2d4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a2d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	371c      	adds	r7, #28
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop
 800a2e4:	cff00000 	.word	0xcff00000

0800a2e8 <__errno>:
 800a2e8:	4b01      	ldr	r3, [pc, #4]	; (800a2f0 <__errno+0x8>)
 800a2ea:	6818      	ldr	r0, [r3, #0]
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	2000007c 	.word	0x2000007c

0800a2f4 <__libc_init_array>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	4d0d      	ldr	r5, [pc, #52]	; (800a32c <__libc_init_array+0x38>)
 800a2f8:	4c0d      	ldr	r4, [pc, #52]	; (800a330 <__libc_init_array+0x3c>)
 800a2fa:	1b64      	subs	r4, r4, r5
 800a2fc:	10a4      	asrs	r4, r4, #2
 800a2fe:	2600      	movs	r6, #0
 800a300:	42a6      	cmp	r6, r4
 800a302:	d109      	bne.n	800a318 <__libc_init_array+0x24>
 800a304:	4d0b      	ldr	r5, [pc, #44]	; (800a334 <__libc_init_array+0x40>)
 800a306:	4c0c      	ldr	r4, [pc, #48]	; (800a338 <__libc_init_array+0x44>)
 800a308:	f001 fadc 	bl	800b8c4 <_init>
 800a30c:	1b64      	subs	r4, r4, r5
 800a30e:	10a4      	asrs	r4, r4, #2
 800a310:	2600      	movs	r6, #0
 800a312:	42a6      	cmp	r6, r4
 800a314:	d105      	bne.n	800a322 <__libc_init_array+0x2e>
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	f855 3b04 	ldr.w	r3, [r5], #4
 800a31c:	4798      	blx	r3
 800a31e:	3601      	adds	r6, #1
 800a320:	e7ee      	b.n	800a300 <__libc_init_array+0xc>
 800a322:	f855 3b04 	ldr.w	r3, [r5], #4
 800a326:	4798      	blx	r3
 800a328:	3601      	adds	r6, #1
 800a32a:	e7f2      	b.n	800a312 <__libc_init_array+0x1e>
 800a32c:	0800ec0c 	.word	0x0800ec0c
 800a330:	0800ec0c 	.word	0x0800ec0c
 800a334:	0800ec0c 	.word	0x0800ec0c
 800a338:	0800ec10 	.word	0x0800ec10

0800a33c <malloc>:
 800a33c:	4b02      	ldr	r3, [pc, #8]	; (800a348 <malloc+0xc>)
 800a33e:	4601      	mov	r1, r0
 800a340:	6818      	ldr	r0, [r3, #0]
 800a342:	f000 b85b 	b.w	800a3fc <_malloc_r>
 800a346:	bf00      	nop
 800a348:	2000007c 	.word	0x2000007c

0800a34c <memset>:
 800a34c:	4402      	add	r2, r0
 800a34e:	4603      	mov	r3, r0
 800a350:	4293      	cmp	r3, r2
 800a352:	d100      	bne.n	800a356 <memset+0xa>
 800a354:	4770      	bx	lr
 800a356:	f803 1b01 	strb.w	r1, [r3], #1
 800a35a:	e7f9      	b.n	800a350 <memset+0x4>

0800a35c <_free_r>:
 800a35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a35e:	2900      	cmp	r1, #0
 800a360:	d048      	beq.n	800a3f4 <_free_r+0x98>
 800a362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a366:	9001      	str	r0, [sp, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f1a1 0404 	sub.w	r4, r1, #4
 800a36e:	bfb8      	it	lt
 800a370:	18e4      	addlt	r4, r4, r3
 800a372:	f000 f93d 	bl	800a5f0 <__malloc_lock>
 800a376:	4a20      	ldr	r2, [pc, #128]	; (800a3f8 <_free_r+0x9c>)
 800a378:	9801      	ldr	r0, [sp, #4]
 800a37a:	6813      	ldr	r3, [r2, #0]
 800a37c:	4615      	mov	r5, r2
 800a37e:	b933      	cbnz	r3, 800a38e <_free_r+0x32>
 800a380:	6063      	str	r3, [r4, #4]
 800a382:	6014      	str	r4, [r2, #0]
 800a384:	b003      	add	sp, #12
 800a386:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a38a:	f000 b937 	b.w	800a5fc <__malloc_unlock>
 800a38e:	42a3      	cmp	r3, r4
 800a390:	d90b      	bls.n	800a3aa <_free_r+0x4e>
 800a392:	6821      	ldr	r1, [r4, #0]
 800a394:	1862      	adds	r2, r4, r1
 800a396:	4293      	cmp	r3, r2
 800a398:	bf04      	itt	eq
 800a39a:	681a      	ldreq	r2, [r3, #0]
 800a39c:	685b      	ldreq	r3, [r3, #4]
 800a39e:	6063      	str	r3, [r4, #4]
 800a3a0:	bf04      	itt	eq
 800a3a2:	1852      	addeq	r2, r2, r1
 800a3a4:	6022      	streq	r2, [r4, #0]
 800a3a6:	602c      	str	r4, [r5, #0]
 800a3a8:	e7ec      	b.n	800a384 <_free_r+0x28>
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	b10b      	cbz	r3, 800a3b4 <_free_r+0x58>
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	d9fa      	bls.n	800a3aa <_free_r+0x4e>
 800a3b4:	6811      	ldr	r1, [r2, #0]
 800a3b6:	1855      	adds	r5, r2, r1
 800a3b8:	42a5      	cmp	r5, r4
 800a3ba:	d10b      	bne.n	800a3d4 <_free_r+0x78>
 800a3bc:	6824      	ldr	r4, [r4, #0]
 800a3be:	4421      	add	r1, r4
 800a3c0:	1854      	adds	r4, r2, r1
 800a3c2:	42a3      	cmp	r3, r4
 800a3c4:	6011      	str	r1, [r2, #0]
 800a3c6:	d1dd      	bne.n	800a384 <_free_r+0x28>
 800a3c8:	681c      	ldr	r4, [r3, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	6053      	str	r3, [r2, #4]
 800a3ce:	4421      	add	r1, r4
 800a3d0:	6011      	str	r1, [r2, #0]
 800a3d2:	e7d7      	b.n	800a384 <_free_r+0x28>
 800a3d4:	d902      	bls.n	800a3dc <_free_r+0x80>
 800a3d6:	230c      	movs	r3, #12
 800a3d8:	6003      	str	r3, [r0, #0]
 800a3da:	e7d3      	b.n	800a384 <_free_r+0x28>
 800a3dc:	6825      	ldr	r5, [r4, #0]
 800a3de:	1961      	adds	r1, r4, r5
 800a3e0:	428b      	cmp	r3, r1
 800a3e2:	bf04      	itt	eq
 800a3e4:	6819      	ldreq	r1, [r3, #0]
 800a3e6:	685b      	ldreq	r3, [r3, #4]
 800a3e8:	6063      	str	r3, [r4, #4]
 800a3ea:	bf04      	itt	eq
 800a3ec:	1949      	addeq	r1, r1, r5
 800a3ee:	6021      	streq	r1, [r4, #0]
 800a3f0:	6054      	str	r4, [r2, #4]
 800a3f2:	e7c7      	b.n	800a384 <_free_r+0x28>
 800a3f4:	b003      	add	sp, #12
 800a3f6:	bd30      	pop	{r4, r5, pc}
 800a3f8:	200009b4 	.word	0x200009b4

0800a3fc <_malloc_r>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	1ccd      	adds	r5, r1, #3
 800a400:	f025 0503 	bic.w	r5, r5, #3
 800a404:	3508      	adds	r5, #8
 800a406:	2d0c      	cmp	r5, #12
 800a408:	bf38      	it	cc
 800a40a:	250c      	movcc	r5, #12
 800a40c:	2d00      	cmp	r5, #0
 800a40e:	4606      	mov	r6, r0
 800a410:	db01      	blt.n	800a416 <_malloc_r+0x1a>
 800a412:	42a9      	cmp	r1, r5
 800a414:	d903      	bls.n	800a41e <_malloc_r+0x22>
 800a416:	230c      	movs	r3, #12
 800a418:	6033      	str	r3, [r6, #0]
 800a41a:	2000      	movs	r0, #0
 800a41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a41e:	f000 f8e7 	bl	800a5f0 <__malloc_lock>
 800a422:	4921      	ldr	r1, [pc, #132]	; (800a4a8 <_malloc_r+0xac>)
 800a424:	680a      	ldr	r2, [r1, #0]
 800a426:	4614      	mov	r4, r2
 800a428:	b99c      	cbnz	r4, 800a452 <_malloc_r+0x56>
 800a42a:	4f20      	ldr	r7, [pc, #128]	; (800a4ac <_malloc_r+0xb0>)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	b923      	cbnz	r3, 800a43a <_malloc_r+0x3e>
 800a430:	4621      	mov	r1, r4
 800a432:	4630      	mov	r0, r6
 800a434:	f000 f87c 	bl	800a530 <_sbrk_r>
 800a438:	6038      	str	r0, [r7, #0]
 800a43a:	4629      	mov	r1, r5
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 f877 	bl	800a530 <_sbrk_r>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d123      	bne.n	800a48e <_malloc_r+0x92>
 800a446:	230c      	movs	r3, #12
 800a448:	6033      	str	r3, [r6, #0]
 800a44a:	4630      	mov	r0, r6
 800a44c:	f000 f8d6 	bl	800a5fc <__malloc_unlock>
 800a450:	e7e3      	b.n	800a41a <_malloc_r+0x1e>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	1b5b      	subs	r3, r3, r5
 800a456:	d417      	bmi.n	800a488 <_malloc_r+0x8c>
 800a458:	2b0b      	cmp	r3, #11
 800a45a:	d903      	bls.n	800a464 <_malloc_r+0x68>
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	441c      	add	r4, r3
 800a460:	6025      	str	r5, [r4, #0]
 800a462:	e004      	b.n	800a46e <_malloc_r+0x72>
 800a464:	6863      	ldr	r3, [r4, #4]
 800a466:	42a2      	cmp	r2, r4
 800a468:	bf0c      	ite	eq
 800a46a:	600b      	streq	r3, [r1, #0]
 800a46c:	6053      	strne	r3, [r2, #4]
 800a46e:	4630      	mov	r0, r6
 800a470:	f000 f8c4 	bl	800a5fc <__malloc_unlock>
 800a474:	f104 000b 	add.w	r0, r4, #11
 800a478:	1d23      	adds	r3, r4, #4
 800a47a:	f020 0007 	bic.w	r0, r0, #7
 800a47e:	1ac2      	subs	r2, r0, r3
 800a480:	d0cc      	beq.n	800a41c <_malloc_r+0x20>
 800a482:	1a1b      	subs	r3, r3, r0
 800a484:	50a3      	str	r3, [r4, r2]
 800a486:	e7c9      	b.n	800a41c <_malloc_r+0x20>
 800a488:	4622      	mov	r2, r4
 800a48a:	6864      	ldr	r4, [r4, #4]
 800a48c:	e7cc      	b.n	800a428 <_malloc_r+0x2c>
 800a48e:	1cc4      	adds	r4, r0, #3
 800a490:	f024 0403 	bic.w	r4, r4, #3
 800a494:	42a0      	cmp	r0, r4
 800a496:	d0e3      	beq.n	800a460 <_malloc_r+0x64>
 800a498:	1a21      	subs	r1, r4, r0
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 f848 	bl	800a530 <_sbrk_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d1dd      	bne.n	800a460 <_malloc_r+0x64>
 800a4a4:	e7cf      	b.n	800a446 <_malloc_r+0x4a>
 800a4a6:	bf00      	nop
 800a4a8:	200009b4 	.word	0x200009b4
 800a4ac:	200009b8 	.word	0x200009b8

0800a4b0 <rand>:
 800a4b0:	4b17      	ldr	r3, [pc, #92]	; (800a510 <rand+0x60>)
 800a4b2:	b510      	push	{r4, lr}
 800a4b4:	681c      	ldr	r4, [r3, #0]
 800a4b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a4b8:	b9b3      	cbnz	r3, 800a4e8 <rand+0x38>
 800a4ba:	2018      	movs	r0, #24
 800a4bc:	f7ff ff3e 	bl	800a33c <malloc>
 800a4c0:	63a0      	str	r0, [r4, #56]	; 0x38
 800a4c2:	b928      	cbnz	r0, 800a4d0 <rand+0x20>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	4b13      	ldr	r3, [pc, #76]	; (800a514 <rand+0x64>)
 800a4c8:	4813      	ldr	r0, [pc, #76]	; (800a518 <rand+0x68>)
 800a4ca:	214e      	movs	r1, #78	; 0x4e
 800a4cc:	f000 f860 	bl	800a590 <__assert_func>
 800a4d0:	4a12      	ldr	r2, [pc, #72]	; (800a51c <rand+0x6c>)
 800a4d2:	4b13      	ldr	r3, [pc, #76]	; (800a520 <rand+0x70>)
 800a4d4:	e9c0 2300 	strd	r2, r3, [r0]
 800a4d8:	4b12      	ldr	r3, [pc, #72]	; (800a524 <rand+0x74>)
 800a4da:	6083      	str	r3, [r0, #8]
 800a4dc:	230b      	movs	r3, #11
 800a4de:	8183      	strh	r3, [r0, #12]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a4e8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a4ea:	480f      	ldr	r0, [pc, #60]	; (800a528 <rand+0x78>)
 800a4ec:	690a      	ldr	r2, [r1, #16]
 800a4ee:	694b      	ldr	r3, [r1, #20]
 800a4f0:	4c0e      	ldr	r4, [pc, #56]	; (800a52c <rand+0x7c>)
 800a4f2:	4350      	muls	r0, r2
 800a4f4:	fb04 0003 	mla	r0, r4, r3, r0
 800a4f8:	fba2 3404 	umull	r3, r4, r2, r4
 800a4fc:	1c5a      	adds	r2, r3, #1
 800a4fe:	4404      	add	r4, r0
 800a500:	f144 0000 	adc.w	r0, r4, #0
 800a504:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a508:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a50c:	bd10      	pop	{r4, pc}
 800a50e:	bf00      	nop
 800a510:	2000007c 	.word	0x2000007c
 800a514:	0800eabc 	.word	0x0800eabc
 800a518:	0800ead3 	.word	0x0800ead3
 800a51c:	abcd330e 	.word	0xabcd330e
 800a520:	e66d1234 	.word	0xe66d1234
 800a524:	0005deec 	.word	0x0005deec
 800a528:	5851f42d 	.word	0x5851f42d
 800a52c:	4c957f2d 	.word	0x4c957f2d

0800a530 <_sbrk_r>:
 800a530:	b538      	push	{r3, r4, r5, lr}
 800a532:	4d06      	ldr	r5, [pc, #24]	; (800a54c <_sbrk_r+0x1c>)
 800a534:	2300      	movs	r3, #0
 800a536:	4604      	mov	r4, r0
 800a538:	4608      	mov	r0, r1
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	f7fa f8c4 	bl	80046c8 <_sbrk>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_sbrk_r+0x1a>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_sbrk_r+0x1a>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20000c98 	.word	0x20000c98

0800a550 <siprintf>:
 800a550:	b40e      	push	{r1, r2, r3}
 800a552:	b500      	push	{lr}
 800a554:	b09c      	sub	sp, #112	; 0x70
 800a556:	ab1d      	add	r3, sp, #116	; 0x74
 800a558:	9002      	str	r0, [sp, #8]
 800a55a:	9006      	str	r0, [sp, #24]
 800a55c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a560:	4809      	ldr	r0, [pc, #36]	; (800a588 <siprintf+0x38>)
 800a562:	9107      	str	r1, [sp, #28]
 800a564:	9104      	str	r1, [sp, #16]
 800a566:	4909      	ldr	r1, [pc, #36]	; (800a58c <siprintf+0x3c>)
 800a568:	f853 2b04 	ldr.w	r2, [r3], #4
 800a56c:	9105      	str	r1, [sp, #20]
 800a56e:	6800      	ldr	r0, [r0, #0]
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	a902      	add	r1, sp, #8
 800a574:	f000 f8a4 	bl	800a6c0 <_svfiprintf_r>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2200      	movs	r2, #0
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	b01c      	add	sp, #112	; 0x70
 800a580:	f85d eb04 	ldr.w	lr, [sp], #4
 800a584:	b003      	add	sp, #12
 800a586:	4770      	bx	lr
 800a588:	2000007c 	.word	0x2000007c
 800a58c:	ffff0208 	.word	0xffff0208

0800a590 <__assert_func>:
 800a590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a592:	4614      	mov	r4, r2
 800a594:	461a      	mov	r2, r3
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <__assert_func+0x2c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4605      	mov	r5, r0
 800a59c:	68d8      	ldr	r0, [r3, #12]
 800a59e:	b14c      	cbz	r4, 800a5b4 <__assert_func+0x24>
 800a5a0:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <__assert_func+0x30>)
 800a5a2:	9100      	str	r1, [sp, #0]
 800a5a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5a8:	4906      	ldr	r1, [pc, #24]	; (800a5c4 <__assert_func+0x34>)
 800a5aa:	462b      	mov	r3, r5
 800a5ac:	f000 f80e 	bl	800a5cc <fiprintf>
 800a5b0:	f000 fd34 	bl	800b01c <abort>
 800a5b4:	4b04      	ldr	r3, [pc, #16]	; (800a5c8 <__assert_func+0x38>)
 800a5b6:	461c      	mov	r4, r3
 800a5b8:	e7f3      	b.n	800a5a2 <__assert_func+0x12>
 800a5ba:	bf00      	nop
 800a5bc:	2000007c 	.word	0x2000007c
 800a5c0:	0800eb32 	.word	0x0800eb32
 800a5c4:	0800eb3f 	.word	0x0800eb3f
 800a5c8:	0800eb6d 	.word	0x0800eb6d

0800a5cc <fiprintf>:
 800a5cc:	b40e      	push	{r1, r2, r3}
 800a5ce:	b503      	push	{r0, r1, lr}
 800a5d0:	4601      	mov	r1, r0
 800a5d2:	ab03      	add	r3, sp, #12
 800a5d4:	4805      	ldr	r0, [pc, #20]	; (800a5ec <fiprintf+0x20>)
 800a5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5da:	6800      	ldr	r0, [r0, #0]
 800a5dc:	9301      	str	r3, [sp, #4]
 800a5de:	f000 f999 	bl	800a914 <_vfiprintf_r>
 800a5e2:	b002      	add	sp, #8
 800a5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5e8:	b003      	add	sp, #12
 800a5ea:	4770      	bx	lr
 800a5ec:	2000007c 	.word	0x2000007c

0800a5f0 <__malloc_lock>:
 800a5f0:	4801      	ldr	r0, [pc, #4]	; (800a5f8 <__malloc_lock+0x8>)
 800a5f2:	f000 bed3 	b.w	800b39c <__retarget_lock_acquire_recursive>
 800a5f6:	bf00      	nop
 800a5f8:	20000ca0 	.word	0x20000ca0

0800a5fc <__malloc_unlock>:
 800a5fc:	4801      	ldr	r0, [pc, #4]	; (800a604 <__malloc_unlock+0x8>)
 800a5fe:	f000 bece 	b.w	800b39e <__retarget_lock_release_recursive>
 800a602:	bf00      	nop
 800a604:	20000ca0 	.word	0x20000ca0

0800a608 <__ssputs_r>:
 800a608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a60c:	688e      	ldr	r6, [r1, #8]
 800a60e:	429e      	cmp	r6, r3
 800a610:	4682      	mov	sl, r0
 800a612:	460c      	mov	r4, r1
 800a614:	4690      	mov	r8, r2
 800a616:	461f      	mov	r7, r3
 800a618:	d838      	bhi.n	800a68c <__ssputs_r+0x84>
 800a61a:	898a      	ldrh	r2, [r1, #12]
 800a61c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a620:	d032      	beq.n	800a688 <__ssputs_r+0x80>
 800a622:	6825      	ldr	r5, [r4, #0]
 800a624:	6909      	ldr	r1, [r1, #16]
 800a626:	eba5 0901 	sub.w	r9, r5, r1
 800a62a:	6965      	ldr	r5, [r4, #20]
 800a62c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a630:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a634:	3301      	adds	r3, #1
 800a636:	444b      	add	r3, r9
 800a638:	106d      	asrs	r5, r5, #1
 800a63a:	429d      	cmp	r5, r3
 800a63c:	bf38      	it	cc
 800a63e:	461d      	movcc	r5, r3
 800a640:	0553      	lsls	r3, r2, #21
 800a642:	d531      	bpl.n	800a6a8 <__ssputs_r+0xa0>
 800a644:	4629      	mov	r1, r5
 800a646:	f7ff fed9 	bl	800a3fc <_malloc_r>
 800a64a:	4606      	mov	r6, r0
 800a64c:	b950      	cbnz	r0, 800a664 <__ssputs_r+0x5c>
 800a64e:	230c      	movs	r3, #12
 800a650:	f8ca 3000 	str.w	r3, [sl]
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a65a:	81a3      	strh	r3, [r4, #12]
 800a65c:	f04f 30ff 	mov.w	r0, #4294967295
 800a660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a664:	6921      	ldr	r1, [r4, #16]
 800a666:	464a      	mov	r2, r9
 800a668:	f000 fefe 	bl	800b468 <memcpy>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a676:	81a3      	strh	r3, [r4, #12]
 800a678:	6126      	str	r6, [r4, #16]
 800a67a:	6165      	str	r5, [r4, #20]
 800a67c:	444e      	add	r6, r9
 800a67e:	eba5 0509 	sub.w	r5, r5, r9
 800a682:	6026      	str	r6, [r4, #0]
 800a684:	60a5      	str	r5, [r4, #8]
 800a686:	463e      	mov	r6, r7
 800a688:	42be      	cmp	r6, r7
 800a68a:	d900      	bls.n	800a68e <__ssputs_r+0x86>
 800a68c:	463e      	mov	r6, r7
 800a68e:	4632      	mov	r2, r6
 800a690:	6820      	ldr	r0, [r4, #0]
 800a692:	4641      	mov	r1, r8
 800a694:	f000 fef6 	bl	800b484 <memmove>
 800a698:	68a3      	ldr	r3, [r4, #8]
 800a69a:	6822      	ldr	r2, [r4, #0]
 800a69c:	1b9b      	subs	r3, r3, r6
 800a69e:	4432      	add	r2, r6
 800a6a0:	60a3      	str	r3, [r4, #8]
 800a6a2:	6022      	str	r2, [r4, #0]
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	e7db      	b.n	800a660 <__ssputs_r+0x58>
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	f000 ff05 	bl	800b4b8 <_realloc_r>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	2800      	cmp	r0, #0
 800a6b2:	d1e1      	bne.n	800a678 <__ssputs_r+0x70>
 800a6b4:	6921      	ldr	r1, [r4, #16]
 800a6b6:	4650      	mov	r0, sl
 800a6b8:	f7ff fe50 	bl	800a35c <_free_r>
 800a6bc:	e7c7      	b.n	800a64e <__ssputs_r+0x46>
	...

0800a6c0 <_svfiprintf_r>:
 800a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c4:	4698      	mov	r8, r3
 800a6c6:	898b      	ldrh	r3, [r1, #12]
 800a6c8:	061b      	lsls	r3, r3, #24
 800a6ca:	b09d      	sub	sp, #116	; 0x74
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	d50e      	bpl.n	800a6f2 <_svfiprintf_r+0x32>
 800a6d4:	690b      	ldr	r3, [r1, #16]
 800a6d6:	b963      	cbnz	r3, 800a6f2 <_svfiprintf_r+0x32>
 800a6d8:	2140      	movs	r1, #64	; 0x40
 800a6da:	f7ff fe8f 	bl	800a3fc <_malloc_r>
 800a6de:	6028      	str	r0, [r5, #0]
 800a6e0:	6128      	str	r0, [r5, #16]
 800a6e2:	b920      	cbnz	r0, 800a6ee <_svfiprintf_r+0x2e>
 800a6e4:	230c      	movs	r3, #12
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	e0d1      	b.n	800a892 <_svfiprintf_r+0x1d2>
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	616b      	str	r3, [r5, #20]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f6:	2320      	movs	r3, #32
 800a6f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a700:	2330      	movs	r3, #48	; 0x30
 800a702:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a8ac <_svfiprintf_r+0x1ec>
 800a706:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a70a:	f04f 0901 	mov.w	r9, #1
 800a70e:	4623      	mov	r3, r4
 800a710:	469a      	mov	sl, r3
 800a712:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a716:	b10a      	cbz	r2, 800a71c <_svfiprintf_r+0x5c>
 800a718:	2a25      	cmp	r2, #37	; 0x25
 800a71a:	d1f9      	bne.n	800a710 <_svfiprintf_r+0x50>
 800a71c:	ebba 0b04 	subs.w	fp, sl, r4
 800a720:	d00b      	beq.n	800a73a <_svfiprintf_r+0x7a>
 800a722:	465b      	mov	r3, fp
 800a724:	4622      	mov	r2, r4
 800a726:	4629      	mov	r1, r5
 800a728:	4638      	mov	r0, r7
 800a72a:	f7ff ff6d 	bl	800a608 <__ssputs_r>
 800a72e:	3001      	adds	r0, #1
 800a730:	f000 80aa 	beq.w	800a888 <_svfiprintf_r+0x1c8>
 800a734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a736:	445a      	add	r2, fp
 800a738:	9209      	str	r2, [sp, #36]	; 0x24
 800a73a:	f89a 3000 	ldrb.w	r3, [sl]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f000 80a2 	beq.w	800a888 <_svfiprintf_r+0x1c8>
 800a744:	2300      	movs	r3, #0
 800a746:	f04f 32ff 	mov.w	r2, #4294967295
 800a74a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a74e:	f10a 0a01 	add.w	sl, sl, #1
 800a752:	9304      	str	r3, [sp, #16]
 800a754:	9307      	str	r3, [sp, #28]
 800a756:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a75a:	931a      	str	r3, [sp, #104]	; 0x68
 800a75c:	4654      	mov	r4, sl
 800a75e:	2205      	movs	r2, #5
 800a760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a764:	4851      	ldr	r0, [pc, #324]	; (800a8ac <_svfiprintf_r+0x1ec>)
 800a766:	f7f5 fd33 	bl	80001d0 <memchr>
 800a76a:	9a04      	ldr	r2, [sp, #16]
 800a76c:	b9d8      	cbnz	r0, 800a7a6 <_svfiprintf_r+0xe6>
 800a76e:	06d0      	lsls	r0, r2, #27
 800a770:	bf44      	itt	mi
 800a772:	2320      	movmi	r3, #32
 800a774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a778:	0711      	lsls	r1, r2, #28
 800a77a:	bf44      	itt	mi
 800a77c:	232b      	movmi	r3, #43	; 0x2b
 800a77e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a782:	f89a 3000 	ldrb.w	r3, [sl]
 800a786:	2b2a      	cmp	r3, #42	; 0x2a
 800a788:	d015      	beq.n	800a7b6 <_svfiprintf_r+0xf6>
 800a78a:	9a07      	ldr	r2, [sp, #28]
 800a78c:	4654      	mov	r4, sl
 800a78e:	2000      	movs	r0, #0
 800a790:	f04f 0c0a 	mov.w	ip, #10
 800a794:	4621      	mov	r1, r4
 800a796:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a79a:	3b30      	subs	r3, #48	; 0x30
 800a79c:	2b09      	cmp	r3, #9
 800a79e:	d94e      	bls.n	800a83e <_svfiprintf_r+0x17e>
 800a7a0:	b1b0      	cbz	r0, 800a7d0 <_svfiprintf_r+0x110>
 800a7a2:	9207      	str	r2, [sp, #28]
 800a7a4:	e014      	b.n	800a7d0 <_svfiprintf_r+0x110>
 800a7a6:	eba0 0308 	sub.w	r3, r0, r8
 800a7aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	9304      	str	r3, [sp, #16]
 800a7b2:	46a2      	mov	sl, r4
 800a7b4:	e7d2      	b.n	800a75c <_svfiprintf_r+0x9c>
 800a7b6:	9b03      	ldr	r3, [sp, #12]
 800a7b8:	1d19      	adds	r1, r3, #4
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	9103      	str	r1, [sp, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	bfbb      	ittet	lt
 800a7c2:	425b      	neglt	r3, r3
 800a7c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c8:	9307      	strge	r3, [sp, #28]
 800a7ca:	9307      	strlt	r3, [sp, #28]
 800a7cc:	bfb8      	it	lt
 800a7ce:	9204      	strlt	r2, [sp, #16]
 800a7d0:	7823      	ldrb	r3, [r4, #0]
 800a7d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a7d4:	d10c      	bne.n	800a7f0 <_svfiprintf_r+0x130>
 800a7d6:	7863      	ldrb	r3, [r4, #1]
 800a7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7da:	d135      	bne.n	800a848 <_svfiprintf_r+0x188>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	1d1a      	adds	r2, r3, #4
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	9203      	str	r2, [sp, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	bfb8      	it	lt
 800a7e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ec:	3402      	adds	r4, #2
 800a7ee:	9305      	str	r3, [sp, #20]
 800a7f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a8bc <_svfiprintf_r+0x1fc>
 800a7f4:	7821      	ldrb	r1, [r4, #0]
 800a7f6:	2203      	movs	r2, #3
 800a7f8:	4650      	mov	r0, sl
 800a7fa:	f7f5 fce9 	bl	80001d0 <memchr>
 800a7fe:	b140      	cbz	r0, 800a812 <_svfiprintf_r+0x152>
 800a800:	2340      	movs	r3, #64	; 0x40
 800a802:	eba0 000a 	sub.w	r0, r0, sl
 800a806:	fa03 f000 	lsl.w	r0, r3, r0
 800a80a:	9b04      	ldr	r3, [sp, #16]
 800a80c:	4303      	orrs	r3, r0
 800a80e:	3401      	adds	r4, #1
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a816:	4826      	ldr	r0, [pc, #152]	; (800a8b0 <_svfiprintf_r+0x1f0>)
 800a818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a81c:	2206      	movs	r2, #6
 800a81e:	f7f5 fcd7 	bl	80001d0 <memchr>
 800a822:	2800      	cmp	r0, #0
 800a824:	d038      	beq.n	800a898 <_svfiprintf_r+0x1d8>
 800a826:	4b23      	ldr	r3, [pc, #140]	; (800a8b4 <_svfiprintf_r+0x1f4>)
 800a828:	bb1b      	cbnz	r3, 800a872 <_svfiprintf_r+0x1b2>
 800a82a:	9b03      	ldr	r3, [sp, #12]
 800a82c:	3307      	adds	r3, #7
 800a82e:	f023 0307 	bic.w	r3, r3, #7
 800a832:	3308      	adds	r3, #8
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a838:	4433      	add	r3, r6
 800a83a:	9309      	str	r3, [sp, #36]	; 0x24
 800a83c:	e767      	b.n	800a70e <_svfiprintf_r+0x4e>
 800a83e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a842:	460c      	mov	r4, r1
 800a844:	2001      	movs	r0, #1
 800a846:	e7a5      	b.n	800a794 <_svfiprintf_r+0xd4>
 800a848:	2300      	movs	r3, #0
 800a84a:	3401      	adds	r4, #1
 800a84c:	9305      	str	r3, [sp, #20]
 800a84e:	4619      	mov	r1, r3
 800a850:	f04f 0c0a 	mov.w	ip, #10
 800a854:	4620      	mov	r0, r4
 800a856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a85a:	3a30      	subs	r2, #48	; 0x30
 800a85c:	2a09      	cmp	r2, #9
 800a85e:	d903      	bls.n	800a868 <_svfiprintf_r+0x1a8>
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0c5      	beq.n	800a7f0 <_svfiprintf_r+0x130>
 800a864:	9105      	str	r1, [sp, #20]
 800a866:	e7c3      	b.n	800a7f0 <_svfiprintf_r+0x130>
 800a868:	fb0c 2101 	mla	r1, ip, r1, r2
 800a86c:	4604      	mov	r4, r0
 800a86e:	2301      	movs	r3, #1
 800a870:	e7f0      	b.n	800a854 <_svfiprintf_r+0x194>
 800a872:	ab03      	add	r3, sp, #12
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	462a      	mov	r2, r5
 800a878:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <_svfiprintf_r+0x1f8>)
 800a87a:	a904      	add	r1, sp, #16
 800a87c:	4638      	mov	r0, r7
 800a87e:	f3af 8000 	nop.w
 800a882:	1c42      	adds	r2, r0, #1
 800a884:	4606      	mov	r6, r0
 800a886:	d1d6      	bne.n	800a836 <_svfiprintf_r+0x176>
 800a888:	89ab      	ldrh	r3, [r5, #12]
 800a88a:	065b      	lsls	r3, r3, #25
 800a88c:	f53f af2c 	bmi.w	800a6e8 <_svfiprintf_r+0x28>
 800a890:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a892:	b01d      	add	sp, #116	; 0x74
 800a894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a898:	ab03      	add	r3, sp, #12
 800a89a:	9300      	str	r3, [sp, #0]
 800a89c:	462a      	mov	r2, r5
 800a89e:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <_svfiprintf_r+0x1f8>)
 800a8a0:	a904      	add	r1, sp, #16
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	f000 f9d4 	bl	800ac50 <_printf_i>
 800a8a8:	e7eb      	b.n	800a882 <_svfiprintf_r+0x1c2>
 800a8aa:	bf00      	nop
 800a8ac:	0800eb6e 	.word	0x0800eb6e
 800a8b0:	0800eb78 	.word	0x0800eb78
 800a8b4:	00000000 	.word	0x00000000
 800a8b8:	0800a609 	.word	0x0800a609
 800a8bc:	0800eb74 	.word	0x0800eb74

0800a8c0 <__sfputc_r>:
 800a8c0:	6893      	ldr	r3, [r2, #8]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	b410      	push	{r4}
 800a8c8:	6093      	str	r3, [r2, #8]
 800a8ca:	da08      	bge.n	800a8de <__sfputc_r+0x1e>
 800a8cc:	6994      	ldr	r4, [r2, #24]
 800a8ce:	42a3      	cmp	r3, r4
 800a8d0:	db01      	blt.n	800a8d6 <__sfputc_r+0x16>
 800a8d2:	290a      	cmp	r1, #10
 800a8d4:	d103      	bne.n	800a8de <__sfputc_r+0x1e>
 800a8d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8da:	f000 badf 	b.w	800ae9c <__swbuf_r>
 800a8de:	6813      	ldr	r3, [r2, #0]
 800a8e0:	1c58      	adds	r0, r3, #1
 800a8e2:	6010      	str	r0, [r2, #0]
 800a8e4:	7019      	strb	r1, [r3, #0]
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8ec:	4770      	bx	lr

0800a8ee <__sfputs_r>:
 800a8ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	460f      	mov	r7, r1
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	18d5      	adds	r5, r2, r3
 800a8f8:	42ac      	cmp	r4, r5
 800a8fa:	d101      	bne.n	800a900 <__sfputs_r+0x12>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e007      	b.n	800a910 <__sfputs_r+0x22>
 800a900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a904:	463a      	mov	r2, r7
 800a906:	4630      	mov	r0, r6
 800a908:	f7ff ffda 	bl	800a8c0 <__sfputc_r>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d1f3      	bne.n	800a8f8 <__sfputs_r+0xa>
 800a910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a914 <_vfiprintf_r>:
 800a914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a918:	460d      	mov	r5, r1
 800a91a:	b09d      	sub	sp, #116	; 0x74
 800a91c:	4614      	mov	r4, r2
 800a91e:	4698      	mov	r8, r3
 800a920:	4606      	mov	r6, r0
 800a922:	b118      	cbz	r0, 800a92c <_vfiprintf_r+0x18>
 800a924:	6983      	ldr	r3, [r0, #24]
 800a926:	b90b      	cbnz	r3, 800a92c <_vfiprintf_r+0x18>
 800a928:	f000 fc9a 	bl	800b260 <__sinit>
 800a92c:	4b89      	ldr	r3, [pc, #548]	; (800ab54 <_vfiprintf_r+0x240>)
 800a92e:	429d      	cmp	r5, r3
 800a930:	d11b      	bne.n	800a96a <_vfiprintf_r+0x56>
 800a932:	6875      	ldr	r5, [r6, #4]
 800a934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a936:	07d9      	lsls	r1, r3, #31
 800a938:	d405      	bmi.n	800a946 <_vfiprintf_r+0x32>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	059a      	lsls	r2, r3, #22
 800a93e:	d402      	bmi.n	800a946 <_vfiprintf_r+0x32>
 800a940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a942:	f000 fd2b 	bl	800b39c <__retarget_lock_acquire_recursive>
 800a946:	89ab      	ldrh	r3, [r5, #12]
 800a948:	071b      	lsls	r3, r3, #28
 800a94a:	d501      	bpl.n	800a950 <_vfiprintf_r+0x3c>
 800a94c:	692b      	ldr	r3, [r5, #16]
 800a94e:	b9eb      	cbnz	r3, 800a98c <_vfiprintf_r+0x78>
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f000 faf4 	bl	800af40 <__swsetup_r>
 800a958:	b1c0      	cbz	r0, 800a98c <_vfiprintf_r+0x78>
 800a95a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a95c:	07dc      	lsls	r4, r3, #31
 800a95e:	d50e      	bpl.n	800a97e <_vfiprintf_r+0x6a>
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	b01d      	add	sp, #116	; 0x74
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	4b7b      	ldr	r3, [pc, #492]	; (800ab58 <_vfiprintf_r+0x244>)
 800a96c:	429d      	cmp	r5, r3
 800a96e:	d101      	bne.n	800a974 <_vfiprintf_r+0x60>
 800a970:	68b5      	ldr	r5, [r6, #8]
 800a972:	e7df      	b.n	800a934 <_vfiprintf_r+0x20>
 800a974:	4b79      	ldr	r3, [pc, #484]	; (800ab5c <_vfiprintf_r+0x248>)
 800a976:	429d      	cmp	r5, r3
 800a978:	bf08      	it	eq
 800a97a:	68f5      	ldreq	r5, [r6, #12]
 800a97c:	e7da      	b.n	800a934 <_vfiprintf_r+0x20>
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	0598      	lsls	r0, r3, #22
 800a982:	d4ed      	bmi.n	800a960 <_vfiprintf_r+0x4c>
 800a984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a986:	f000 fd0a 	bl	800b39e <__retarget_lock_release_recursive>
 800a98a:	e7e9      	b.n	800a960 <_vfiprintf_r+0x4c>
 800a98c:	2300      	movs	r3, #0
 800a98e:	9309      	str	r3, [sp, #36]	; 0x24
 800a990:	2320      	movs	r3, #32
 800a992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a996:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99a:	2330      	movs	r3, #48	; 0x30
 800a99c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ab60 <_vfiprintf_r+0x24c>
 800a9a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a4:	f04f 0901 	mov.w	r9, #1
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	469a      	mov	sl, r3
 800a9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b0:	b10a      	cbz	r2, 800a9b6 <_vfiprintf_r+0xa2>
 800a9b2:	2a25      	cmp	r2, #37	; 0x25
 800a9b4:	d1f9      	bne.n	800a9aa <_vfiprintf_r+0x96>
 800a9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ba:	d00b      	beq.n	800a9d4 <_vfiprintf_r+0xc0>
 800a9bc:	465b      	mov	r3, fp
 800a9be:	4622      	mov	r2, r4
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ff93 	bl	800a8ee <__sfputs_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f000 80aa 	beq.w	800ab22 <_vfiprintf_r+0x20e>
 800a9ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d0:	445a      	add	r2, fp
 800a9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80a2 	beq.w	800ab22 <_vfiprintf_r+0x20e>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9e8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	9307      	str	r3, [sp, #28]
 800a9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a9f6:	4654      	mov	r4, sl
 800a9f8:	2205      	movs	r2, #5
 800a9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fe:	4858      	ldr	r0, [pc, #352]	; (800ab60 <_vfiprintf_r+0x24c>)
 800aa00:	f7f5 fbe6 	bl	80001d0 <memchr>
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	b9d8      	cbnz	r0, 800aa40 <_vfiprintf_r+0x12c>
 800aa08:	06d1      	lsls	r1, r2, #27
 800aa0a:	bf44      	itt	mi
 800aa0c:	2320      	movmi	r3, #32
 800aa0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa12:	0713      	lsls	r3, r2, #28
 800aa14:	bf44      	itt	mi
 800aa16:	232b      	movmi	r3, #43	; 0x2b
 800aa18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa1c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa20:	2b2a      	cmp	r3, #42	; 0x2a
 800aa22:	d015      	beq.n	800aa50 <_vfiprintf_r+0x13c>
 800aa24:	9a07      	ldr	r2, [sp, #28]
 800aa26:	4654      	mov	r4, sl
 800aa28:	2000      	movs	r0, #0
 800aa2a:	f04f 0c0a 	mov.w	ip, #10
 800aa2e:	4621      	mov	r1, r4
 800aa30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa34:	3b30      	subs	r3, #48	; 0x30
 800aa36:	2b09      	cmp	r3, #9
 800aa38:	d94e      	bls.n	800aad8 <_vfiprintf_r+0x1c4>
 800aa3a:	b1b0      	cbz	r0, 800aa6a <_vfiprintf_r+0x156>
 800aa3c:	9207      	str	r2, [sp, #28]
 800aa3e:	e014      	b.n	800aa6a <_vfiprintf_r+0x156>
 800aa40:	eba0 0308 	sub.w	r3, r0, r8
 800aa44:	fa09 f303 	lsl.w	r3, r9, r3
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	46a2      	mov	sl, r4
 800aa4e:	e7d2      	b.n	800a9f6 <_vfiprintf_r+0xe2>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	1d19      	adds	r1, r3, #4
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	9103      	str	r1, [sp, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfbb      	ittet	lt
 800aa5c:	425b      	neglt	r3, r3
 800aa5e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa62:	9307      	strge	r3, [sp, #28]
 800aa64:	9307      	strlt	r3, [sp, #28]
 800aa66:	bfb8      	it	lt
 800aa68:	9204      	strlt	r2, [sp, #16]
 800aa6a:	7823      	ldrb	r3, [r4, #0]
 800aa6c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa6e:	d10c      	bne.n	800aa8a <_vfiprintf_r+0x176>
 800aa70:	7863      	ldrb	r3, [r4, #1]
 800aa72:	2b2a      	cmp	r3, #42	; 0x2a
 800aa74:	d135      	bne.n	800aae2 <_vfiprintf_r+0x1ce>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	1d1a      	adds	r2, r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	9203      	str	r2, [sp, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	bfb8      	it	lt
 800aa82:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa86:	3402      	adds	r4, #2
 800aa88:	9305      	str	r3, [sp, #20]
 800aa8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab70 <_vfiprintf_r+0x25c>
 800aa8e:	7821      	ldrb	r1, [r4, #0]
 800aa90:	2203      	movs	r2, #3
 800aa92:	4650      	mov	r0, sl
 800aa94:	f7f5 fb9c 	bl	80001d0 <memchr>
 800aa98:	b140      	cbz	r0, 800aaac <_vfiprintf_r+0x198>
 800aa9a:	2340      	movs	r3, #64	; 0x40
 800aa9c:	eba0 000a 	sub.w	r0, r0, sl
 800aaa0:	fa03 f000 	lsl.w	r0, r3, r0
 800aaa4:	9b04      	ldr	r3, [sp, #16]
 800aaa6:	4303      	orrs	r3, r0
 800aaa8:	3401      	adds	r4, #1
 800aaaa:	9304      	str	r3, [sp, #16]
 800aaac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab0:	482c      	ldr	r0, [pc, #176]	; (800ab64 <_vfiprintf_r+0x250>)
 800aab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab6:	2206      	movs	r2, #6
 800aab8:	f7f5 fb8a 	bl	80001d0 <memchr>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d03f      	beq.n	800ab40 <_vfiprintf_r+0x22c>
 800aac0:	4b29      	ldr	r3, [pc, #164]	; (800ab68 <_vfiprintf_r+0x254>)
 800aac2:	bb1b      	cbnz	r3, 800ab0c <_vfiprintf_r+0x1f8>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	3307      	adds	r3, #7
 800aac8:	f023 0307 	bic.w	r3, r3, #7
 800aacc:	3308      	adds	r3, #8
 800aace:	9303      	str	r3, [sp, #12]
 800aad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad2:	443b      	add	r3, r7
 800aad4:	9309      	str	r3, [sp, #36]	; 0x24
 800aad6:	e767      	b.n	800a9a8 <_vfiprintf_r+0x94>
 800aad8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aadc:	460c      	mov	r4, r1
 800aade:	2001      	movs	r0, #1
 800aae0:	e7a5      	b.n	800aa2e <_vfiprintf_r+0x11a>
 800aae2:	2300      	movs	r3, #0
 800aae4:	3401      	adds	r4, #1
 800aae6:	9305      	str	r3, [sp, #20]
 800aae8:	4619      	mov	r1, r3
 800aaea:	f04f 0c0a 	mov.w	ip, #10
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf4:	3a30      	subs	r2, #48	; 0x30
 800aaf6:	2a09      	cmp	r2, #9
 800aaf8:	d903      	bls.n	800ab02 <_vfiprintf_r+0x1ee>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0c5      	beq.n	800aa8a <_vfiprintf_r+0x176>
 800aafe:	9105      	str	r1, [sp, #20]
 800ab00:	e7c3      	b.n	800aa8a <_vfiprintf_r+0x176>
 800ab02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab06:	4604      	mov	r4, r0
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e7f0      	b.n	800aaee <_vfiprintf_r+0x1da>
 800ab0c:	ab03      	add	r3, sp, #12
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	462a      	mov	r2, r5
 800ab12:	4b16      	ldr	r3, [pc, #88]	; (800ab6c <_vfiprintf_r+0x258>)
 800ab14:	a904      	add	r1, sp, #16
 800ab16:	4630      	mov	r0, r6
 800ab18:	f3af 8000 	nop.w
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	1c78      	adds	r0, r7, #1
 800ab20:	d1d6      	bne.n	800aad0 <_vfiprintf_r+0x1bc>
 800ab22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab24:	07d9      	lsls	r1, r3, #31
 800ab26:	d405      	bmi.n	800ab34 <_vfiprintf_r+0x220>
 800ab28:	89ab      	ldrh	r3, [r5, #12]
 800ab2a:	059a      	lsls	r2, r3, #22
 800ab2c:	d402      	bmi.n	800ab34 <_vfiprintf_r+0x220>
 800ab2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab30:	f000 fc35 	bl	800b39e <__retarget_lock_release_recursive>
 800ab34:	89ab      	ldrh	r3, [r5, #12]
 800ab36:	065b      	lsls	r3, r3, #25
 800ab38:	f53f af12 	bmi.w	800a960 <_vfiprintf_r+0x4c>
 800ab3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab3e:	e711      	b.n	800a964 <_vfiprintf_r+0x50>
 800ab40:	ab03      	add	r3, sp, #12
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	462a      	mov	r2, r5
 800ab46:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <_vfiprintf_r+0x258>)
 800ab48:	a904      	add	r1, sp, #16
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f000 f880 	bl	800ac50 <_printf_i>
 800ab50:	e7e4      	b.n	800ab1c <_vfiprintf_r+0x208>
 800ab52:	bf00      	nop
 800ab54:	0800ebc4 	.word	0x0800ebc4
 800ab58:	0800ebe4 	.word	0x0800ebe4
 800ab5c:	0800eba4 	.word	0x0800eba4
 800ab60:	0800eb6e 	.word	0x0800eb6e
 800ab64:	0800eb78 	.word	0x0800eb78
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	0800a8ef 	.word	0x0800a8ef
 800ab70:	0800eb74 	.word	0x0800eb74

0800ab74 <_printf_common>:
 800ab74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab78:	4616      	mov	r6, r2
 800ab7a:	4699      	mov	r9, r3
 800ab7c:	688a      	ldr	r2, [r1, #8]
 800ab7e:	690b      	ldr	r3, [r1, #16]
 800ab80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab84:	4293      	cmp	r3, r2
 800ab86:	bfb8      	it	lt
 800ab88:	4613      	movlt	r3, r2
 800ab8a:	6033      	str	r3, [r6, #0]
 800ab8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab90:	4607      	mov	r7, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b10a      	cbz	r2, 800ab9a <_printf_common+0x26>
 800ab96:	3301      	adds	r3, #1
 800ab98:	6033      	str	r3, [r6, #0]
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	0699      	lsls	r1, r3, #26
 800ab9e:	bf42      	ittt	mi
 800aba0:	6833      	ldrmi	r3, [r6, #0]
 800aba2:	3302      	addmi	r3, #2
 800aba4:	6033      	strmi	r3, [r6, #0]
 800aba6:	6825      	ldr	r5, [r4, #0]
 800aba8:	f015 0506 	ands.w	r5, r5, #6
 800abac:	d106      	bne.n	800abbc <_printf_common+0x48>
 800abae:	f104 0a19 	add.w	sl, r4, #25
 800abb2:	68e3      	ldr	r3, [r4, #12]
 800abb4:	6832      	ldr	r2, [r6, #0]
 800abb6:	1a9b      	subs	r3, r3, r2
 800abb8:	42ab      	cmp	r3, r5
 800abba:	dc26      	bgt.n	800ac0a <_printf_common+0x96>
 800abbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abc0:	1e13      	subs	r3, r2, #0
 800abc2:	6822      	ldr	r2, [r4, #0]
 800abc4:	bf18      	it	ne
 800abc6:	2301      	movne	r3, #1
 800abc8:	0692      	lsls	r2, r2, #26
 800abca:	d42b      	bmi.n	800ac24 <_printf_common+0xb0>
 800abcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abd0:	4649      	mov	r1, r9
 800abd2:	4638      	mov	r0, r7
 800abd4:	47c0      	blx	r8
 800abd6:	3001      	adds	r0, #1
 800abd8:	d01e      	beq.n	800ac18 <_printf_common+0xa4>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	68e5      	ldr	r5, [r4, #12]
 800abde:	6832      	ldr	r2, [r6, #0]
 800abe0:	f003 0306 	and.w	r3, r3, #6
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	bf08      	it	eq
 800abe8:	1aad      	subeq	r5, r5, r2
 800abea:	68a3      	ldr	r3, [r4, #8]
 800abec:	6922      	ldr	r2, [r4, #16]
 800abee:	bf0c      	ite	eq
 800abf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abf4:	2500      	movne	r5, #0
 800abf6:	4293      	cmp	r3, r2
 800abf8:	bfc4      	itt	gt
 800abfa:	1a9b      	subgt	r3, r3, r2
 800abfc:	18ed      	addgt	r5, r5, r3
 800abfe:	2600      	movs	r6, #0
 800ac00:	341a      	adds	r4, #26
 800ac02:	42b5      	cmp	r5, r6
 800ac04:	d11a      	bne.n	800ac3c <_printf_common+0xc8>
 800ac06:	2000      	movs	r0, #0
 800ac08:	e008      	b.n	800ac1c <_printf_common+0xa8>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	4652      	mov	r2, sl
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4638      	mov	r0, r7
 800ac12:	47c0      	blx	r8
 800ac14:	3001      	adds	r0, #1
 800ac16:	d103      	bne.n	800ac20 <_printf_common+0xac>
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295
 800ac1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac20:	3501      	adds	r5, #1
 800ac22:	e7c6      	b.n	800abb2 <_printf_common+0x3e>
 800ac24:	18e1      	adds	r1, r4, r3
 800ac26:	1c5a      	adds	r2, r3, #1
 800ac28:	2030      	movs	r0, #48	; 0x30
 800ac2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac2e:	4422      	add	r2, r4
 800ac30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac38:	3302      	adds	r3, #2
 800ac3a:	e7c7      	b.n	800abcc <_printf_common+0x58>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4649      	mov	r1, r9
 800ac42:	4638      	mov	r0, r7
 800ac44:	47c0      	blx	r8
 800ac46:	3001      	adds	r0, #1
 800ac48:	d0e6      	beq.n	800ac18 <_printf_common+0xa4>
 800ac4a:	3601      	adds	r6, #1
 800ac4c:	e7d9      	b.n	800ac02 <_printf_common+0x8e>
	...

0800ac50 <_printf_i>:
 800ac50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	460c      	mov	r4, r1
 800ac56:	4691      	mov	r9, r2
 800ac58:	7e27      	ldrb	r7, [r4, #24]
 800ac5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac5c:	2f78      	cmp	r7, #120	; 0x78
 800ac5e:	4680      	mov	r8, r0
 800ac60:	469a      	mov	sl, r3
 800ac62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac66:	d807      	bhi.n	800ac78 <_printf_i+0x28>
 800ac68:	2f62      	cmp	r7, #98	; 0x62
 800ac6a:	d80a      	bhi.n	800ac82 <_printf_i+0x32>
 800ac6c:	2f00      	cmp	r7, #0
 800ac6e:	f000 80d8 	beq.w	800ae22 <_printf_i+0x1d2>
 800ac72:	2f58      	cmp	r7, #88	; 0x58
 800ac74:	f000 80a3 	beq.w	800adbe <_printf_i+0x16e>
 800ac78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac80:	e03a      	b.n	800acf8 <_printf_i+0xa8>
 800ac82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac86:	2b15      	cmp	r3, #21
 800ac88:	d8f6      	bhi.n	800ac78 <_printf_i+0x28>
 800ac8a:	a001      	add	r0, pc, #4	; (adr r0, 800ac90 <_printf_i+0x40>)
 800ac8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800acfd 	.word	0x0800acfd
 800ac98:	0800ac79 	.word	0x0800ac79
 800ac9c:	0800ac79 	.word	0x0800ac79
 800aca0:	0800ac79 	.word	0x0800ac79
 800aca4:	0800ac79 	.word	0x0800ac79
 800aca8:	0800acfd 	.word	0x0800acfd
 800acac:	0800ac79 	.word	0x0800ac79
 800acb0:	0800ac79 	.word	0x0800ac79
 800acb4:	0800ac79 	.word	0x0800ac79
 800acb8:	0800ac79 	.word	0x0800ac79
 800acbc:	0800ae09 	.word	0x0800ae09
 800acc0:	0800ad2d 	.word	0x0800ad2d
 800acc4:	0800adeb 	.word	0x0800adeb
 800acc8:	0800ac79 	.word	0x0800ac79
 800accc:	0800ac79 	.word	0x0800ac79
 800acd0:	0800ae2b 	.word	0x0800ae2b
 800acd4:	0800ac79 	.word	0x0800ac79
 800acd8:	0800ad2d 	.word	0x0800ad2d
 800acdc:	0800ac79 	.word	0x0800ac79
 800ace0:	0800ac79 	.word	0x0800ac79
 800ace4:	0800adf3 	.word	0x0800adf3
 800ace8:	680b      	ldr	r3, [r1, #0]
 800acea:	1d1a      	adds	r2, r3, #4
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	600a      	str	r2, [r1, #0]
 800acf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acf8:	2301      	movs	r3, #1
 800acfa:	e0a3      	b.n	800ae44 <_printf_i+0x1f4>
 800acfc:	6825      	ldr	r5, [r4, #0]
 800acfe:	6808      	ldr	r0, [r1, #0]
 800ad00:	062e      	lsls	r6, r5, #24
 800ad02:	f100 0304 	add.w	r3, r0, #4
 800ad06:	d50a      	bpl.n	800ad1e <_printf_i+0xce>
 800ad08:	6805      	ldr	r5, [r0, #0]
 800ad0a:	600b      	str	r3, [r1, #0]
 800ad0c:	2d00      	cmp	r5, #0
 800ad0e:	da03      	bge.n	800ad18 <_printf_i+0xc8>
 800ad10:	232d      	movs	r3, #45	; 0x2d
 800ad12:	426d      	negs	r5, r5
 800ad14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad18:	485e      	ldr	r0, [pc, #376]	; (800ae94 <_printf_i+0x244>)
 800ad1a:	230a      	movs	r3, #10
 800ad1c:	e019      	b.n	800ad52 <_printf_i+0x102>
 800ad1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad22:	6805      	ldr	r5, [r0, #0]
 800ad24:	600b      	str	r3, [r1, #0]
 800ad26:	bf18      	it	ne
 800ad28:	b22d      	sxthne	r5, r5
 800ad2a:	e7ef      	b.n	800ad0c <_printf_i+0xbc>
 800ad2c:	680b      	ldr	r3, [r1, #0]
 800ad2e:	6825      	ldr	r5, [r4, #0]
 800ad30:	1d18      	adds	r0, r3, #4
 800ad32:	6008      	str	r0, [r1, #0]
 800ad34:	0628      	lsls	r0, r5, #24
 800ad36:	d501      	bpl.n	800ad3c <_printf_i+0xec>
 800ad38:	681d      	ldr	r5, [r3, #0]
 800ad3a:	e002      	b.n	800ad42 <_printf_i+0xf2>
 800ad3c:	0669      	lsls	r1, r5, #25
 800ad3e:	d5fb      	bpl.n	800ad38 <_printf_i+0xe8>
 800ad40:	881d      	ldrh	r5, [r3, #0]
 800ad42:	4854      	ldr	r0, [pc, #336]	; (800ae94 <_printf_i+0x244>)
 800ad44:	2f6f      	cmp	r7, #111	; 0x6f
 800ad46:	bf0c      	ite	eq
 800ad48:	2308      	moveq	r3, #8
 800ad4a:	230a      	movne	r3, #10
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad52:	6866      	ldr	r6, [r4, #4]
 800ad54:	60a6      	str	r6, [r4, #8]
 800ad56:	2e00      	cmp	r6, #0
 800ad58:	bfa2      	ittt	ge
 800ad5a:	6821      	ldrge	r1, [r4, #0]
 800ad5c:	f021 0104 	bicge.w	r1, r1, #4
 800ad60:	6021      	strge	r1, [r4, #0]
 800ad62:	b90d      	cbnz	r5, 800ad68 <_printf_i+0x118>
 800ad64:	2e00      	cmp	r6, #0
 800ad66:	d04d      	beq.n	800ae04 <_printf_i+0x1b4>
 800ad68:	4616      	mov	r6, r2
 800ad6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ad72:	5dc7      	ldrb	r7, [r0, r7]
 800ad74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad78:	462f      	mov	r7, r5
 800ad7a:	42bb      	cmp	r3, r7
 800ad7c:	460d      	mov	r5, r1
 800ad7e:	d9f4      	bls.n	800ad6a <_printf_i+0x11a>
 800ad80:	2b08      	cmp	r3, #8
 800ad82:	d10b      	bne.n	800ad9c <_printf_i+0x14c>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	07df      	lsls	r7, r3, #31
 800ad88:	d508      	bpl.n	800ad9c <_printf_i+0x14c>
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	6861      	ldr	r1, [r4, #4]
 800ad8e:	4299      	cmp	r1, r3
 800ad90:	bfde      	ittt	le
 800ad92:	2330      	movle	r3, #48	; 0x30
 800ad94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad9c:	1b92      	subs	r2, r2, r6
 800ad9e:	6122      	str	r2, [r4, #16]
 800ada0:	f8cd a000 	str.w	sl, [sp]
 800ada4:	464b      	mov	r3, r9
 800ada6:	aa03      	add	r2, sp, #12
 800ada8:	4621      	mov	r1, r4
 800adaa:	4640      	mov	r0, r8
 800adac:	f7ff fee2 	bl	800ab74 <_printf_common>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d14c      	bne.n	800ae4e <_printf_i+0x1fe>
 800adb4:	f04f 30ff 	mov.w	r0, #4294967295
 800adb8:	b004      	add	sp, #16
 800adba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adbe:	4835      	ldr	r0, [pc, #212]	; (800ae94 <_printf_i+0x244>)
 800adc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	680e      	ldr	r6, [r1, #0]
 800adc8:	061f      	lsls	r7, r3, #24
 800adca:	f856 5b04 	ldr.w	r5, [r6], #4
 800adce:	600e      	str	r6, [r1, #0]
 800add0:	d514      	bpl.n	800adfc <_printf_i+0x1ac>
 800add2:	07d9      	lsls	r1, r3, #31
 800add4:	bf44      	itt	mi
 800add6:	f043 0320 	orrmi.w	r3, r3, #32
 800adda:	6023      	strmi	r3, [r4, #0]
 800addc:	b91d      	cbnz	r5, 800ade6 <_printf_i+0x196>
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	f023 0320 	bic.w	r3, r3, #32
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	2310      	movs	r3, #16
 800ade8:	e7b0      	b.n	800ad4c <_printf_i+0xfc>
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	f043 0320 	orr.w	r3, r3, #32
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	2378      	movs	r3, #120	; 0x78
 800adf4:	4828      	ldr	r0, [pc, #160]	; (800ae98 <_printf_i+0x248>)
 800adf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adfa:	e7e3      	b.n	800adc4 <_printf_i+0x174>
 800adfc:	065e      	lsls	r6, r3, #25
 800adfe:	bf48      	it	mi
 800ae00:	b2ad      	uxthmi	r5, r5
 800ae02:	e7e6      	b.n	800add2 <_printf_i+0x182>
 800ae04:	4616      	mov	r6, r2
 800ae06:	e7bb      	b.n	800ad80 <_printf_i+0x130>
 800ae08:	680b      	ldr	r3, [r1, #0]
 800ae0a:	6826      	ldr	r6, [r4, #0]
 800ae0c:	6960      	ldr	r0, [r4, #20]
 800ae0e:	1d1d      	adds	r5, r3, #4
 800ae10:	600d      	str	r5, [r1, #0]
 800ae12:	0635      	lsls	r5, r6, #24
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	d501      	bpl.n	800ae1c <_printf_i+0x1cc>
 800ae18:	6018      	str	r0, [r3, #0]
 800ae1a:	e002      	b.n	800ae22 <_printf_i+0x1d2>
 800ae1c:	0671      	lsls	r1, r6, #25
 800ae1e:	d5fb      	bpl.n	800ae18 <_printf_i+0x1c8>
 800ae20:	8018      	strh	r0, [r3, #0]
 800ae22:	2300      	movs	r3, #0
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	4616      	mov	r6, r2
 800ae28:	e7ba      	b.n	800ada0 <_printf_i+0x150>
 800ae2a:	680b      	ldr	r3, [r1, #0]
 800ae2c:	1d1a      	adds	r2, r3, #4
 800ae2e:	600a      	str	r2, [r1, #0]
 800ae30:	681e      	ldr	r6, [r3, #0]
 800ae32:	6862      	ldr	r2, [r4, #4]
 800ae34:	2100      	movs	r1, #0
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7f5 f9ca 	bl	80001d0 <memchr>
 800ae3c:	b108      	cbz	r0, 800ae42 <_printf_i+0x1f2>
 800ae3e:	1b80      	subs	r0, r0, r6
 800ae40:	6060      	str	r0, [r4, #4]
 800ae42:	6863      	ldr	r3, [r4, #4]
 800ae44:	6123      	str	r3, [r4, #16]
 800ae46:	2300      	movs	r3, #0
 800ae48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4c:	e7a8      	b.n	800ada0 <_printf_i+0x150>
 800ae4e:	6923      	ldr	r3, [r4, #16]
 800ae50:	4632      	mov	r2, r6
 800ae52:	4649      	mov	r1, r9
 800ae54:	4640      	mov	r0, r8
 800ae56:	47d0      	blx	sl
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d0ab      	beq.n	800adb4 <_printf_i+0x164>
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	079b      	lsls	r3, r3, #30
 800ae60:	d413      	bmi.n	800ae8a <_printf_i+0x23a>
 800ae62:	68e0      	ldr	r0, [r4, #12]
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	4298      	cmp	r0, r3
 800ae68:	bfb8      	it	lt
 800ae6a:	4618      	movlt	r0, r3
 800ae6c:	e7a4      	b.n	800adb8 <_printf_i+0x168>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	4632      	mov	r2, r6
 800ae72:	4649      	mov	r1, r9
 800ae74:	4640      	mov	r0, r8
 800ae76:	47d0      	blx	sl
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d09b      	beq.n	800adb4 <_printf_i+0x164>
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	68e3      	ldr	r3, [r4, #12]
 800ae80:	9903      	ldr	r1, [sp, #12]
 800ae82:	1a5b      	subs	r3, r3, r1
 800ae84:	42ab      	cmp	r3, r5
 800ae86:	dcf2      	bgt.n	800ae6e <_printf_i+0x21e>
 800ae88:	e7eb      	b.n	800ae62 <_printf_i+0x212>
 800ae8a:	2500      	movs	r5, #0
 800ae8c:	f104 0619 	add.w	r6, r4, #25
 800ae90:	e7f5      	b.n	800ae7e <_printf_i+0x22e>
 800ae92:	bf00      	nop
 800ae94:	0800eb7f 	.word	0x0800eb7f
 800ae98:	0800eb90 	.word	0x0800eb90

0800ae9c <__swbuf_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	460e      	mov	r6, r1
 800aea0:	4614      	mov	r4, r2
 800aea2:	4605      	mov	r5, r0
 800aea4:	b118      	cbz	r0, 800aeae <__swbuf_r+0x12>
 800aea6:	6983      	ldr	r3, [r0, #24]
 800aea8:	b90b      	cbnz	r3, 800aeae <__swbuf_r+0x12>
 800aeaa:	f000 f9d9 	bl	800b260 <__sinit>
 800aeae:	4b21      	ldr	r3, [pc, #132]	; (800af34 <__swbuf_r+0x98>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	d12b      	bne.n	800af0c <__swbuf_r+0x70>
 800aeb4:	686c      	ldr	r4, [r5, #4]
 800aeb6:	69a3      	ldr	r3, [r4, #24]
 800aeb8:	60a3      	str	r3, [r4, #8]
 800aeba:	89a3      	ldrh	r3, [r4, #12]
 800aebc:	071a      	lsls	r2, r3, #28
 800aebe:	d52f      	bpl.n	800af20 <__swbuf_r+0x84>
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	b36b      	cbz	r3, 800af20 <__swbuf_r+0x84>
 800aec4:	6923      	ldr	r3, [r4, #16]
 800aec6:	6820      	ldr	r0, [r4, #0]
 800aec8:	1ac0      	subs	r0, r0, r3
 800aeca:	6963      	ldr	r3, [r4, #20]
 800aecc:	b2f6      	uxtb	r6, r6
 800aece:	4283      	cmp	r3, r0
 800aed0:	4637      	mov	r7, r6
 800aed2:	dc04      	bgt.n	800aede <__swbuf_r+0x42>
 800aed4:	4621      	mov	r1, r4
 800aed6:	4628      	mov	r0, r5
 800aed8:	f000 f92e 	bl	800b138 <_fflush_r>
 800aedc:	bb30      	cbnz	r0, 800af2c <__swbuf_r+0x90>
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	60a3      	str	r3, [r4, #8]
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	6022      	str	r2, [r4, #0]
 800aeea:	701e      	strb	r6, [r3, #0]
 800aeec:	6963      	ldr	r3, [r4, #20]
 800aeee:	3001      	adds	r0, #1
 800aef0:	4283      	cmp	r3, r0
 800aef2:	d004      	beq.n	800aefe <__swbuf_r+0x62>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	07db      	lsls	r3, r3, #31
 800aef8:	d506      	bpl.n	800af08 <__swbuf_r+0x6c>
 800aefa:	2e0a      	cmp	r6, #10
 800aefc:	d104      	bne.n	800af08 <__swbuf_r+0x6c>
 800aefe:	4621      	mov	r1, r4
 800af00:	4628      	mov	r0, r5
 800af02:	f000 f919 	bl	800b138 <_fflush_r>
 800af06:	b988      	cbnz	r0, 800af2c <__swbuf_r+0x90>
 800af08:	4638      	mov	r0, r7
 800af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af0c:	4b0a      	ldr	r3, [pc, #40]	; (800af38 <__swbuf_r+0x9c>)
 800af0e:	429c      	cmp	r4, r3
 800af10:	d101      	bne.n	800af16 <__swbuf_r+0x7a>
 800af12:	68ac      	ldr	r4, [r5, #8]
 800af14:	e7cf      	b.n	800aeb6 <__swbuf_r+0x1a>
 800af16:	4b09      	ldr	r3, [pc, #36]	; (800af3c <__swbuf_r+0xa0>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	bf08      	it	eq
 800af1c:	68ec      	ldreq	r4, [r5, #12]
 800af1e:	e7ca      	b.n	800aeb6 <__swbuf_r+0x1a>
 800af20:	4621      	mov	r1, r4
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f80c 	bl	800af40 <__swsetup_r>
 800af28:	2800      	cmp	r0, #0
 800af2a:	d0cb      	beq.n	800aec4 <__swbuf_r+0x28>
 800af2c:	f04f 37ff 	mov.w	r7, #4294967295
 800af30:	e7ea      	b.n	800af08 <__swbuf_r+0x6c>
 800af32:	bf00      	nop
 800af34:	0800ebc4 	.word	0x0800ebc4
 800af38:	0800ebe4 	.word	0x0800ebe4
 800af3c:	0800eba4 	.word	0x0800eba4

0800af40 <__swsetup_r>:
 800af40:	4b32      	ldr	r3, [pc, #200]	; (800b00c <__swsetup_r+0xcc>)
 800af42:	b570      	push	{r4, r5, r6, lr}
 800af44:	681d      	ldr	r5, [r3, #0]
 800af46:	4606      	mov	r6, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	b125      	cbz	r5, 800af56 <__swsetup_r+0x16>
 800af4c:	69ab      	ldr	r3, [r5, #24]
 800af4e:	b913      	cbnz	r3, 800af56 <__swsetup_r+0x16>
 800af50:	4628      	mov	r0, r5
 800af52:	f000 f985 	bl	800b260 <__sinit>
 800af56:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <__swsetup_r+0xd0>)
 800af58:	429c      	cmp	r4, r3
 800af5a:	d10f      	bne.n	800af7c <__swsetup_r+0x3c>
 800af5c:	686c      	ldr	r4, [r5, #4]
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af64:	0719      	lsls	r1, r3, #28
 800af66:	d42c      	bmi.n	800afc2 <__swsetup_r+0x82>
 800af68:	06dd      	lsls	r5, r3, #27
 800af6a:	d411      	bmi.n	800af90 <__swsetup_r+0x50>
 800af6c:	2309      	movs	r3, #9
 800af6e:	6033      	str	r3, [r6, #0]
 800af70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af74:	81a3      	strh	r3, [r4, #12]
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	e03e      	b.n	800affa <__swsetup_r+0xba>
 800af7c:	4b25      	ldr	r3, [pc, #148]	; (800b014 <__swsetup_r+0xd4>)
 800af7e:	429c      	cmp	r4, r3
 800af80:	d101      	bne.n	800af86 <__swsetup_r+0x46>
 800af82:	68ac      	ldr	r4, [r5, #8]
 800af84:	e7eb      	b.n	800af5e <__swsetup_r+0x1e>
 800af86:	4b24      	ldr	r3, [pc, #144]	; (800b018 <__swsetup_r+0xd8>)
 800af88:	429c      	cmp	r4, r3
 800af8a:	bf08      	it	eq
 800af8c:	68ec      	ldreq	r4, [r5, #12]
 800af8e:	e7e6      	b.n	800af5e <__swsetup_r+0x1e>
 800af90:	0758      	lsls	r0, r3, #29
 800af92:	d512      	bpl.n	800afba <__swsetup_r+0x7a>
 800af94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af96:	b141      	cbz	r1, 800afaa <__swsetup_r+0x6a>
 800af98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af9c:	4299      	cmp	r1, r3
 800af9e:	d002      	beq.n	800afa6 <__swsetup_r+0x66>
 800afa0:	4630      	mov	r0, r6
 800afa2:	f7ff f9db 	bl	800a35c <_free_r>
 800afa6:	2300      	movs	r3, #0
 800afa8:	6363      	str	r3, [r4, #52]	; 0x34
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800afb0:	81a3      	strh	r3, [r4, #12]
 800afb2:	2300      	movs	r3, #0
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	89a3      	ldrh	r3, [r4, #12]
 800afbc:	f043 0308 	orr.w	r3, r3, #8
 800afc0:	81a3      	strh	r3, [r4, #12]
 800afc2:	6923      	ldr	r3, [r4, #16]
 800afc4:	b94b      	cbnz	r3, 800afda <__swsetup_r+0x9a>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800afcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afd0:	d003      	beq.n	800afda <__swsetup_r+0x9a>
 800afd2:	4621      	mov	r1, r4
 800afd4:	4630      	mov	r0, r6
 800afd6:	f000 fa07 	bl	800b3e8 <__smakebuf_r>
 800afda:	89a0      	ldrh	r0, [r4, #12]
 800afdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afe0:	f010 0301 	ands.w	r3, r0, #1
 800afe4:	d00a      	beq.n	800affc <__swsetup_r+0xbc>
 800afe6:	2300      	movs	r3, #0
 800afe8:	60a3      	str	r3, [r4, #8]
 800afea:	6963      	ldr	r3, [r4, #20]
 800afec:	425b      	negs	r3, r3
 800afee:	61a3      	str	r3, [r4, #24]
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	b943      	cbnz	r3, 800b006 <__swsetup_r+0xc6>
 800aff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aff8:	d1ba      	bne.n	800af70 <__swsetup_r+0x30>
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	0781      	lsls	r1, r0, #30
 800affe:	bf58      	it	pl
 800b000:	6963      	ldrpl	r3, [r4, #20]
 800b002:	60a3      	str	r3, [r4, #8]
 800b004:	e7f4      	b.n	800aff0 <__swsetup_r+0xb0>
 800b006:	2000      	movs	r0, #0
 800b008:	e7f7      	b.n	800affa <__swsetup_r+0xba>
 800b00a:	bf00      	nop
 800b00c:	2000007c 	.word	0x2000007c
 800b010:	0800ebc4 	.word	0x0800ebc4
 800b014:	0800ebe4 	.word	0x0800ebe4
 800b018:	0800eba4 	.word	0x0800eba4

0800b01c <abort>:
 800b01c:	b508      	push	{r3, lr}
 800b01e:	2006      	movs	r0, #6
 800b020:	f000 fa98 	bl	800b554 <raise>
 800b024:	2001      	movs	r0, #1
 800b026:	f7f9 fad7 	bl	80045d8 <_exit>
	...

0800b02c <__sflush_r>:
 800b02c:	898a      	ldrh	r2, [r1, #12]
 800b02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b032:	4605      	mov	r5, r0
 800b034:	0710      	lsls	r0, r2, #28
 800b036:	460c      	mov	r4, r1
 800b038:	d458      	bmi.n	800b0ec <__sflush_r+0xc0>
 800b03a:	684b      	ldr	r3, [r1, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	dc05      	bgt.n	800b04c <__sflush_r+0x20>
 800b040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	dc02      	bgt.n	800b04c <__sflush_r+0x20>
 800b046:	2000      	movs	r0, #0
 800b048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b04e:	2e00      	cmp	r6, #0
 800b050:	d0f9      	beq.n	800b046 <__sflush_r+0x1a>
 800b052:	2300      	movs	r3, #0
 800b054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b058:	682f      	ldr	r7, [r5, #0]
 800b05a:	602b      	str	r3, [r5, #0]
 800b05c:	d032      	beq.n	800b0c4 <__sflush_r+0x98>
 800b05e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	075a      	lsls	r2, r3, #29
 800b064:	d505      	bpl.n	800b072 <__sflush_r+0x46>
 800b066:	6863      	ldr	r3, [r4, #4]
 800b068:	1ac0      	subs	r0, r0, r3
 800b06a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b06c:	b10b      	cbz	r3, 800b072 <__sflush_r+0x46>
 800b06e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b070:	1ac0      	subs	r0, r0, r3
 800b072:	2300      	movs	r3, #0
 800b074:	4602      	mov	r2, r0
 800b076:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b078:	6a21      	ldr	r1, [r4, #32]
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b0      	blx	r6
 800b07e:	1c43      	adds	r3, r0, #1
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	d106      	bne.n	800b092 <__sflush_r+0x66>
 800b084:	6829      	ldr	r1, [r5, #0]
 800b086:	291d      	cmp	r1, #29
 800b088:	d82c      	bhi.n	800b0e4 <__sflush_r+0xb8>
 800b08a:	4a2a      	ldr	r2, [pc, #168]	; (800b134 <__sflush_r+0x108>)
 800b08c:	40ca      	lsrs	r2, r1
 800b08e:	07d6      	lsls	r6, r2, #31
 800b090:	d528      	bpl.n	800b0e4 <__sflush_r+0xb8>
 800b092:	2200      	movs	r2, #0
 800b094:	6062      	str	r2, [r4, #4]
 800b096:	04d9      	lsls	r1, r3, #19
 800b098:	6922      	ldr	r2, [r4, #16]
 800b09a:	6022      	str	r2, [r4, #0]
 800b09c:	d504      	bpl.n	800b0a8 <__sflush_r+0x7c>
 800b09e:	1c42      	adds	r2, r0, #1
 800b0a0:	d101      	bne.n	800b0a6 <__sflush_r+0x7a>
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	b903      	cbnz	r3, 800b0a8 <__sflush_r+0x7c>
 800b0a6:	6560      	str	r0, [r4, #84]	; 0x54
 800b0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0aa:	602f      	str	r7, [r5, #0]
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	d0ca      	beq.n	800b046 <__sflush_r+0x1a>
 800b0b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0b4:	4299      	cmp	r1, r3
 800b0b6:	d002      	beq.n	800b0be <__sflush_r+0x92>
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f7ff f94f 	bl	800a35c <_free_r>
 800b0be:	2000      	movs	r0, #0
 800b0c0:	6360      	str	r0, [r4, #52]	; 0x34
 800b0c2:	e7c1      	b.n	800b048 <__sflush_r+0x1c>
 800b0c4:	6a21      	ldr	r1, [r4, #32]
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b0      	blx	r6
 800b0cc:	1c41      	adds	r1, r0, #1
 800b0ce:	d1c7      	bne.n	800b060 <__sflush_r+0x34>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0c4      	beq.n	800b060 <__sflush_r+0x34>
 800b0d6:	2b1d      	cmp	r3, #29
 800b0d8:	d001      	beq.n	800b0de <__sflush_r+0xb2>
 800b0da:	2b16      	cmp	r3, #22
 800b0dc:	d101      	bne.n	800b0e2 <__sflush_r+0xb6>
 800b0de:	602f      	str	r7, [r5, #0]
 800b0e0:	e7b1      	b.n	800b046 <__sflush_r+0x1a>
 800b0e2:	89a3      	ldrh	r3, [r4, #12]
 800b0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e8:	81a3      	strh	r3, [r4, #12]
 800b0ea:	e7ad      	b.n	800b048 <__sflush_r+0x1c>
 800b0ec:	690f      	ldr	r7, [r1, #16]
 800b0ee:	2f00      	cmp	r7, #0
 800b0f0:	d0a9      	beq.n	800b046 <__sflush_r+0x1a>
 800b0f2:	0793      	lsls	r3, r2, #30
 800b0f4:	680e      	ldr	r6, [r1, #0]
 800b0f6:	bf08      	it	eq
 800b0f8:	694b      	ldreq	r3, [r1, #20]
 800b0fa:	600f      	str	r7, [r1, #0]
 800b0fc:	bf18      	it	ne
 800b0fe:	2300      	movne	r3, #0
 800b100:	eba6 0807 	sub.w	r8, r6, r7
 800b104:	608b      	str	r3, [r1, #8]
 800b106:	f1b8 0f00 	cmp.w	r8, #0
 800b10a:	dd9c      	ble.n	800b046 <__sflush_r+0x1a>
 800b10c:	6a21      	ldr	r1, [r4, #32]
 800b10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b110:	4643      	mov	r3, r8
 800b112:	463a      	mov	r2, r7
 800b114:	4628      	mov	r0, r5
 800b116:	47b0      	blx	r6
 800b118:	2800      	cmp	r0, #0
 800b11a:	dc06      	bgt.n	800b12a <__sflush_r+0xfe>
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	f04f 30ff 	mov.w	r0, #4294967295
 800b128:	e78e      	b.n	800b048 <__sflush_r+0x1c>
 800b12a:	4407      	add	r7, r0
 800b12c:	eba8 0800 	sub.w	r8, r8, r0
 800b130:	e7e9      	b.n	800b106 <__sflush_r+0xda>
 800b132:	bf00      	nop
 800b134:	20400001 	.word	0x20400001

0800b138 <_fflush_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	690b      	ldr	r3, [r1, #16]
 800b13c:	4605      	mov	r5, r0
 800b13e:	460c      	mov	r4, r1
 800b140:	b913      	cbnz	r3, 800b148 <_fflush_r+0x10>
 800b142:	2500      	movs	r5, #0
 800b144:	4628      	mov	r0, r5
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	b118      	cbz	r0, 800b152 <_fflush_r+0x1a>
 800b14a:	6983      	ldr	r3, [r0, #24]
 800b14c:	b90b      	cbnz	r3, 800b152 <_fflush_r+0x1a>
 800b14e:	f000 f887 	bl	800b260 <__sinit>
 800b152:	4b14      	ldr	r3, [pc, #80]	; (800b1a4 <_fflush_r+0x6c>)
 800b154:	429c      	cmp	r4, r3
 800b156:	d11b      	bne.n	800b190 <_fflush_r+0x58>
 800b158:	686c      	ldr	r4, [r5, #4]
 800b15a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0ef      	beq.n	800b142 <_fflush_r+0xa>
 800b162:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b164:	07d0      	lsls	r0, r2, #31
 800b166:	d404      	bmi.n	800b172 <_fflush_r+0x3a>
 800b168:	0599      	lsls	r1, r3, #22
 800b16a:	d402      	bmi.n	800b172 <_fflush_r+0x3a>
 800b16c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b16e:	f000 f915 	bl	800b39c <__retarget_lock_acquire_recursive>
 800b172:	4628      	mov	r0, r5
 800b174:	4621      	mov	r1, r4
 800b176:	f7ff ff59 	bl	800b02c <__sflush_r>
 800b17a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b17c:	07da      	lsls	r2, r3, #31
 800b17e:	4605      	mov	r5, r0
 800b180:	d4e0      	bmi.n	800b144 <_fflush_r+0xc>
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	059b      	lsls	r3, r3, #22
 800b186:	d4dd      	bmi.n	800b144 <_fflush_r+0xc>
 800b188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b18a:	f000 f908 	bl	800b39e <__retarget_lock_release_recursive>
 800b18e:	e7d9      	b.n	800b144 <_fflush_r+0xc>
 800b190:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <_fflush_r+0x70>)
 800b192:	429c      	cmp	r4, r3
 800b194:	d101      	bne.n	800b19a <_fflush_r+0x62>
 800b196:	68ac      	ldr	r4, [r5, #8]
 800b198:	e7df      	b.n	800b15a <_fflush_r+0x22>
 800b19a:	4b04      	ldr	r3, [pc, #16]	; (800b1ac <_fflush_r+0x74>)
 800b19c:	429c      	cmp	r4, r3
 800b19e:	bf08      	it	eq
 800b1a0:	68ec      	ldreq	r4, [r5, #12]
 800b1a2:	e7da      	b.n	800b15a <_fflush_r+0x22>
 800b1a4:	0800ebc4 	.word	0x0800ebc4
 800b1a8:	0800ebe4 	.word	0x0800ebe4
 800b1ac:	0800eba4 	.word	0x0800eba4

0800b1b0 <std>:
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	b510      	push	{r4, lr}
 800b1b4:	4604      	mov	r4, r0
 800b1b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1be:	6083      	str	r3, [r0, #8]
 800b1c0:	8181      	strh	r1, [r0, #12]
 800b1c2:	6643      	str	r3, [r0, #100]	; 0x64
 800b1c4:	81c2      	strh	r2, [r0, #14]
 800b1c6:	6183      	str	r3, [r0, #24]
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	2208      	movs	r2, #8
 800b1cc:	305c      	adds	r0, #92	; 0x5c
 800b1ce:	f7ff f8bd 	bl	800a34c <memset>
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <std+0x38>)
 800b1d4:	6263      	str	r3, [r4, #36]	; 0x24
 800b1d6:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <std+0x3c>)
 800b1d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1da:	4b05      	ldr	r3, [pc, #20]	; (800b1f0 <std+0x40>)
 800b1dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1de:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <std+0x44>)
 800b1e0:	6224      	str	r4, [r4, #32]
 800b1e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1e4:	bd10      	pop	{r4, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0800b58d 	.word	0x0800b58d
 800b1ec:	0800b5af 	.word	0x0800b5af
 800b1f0:	0800b5e7 	.word	0x0800b5e7
 800b1f4:	0800b60b 	.word	0x0800b60b

0800b1f8 <_cleanup_r>:
 800b1f8:	4901      	ldr	r1, [pc, #4]	; (800b200 <_cleanup_r+0x8>)
 800b1fa:	f000 b8af 	b.w	800b35c <_fwalk_reent>
 800b1fe:	bf00      	nop
 800b200:	0800b139 	.word	0x0800b139

0800b204 <__sfmoreglue>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	1e4a      	subs	r2, r1, #1
 800b208:	2568      	movs	r5, #104	; 0x68
 800b20a:	4355      	muls	r5, r2
 800b20c:	460e      	mov	r6, r1
 800b20e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b212:	f7ff f8f3 	bl	800a3fc <_malloc_r>
 800b216:	4604      	mov	r4, r0
 800b218:	b140      	cbz	r0, 800b22c <__sfmoreglue+0x28>
 800b21a:	2100      	movs	r1, #0
 800b21c:	e9c0 1600 	strd	r1, r6, [r0]
 800b220:	300c      	adds	r0, #12
 800b222:	60a0      	str	r0, [r4, #8]
 800b224:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b228:	f7ff f890 	bl	800a34c <memset>
 800b22c:	4620      	mov	r0, r4
 800b22e:	bd70      	pop	{r4, r5, r6, pc}

0800b230 <__sfp_lock_acquire>:
 800b230:	4801      	ldr	r0, [pc, #4]	; (800b238 <__sfp_lock_acquire+0x8>)
 800b232:	f000 b8b3 	b.w	800b39c <__retarget_lock_acquire_recursive>
 800b236:	bf00      	nop
 800b238:	20000ca4 	.word	0x20000ca4

0800b23c <__sfp_lock_release>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__sfp_lock_release+0x8>)
 800b23e:	f000 b8ae 	b.w	800b39e <__retarget_lock_release_recursive>
 800b242:	bf00      	nop
 800b244:	20000ca4 	.word	0x20000ca4

0800b248 <__sinit_lock_acquire>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__sinit_lock_acquire+0x8>)
 800b24a:	f000 b8a7 	b.w	800b39c <__retarget_lock_acquire_recursive>
 800b24e:	bf00      	nop
 800b250:	20000c9f 	.word	0x20000c9f

0800b254 <__sinit_lock_release>:
 800b254:	4801      	ldr	r0, [pc, #4]	; (800b25c <__sinit_lock_release+0x8>)
 800b256:	f000 b8a2 	b.w	800b39e <__retarget_lock_release_recursive>
 800b25a:	bf00      	nop
 800b25c:	20000c9f 	.word	0x20000c9f

0800b260 <__sinit>:
 800b260:	b510      	push	{r4, lr}
 800b262:	4604      	mov	r4, r0
 800b264:	f7ff fff0 	bl	800b248 <__sinit_lock_acquire>
 800b268:	69a3      	ldr	r3, [r4, #24]
 800b26a:	b11b      	cbz	r3, 800b274 <__sinit+0x14>
 800b26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b270:	f7ff bff0 	b.w	800b254 <__sinit_lock_release>
 800b274:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b278:	6523      	str	r3, [r4, #80]	; 0x50
 800b27a:	4b13      	ldr	r3, [pc, #76]	; (800b2c8 <__sinit+0x68>)
 800b27c:	4a13      	ldr	r2, [pc, #76]	; (800b2cc <__sinit+0x6c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	62a2      	str	r2, [r4, #40]	; 0x28
 800b282:	42a3      	cmp	r3, r4
 800b284:	bf04      	itt	eq
 800b286:	2301      	moveq	r3, #1
 800b288:	61a3      	streq	r3, [r4, #24]
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f820 	bl	800b2d0 <__sfp>
 800b290:	6060      	str	r0, [r4, #4]
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f81c 	bl	800b2d0 <__sfp>
 800b298:	60a0      	str	r0, [r4, #8]
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f818 	bl	800b2d0 <__sfp>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	60e0      	str	r0, [r4, #12]
 800b2a4:	2104      	movs	r1, #4
 800b2a6:	6860      	ldr	r0, [r4, #4]
 800b2a8:	f7ff ff82 	bl	800b1b0 <std>
 800b2ac:	68a0      	ldr	r0, [r4, #8]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	2109      	movs	r1, #9
 800b2b2:	f7ff ff7d 	bl	800b1b0 <std>
 800b2b6:	68e0      	ldr	r0, [r4, #12]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	2112      	movs	r1, #18
 800b2bc:	f7ff ff78 	bl	800b1b0 <std>
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	61a3      	str	r3, [r4, #24]
 800b2c4:	e7d2      	b.n	800b26c <__sinit+0xc>
 800b2c6:	bf00      	nop
 800b2c8:	0800eab8 	.word	0x0800eab8
 800b2cc:	0800b1f9 	.word	0x0800b1f9

0800b2d0 <__sfp>:
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	f7ff ffac 	bl	800b230 <__sfp_lock_acquire>
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <__sfp+0x84>)
 800b2da:	681e      	ldr	r6, [r3, #0]
 800b2dc:	69b3      	ldr	r3, [r6, #24]
 800b2de:	b913      	cbnz	r3, 800b2e6 <__sfp+0x16>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ffbd 	bl	800b260 <__sinit>
 800b2e6:	3648      	adds	r6, #72	; 0x48
 800b2e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2ec:	3b01      	subs	r3, #1
 800b2ee:	d503      	bpl.n	800b2f8 <__sfp+0x28>
 800b2f0:	6833      	ldr	r3, [r6, #0]
 800b2f2:	b30b      	cbz	r3, 800b338 <__sfp+0x68>
 800b2f4:	6836      	ldr	r6, [r6, #0]
 800b2f6:	e7f7      	b.n	800b2e8 <__sfp+0x18>
 800b2f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2fc:	b9d5      	cbnz	r5, 800b334 <__sfp+0x64>
 800b2fe:	4b16      	ldr	r3, [pc, #88]	; (800b358 <__sfp+0x88>)
 800b300:	60e3      	str	r3, [r4, #12]
 800b302:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b306:	6665      	str	r5, [r4, #100]	; 0x64
 800b308:	f000 f847 	bl	800b39a <__retarget_lock_init_recursive>
 800b30c:	f7ff ff96 	bl	800b23c <__sfp_lock_release>
 800b310:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b314:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b318:	6025      	str	r5, [r4, #0]
 800b31a:	61a5      	str	r5, [r4, #24]
 800b31c:	2208      	movs	r2, #8
 800b31e:	4629      	mov	r1, r5
 800b320:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b324:	f7ff f812 	bl	800a34c <memset>
 800b328:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b32c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b330:	4620      	mov	r0, r4
 800b332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b334:	3468      	adds	r4, #104	; 0x68
 800b336:	e7d9      	b.n	800b2ec <__sfp+0x1c>
 800b338:	2104      	movs	r1, #4
 800b33a:	4638      	mov	r0, r7
 800b33c:	f7ff ff62 	bl	800b204 <__sfmoreglue>
 800b340:	4604      	mov	r4, r0
 800b342:	6030      	str	r0, [r6, #0]
 800b344:	2800      	cmp	r0, #0
 800b346:	d1d5      	bne.n	800b2f4 <__sfp+0x24>
 800b348:	f7ff ff78 	bl	800b23c <__sfp_lock_release>
 800b34c:	230c      	movs	r3, #12
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	e7ee      	b.n	800b330 <__sfp+0x60>
 800b352:	bf00      	nop
 800b354:	0800eab8 	.word	0x0800eab8
 800b358:	ffff0001 	.word	0xffff0001

0800b35c <_fwalk_reent>:
 800b35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b360:	4606      	mov	r6, r0
 800b362:	4688      	mov	r8, r1
 800b364:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b368:	2700      	movs	r7, #0
 800b36a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b36e:	f1b9 0901 	subs.w	r9, r9, #1
 800b372:	d505      	bpl.n	800b380 <_fwalk_reent+0x24>
 800b374:	6824      	ldr	r4, [r4, #0]
 800b376:	2c00      	cmp	r4, #0
 800b378:	d1f7      	bne.n	800b36a <_fwalk_reent+0xe>
 800b37a:	4638      	mov	r0, r7
 800b37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b380:	89ab      	ldrh	r3, [r5, #12]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d907      	bls.n	800b396 <_fwalk_reent+0x3a>
 800b386:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b38a:	3301      	adds	r3, #1
 800b38c:	d003      	beq.n	800b396 <_fwalk_reent+0x3a>
 800b38e:	4629      	mov	r1, r5
 800b390:	4630      	mov	r0, r6
 800b392:	47c0      	blx	r8
 800b394:	4307      	orrs	r7, r0
 800b396:	3568      	adds	r5, #104	; 0x68
 800b398:	e7e9      	b.n	800b36e <_fwalk_reent+0x12>

0800b39a <__retarget_lock_init_recursive>:
 800b39a:	4770      	bx	lr

0800b39c <__retarget_lock_acquire_recursive>:
 800b39c:	4770      	bx	lr

0800b39e <__retarget_lock_release_recursive>:
 800b39e:	4770      	bx	lr

0800b3a0 <__swhatbuf_r>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	460e      	mov	r6, r1
 800b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a8:	2900      	cmp	r1, #0
 800b3aa:	b096      	sub	sp, #88	; 0x58
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	da07      	bge.n	800b3c2 <__swhatbuf_r+0x22>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	89b3      	ldrh	r3, [r6, #12]
 800b3b8:	061a      	lsls	r2, r3, #24
 800b3ba:	d410      	bmi.n	800b3de <__swhatbuf_r+0x3e>
 800b3bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3c0:	e00e      	b.n	800b3e0 <__swhatbuf_r+0x40>
 800b3c2:	466a      	mov	r2, sp
 800b3c4:	f000 f948 	bl	800b658 <_fstat_r>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	dbf2      	blt.n	800b3b2 <__swhatbuf_r+0x12>
 800b3cc:	9a01      	ldr	r2, [sp, #4]
 800b3ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3d6:	425a      	negs	r2, r3
 800b3d8:	415a      	adcs	r2, r3
 800b3da:	602a      	str	r2, [r5, #0]
 800b3dc:	e7ee      	b.n	800b3bc <__swhatbuf_r+0x1c>
 800b3de:	2340      	movs	r3, #64	; 0x40
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	6023      	str	r3, [r4, #0]
 800b3e4:	b016      	add	sp, #88	; 0x58
 800b3e6:	bd70      	pop	{r4, r5, r6, pc}

0800b3e8 <__smakebuf_r>:
 800b3e8:	898b      	ldrh	r3, [r1, #12]
 800b3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3ec:	079d      	lsls	r5, r3, #30
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	d507      	bpl.n	800b404 <__smakebuf_r+0x1c>
 800b3f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	6123      	str	r3, [r4, #16]
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	6163      	str	r3, [r4, #20]
 800b400:	b002      	add	sp, #8
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	ab01      	add	r3, sp, #4
 800b406:	466a      	mov	r2, sp
 800b408:	f7ff ffca 	bl	800b3a0 <__swhatbuf_r>
 800b40c:	9900      	ldr	r1, [sp, #0]
 800b40e:	4605      	mov	r5, r0
 800b410:	4630      	mov	r0, r6
 800b412:	f7fe fff3 	bl	800a3fc <_malloc_r>
 800b416:	b948      	cbnz	r0, 800b42c <__smakebuf_r+0x44>
 800b418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41c:	059a      	lsls	r2, r3, #22
 800b41e:	d4ef      	bmi.n	800b400 <__smakebuf_r+0x18>
 800b420:	f023 0303 	bic.w	r3, r3, #3
 800b424:	f043 0302 	orr.w	r3, r3, #2
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	e7e3      	b.n	800b3f4 <__smakebuf_r+0xc>
 800b42c:	4b0d      	ldr	r3, [pc, #52]	; (800b464 <__smakebuf_r+0x7c>)
 800b42e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	6020      	str	r0, [r4, #0]
 800b434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b438:	81a3      	strh	r3, [r4, #12]
 800b43a:	9b00      	ldr	r3, [sp, #0]
 800b43c:	6163      	str	r3, [r4, #20]
 800b43e:	9b01      	ldr	r3, [sp, #4]
 800b440:	6120      	str	r0, [r4, #16]
 800b442:	b15b      	cbz	r3, 800b45c <__smakebuf_r+0x74>
 800b444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 f917 	bl	800b67c <_isatty_r>
 800b44e:	b128      	cbz	r0, 800b45c <__smakebuf_r+0x74>
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	f023 0303 	bic.w	r3, r3, #3
 800b456:	f043 0301 	orr.w	r3, r3, #1
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	89a0      	ldrh	r0, [r4, #12]
 800b45e:	4305      	orrs	r5, r0
 800b460:	81a5      	strh	r5, [r4, #12]
 800b462:	e7cd      	b.n	800b400 <__smakebuf_r+0x18>
 800b464:	0800b1f9 	.word	0x0800b1f9

0800b468 <memcpy>:
 800b468:	440a      	add	r2, r1
 800b46a:	4291      	cmp	r1, r2
 800b46c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b470:	d100      	bne.n	800b474 <memcpy+0xc>
 800b472:	4770      	bx	lr
 800b474:	b510      	push	{r4, lr}
 800b476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b47a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b47e:	4291      	cmp	r1, r2
 800b480:	d1f9      	bne.n	800b476 <memcpy+0xe>
 800b482:	bd10      	pop	{r4, pc}

0800b484 <memmove>:
 800b484:	4288      	cmp	r0, r1
 800b486:	b510      	push	{r4, lr}
 800b488:	eb01 0402 	add.w	r4, r1, r2
 800b48c:	d902      	bls.n	800b494 <memmove+0x10>
 800b48e:	4284      	cmp	r4, r0
 800b490:	4623      	mov	r3, r4
 800b492:	d807      	bhi.n	800b4a4 <memmove+0x20>
 800b494:	1e43      	subs	r3, r0, #1
 800b496:	42a1      	cmp	r1, r4
 800b498:	d008      	beq.n	800b4ac <memmove+0x28>
 800b49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4a2:	e7f8      	b.n	800b496 <memmove+0x12>
 800b4a4:	4402      	add	r2, r0
 800b4a6:	4601      	mov	r1, r0
 800b4a8:	428a      	cmp	r2, r1
 800b4aa:	d100      	bne.n	800b4ae <memmove+0x2a>
 800b4ac:	bd10      	pop	{r4, pc}
 800b4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4b6:	e7f7      	b.n	800b4a8 <memmove+0x24>

0800b4b8 <_realloc_r>:
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	4614      	mov	r4, r2
 800b4be:	460e      	mov	r6, r1
 800b4c0:	b921      	cbnz	r1, 800b4cc <_realloc_r+0x14>
 800b4c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	f7fe bf98 	b.w	800a3fc <_malloc_r>
 800b4cc:	b922      	cbnz	r2, 800b4d8 <_realloc_r+0x20>
 800b4ce:	f7fe ff45 	bl	800a35c <_free_r>
 800b4d2:	4625      	mov	r5, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4d8:	f000 f8f2 	bl	800b6c0 <_malloc_usable_size_r>
 800b4dc:	42a0      	cmp	r0, r4
 800b4de:	d20f      	bcs.n	800b500 <_realloc_r+0x48>
 800b4e0:	4621      	mov	r1, r4
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	f7fe ff8a 	bl	800a3fc <_malloc_r>
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d0f2      	beq.n	800b4d4 <_realloc_r+0x1c>
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	f7ff ffb9 	bl	800b468 <memcpy>
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f7fe ff2f 	bl	800a35c <_free_r>
 800b4fe:	e7e9      	b.n	800b4d4 <_realloc_r+0x1c>
 800b500:	4635      	mov	r5, r6
 800b502:	e7e7      	b.n	800b4d4 <_realloc_r+0x1c>

0800b504 <_raise_r>:
 800b504:	291f      	cmp	r1, #31
 800b506:	b538      	push	{r3, r4, r5, lr}
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	d904      	bls.n	800b518 <_raise_r+0x14>
 800b50e:	2316      	movs	r3, #22
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b51a:	b112      	cbz	r2, 800b522 <_raise_r+0x1e>
 800b51c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b520:	b94b      	cbnz	r3, 800b536 <_raise_r+0x32>
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f830 	bl	800b588 <_getpid_r>
 800b528:	462a      	mov	r2, r5
 800b52a:	4601      	mov	r1, r0
 800b52c:	4620      	mov	r0, r4
 800b52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b532:	f000 b817 	b.w	800b564 <_kill_r>
 800b536:	2b01      	cmp	r3, #1
 800b538:	d00a      	beq.n	800b550 <_raise_r+0x4c>
 800b53a:	1c59      	adds	r1, r3, #1
 800b53c:	d103      	bne.n	800b546 <_raise_r+0x42>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	2001      	movs	r0, #1
 800b544:	e7e7      	b.n	800b516 <_raise_r+0x12>
 800b546:	2400      	movs	r4, #0
 800b548:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b54c:	4628      	mov	r0, r5
 800b54e:	4798      	blx	r3
 800b550:	2000      	movs	r0, #0
 800b552:	e7e0      	b.n	800b516 <_raise_r+0x12>

0800b554 <raise>:
 800b554:	4b02      	ldr	r3, [pc, #8]	; (800b560 <raise+0xc>)
 800b556:	4601      	mov	r1, r0
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f7ff bfd3 	b.w	800b504 <_raise_r>
 800b55e:	bf00      	nop
 800b560:	2000007c 	.word	0x2000007c

0800b564 <_kill_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d07      	ldr	r5, [pc, #28]	; (800b584 <_kill_r+0x20>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	f7f9 f821 	bl	80045b8 <_kill>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d102      	bne.n	800b580 <_kill_r+0x1c>
 800b57a:	682b      	ldr	r3, [r5, #0]
 800b57c:	b103      	cbz	r3, 800b580 <_kill_r+0x1c>
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	bd38      	pop	{r3, r4, r5, pc}
 800b582:	bf00      	nop
 800b584:	20000c98 	.word	0x20000c98

0800b588 <_getpid_r>:
 800b588:	f7f9 b80e 	b.w	80045a8 <_getpid>

0800b58c <__sread>:
 800b58c:	b510      	push	{r4, lr}
 800b58e:	460c      	mov	r4, r1
 800b590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b594:	f000 f89c 	bl	800b6d0 <_read_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	bfab      	itete	ge
 800b59c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b59e:	89a3      	ldrhlt	r3, [r4, #12]
 800b5a0:	181b      	addge	r3, r3, r0
 800b5a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5a6:	bfac      	ite	ge
 800b5a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5aa:	81a3      	strhlt	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__swrite>:
 800b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	461f      	mov	r7, r3
 800b5b4:	898b      	ldrh	r3, [r1, #12]
 800b5b6:	05db      	lsls	r3, r3, #23
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4616      	mov	r6, r2
 800b5be:	d505      	bpl.n	800b5cc <__swrite+0x1e>
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f000 f868 	bl	800b69c <_lseek_r>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	4632      	mov	r2, r6
 800b5da:	463b      	mov	r3, r7
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	f000 b817 	b.w	800b614 <_write_r>

0800b5e6 <__sseek>:
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ee:	f000 f855 	bl	800b69c <_lseek_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	bf15      	itete	ne
 800b5f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b602:	81a3      	strheq	r3, [r4, #12]
 800b604:	bf18      	it	ne
 800b606:	81a3      	strhne	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__sclose>:
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 b813 	b.w	800b638 <_close_r>
	...

0800b614 <_write_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d07      	ldr	r5, [pc, #28]	; (800b634 <_write_r+0x20>)
 800b618:	4604      	mov	r4, r0
 800b61a:	4608      	mov	r0, r1
 800b61c:	4611      	mov	r1, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	602a      	str	r2, [r5, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	f7f8 ffff 	bl	8004626 <_write>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_write_r+0x1e>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_write_r+0x1e>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20000c98 	.word	0x20000c98

0800b638 <_close_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4d06      	ldr	r5, [pc, #24]	; (800b654 <_close_r+0x1c>)
 800b63c:	2300      	movs	r3, #0
 800b63e:	4604      	mov	r4, r0
 800b640:	4608      	mov	r0, r1
 800b642:	602b      	str	r3, [r5, #0]
 800b644:	f7f9 f80b 	bl	800465e <_close>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d102      	bne.n	800b652 <_close_r+0x1a>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	b103      	cbz	r3, 800b652 <_close_r+0x1a>
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	20000c98 	.word	0x20000c98

0800b658 <_fstat_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d07      	ldr	r5, [pc, #28]	; (800b678 <_fstat_r+0x20>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	4611      	mov	r1, r2
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	f7f9 f806 	bl	8004676 <_fstat>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	d102      	bne.n	800b674 <_fstat_r+0x1c>
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	b103      	cbz	r3, 800b674 <_fstat_r+0x1c>
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	bd38      	pop	{r3, r4, r5, pc}
 800b676:	bf00      	nop
 800b678:	20000c98 	.word	0x20000c98

0800b67c <_isatty_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4d06      	ldr	r5, [pc, #24]	; (800b698 <_isatty_r+0x1c>)
 800b680:	2300      	movs	r3, #0
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	f7f9 f805 	bl	8004696 <_isatty>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_isatty_r+0x1a>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_isatty_r+0x1a>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20000c98 	.word	0x20000c98

0800b69c <_lseek_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_lseek_r+0x20>)
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f7f8 fffe 	bl	80046ac <_lseek>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_lseek_r+0x1e>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_lseek_r+0x1e>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20000c98 	.word	0x20000c98

0800b6c0 <_malloc_usable_size_r>:
 800b6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c4:	1f18      	subs	r0, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	bfbc      	itt	lt
 800b6ca:	580b      	ldrlt	r3, [r1, r0]
 800b6cc:	18c0      	addlt	r0, r0, r3
 800b6ce:	4770      	bx	lr

0800b6d0 <_read_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d07      	ldr	r5, [pc, #28]	; (800b6f0 <_read_r+0x20>)
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	4611      	mov	r1, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	602a      	str	r2, [r5, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f7f8 ff84 	bl	80045ec <_read>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_read_r+0x1e>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_read_r+0x1e>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	20000c98 	.word	0x20000c98

0800b6f4 <sqrt>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	ed2d 8b02 	vpush	{d8}
 800b6fa:	ec55 4b10 	vmov	r4, r5, d0
 800b6fe:	f000 f82d 	bl	800b75c <__ieee754_sqrt>
 800b702:	4b15      	ldr	r3, [pc, #84]	; (800b758 <sqrt+0x64>)
 800b704:	eeb0 8a40 	vmov.f32	s16, s0
 800b708:	eef0 8a60 	vmov.f32	s17, s1
 800b70c:	f993 3000 	ldrsb.w	r3, [r3]
 800b710:	3301      	adds	r3, #1
 800b712:	d019      	beq.n	800b748 <sqrt+0x54>
 800b714:	4622      	mov	r2, r4
 800b716:	462b      	mov	r3, r5
 800b718:	4620      	mov	r0, r4
 800b71a:	4629      	mov	r1, r5
 800b71c:	f7f5 f9fe 	bl	8000b1c <__aeabi_dcmpun>
 800b720:	b990      	cbnz	r0, 800b748 <sqrt+0x54>
 800b722:	2200      	movs	r2, #0
 800b724:	2300      	movs	r3, #0
 800b726:	4620      	mov	r0, r4
 800b728:	4629      	mov	r1, r5
 800b72a:	f7f5 f9cf 	bl	8000acc <__aeabi_dcmplt>
 800b72e:	b158      	cbz	r0, 800b748 <sqrt+0x54>
 800b730:	f7fe fdda 	bl	800a2e8 <__errno>
 800b734:	2321      	movs	r3, #33	; 0x21
 800b736:	6003      	str	r3, [r0, #0]
 800b738:	2200      	movs	r2, #0
 800b73a:	2300      	movs	r3, #0
 800b73c:	4610      	mov	r0, r2
 800b73e:	4619      	mov	r1, r3
 800b740:	f7f5 f87c 	bl	800083c <__aeabi_ddiv>
 800b744:	ec41 0b18 	vmov	d8, r0, r1
 800b748:	eeb0 0a48 	vmov.f32	s0, s16
 800b74c:	eef0 0a68 	vmov.f32	s1, s17
 800b750:	ecbd 8b02 	vpop	{d8}
 800b754:	bd38      	pop	{r3, r4, r5, pc}
 800b756:	bf00      	nop
 800b758:	200000e0 	.word	0x200000e0

0800b75c <__ieee754_sqrt>:
 800b75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b760:	ec55 4b10 	vmov	r4, r5, d0
 800b764:	4e56      	ldr	r6, [pc, #344]	; (800b8c0 <__ieee754_sqrt+0x164>)
 800b766:	43ae      	bics	r6, r5
 800b768:	ee10 0a10 	vmov	r0, s0
 800b76c:	ee10 3a10 	vmov	r3, s0
 800b770:	4629      	mov	r1, r5
 800b772:	462a      	mov	r2, r5
 800b774:	d110      	bne.n	800b798 <__ieee754_sqrt+0x3c>
 800b776:	ee10 2a10 	vmov	r2, s0
 800b77a:	462b      	mov	r3, r5
 800b77c:	f7f4 ff34 	bl	80005e8 <__aeabi_dmul>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4620      	mov	r0, r4
 800b786:	4629      	mov	r1, r5
 800b788:	f7f4 fd78 	bl	800027c <__adddf3>
 800b78c:	4604      	mov	r4, r0
 800b78e:	460d      	mov	r5, r1
 800b790:	ec45 4b10 	vmov	d0, r4, r5
 800b794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b798:	2d00      	cmp	r5, #0
 800b79a:	dc10      	bgt.n	800b7be <__ieee754_sqrt+0x62>
 800b79c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b7a0:	4330      	orrs	r0, r6
 800b7a2:	d0f5      	beq.n	800b790 <__ieee754_sqrt+0x34>
 800b7a4:	b15d      	cbz	r5, 800b7be <__ieee754_sqrt+0x62>
 800b7a6:	ee10 2a10 	vmov	r2, s0
 800b7aa:	462b      	mov	r3, r5
 800b7ac:	ee10 0a10 	vmov	r0, s0
 800b7b0:	f7f4 fd62 	bl	8000278 <__aeabi_dsub>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	f7f5 f840 	bl	800083c <__aeabi_ddiv>
 800b7bc:	e7e6      	b.n	800b78c <__ieee754_sqrt+0x30>
 800b7be:	1509      	asrs	r1, r1, #20
 800b7c0:	d076      	beq.n	800b8b0 <__ieee754_sqrt+0x154>
 800b7c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b7c6:	07ce      	lsls	r6, r1, #31
 800b7c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800b7cc:	bf5e      	ittt	pl
 800b7ce:	0fda      	lsrpl	r2, r3, #31
 800b7d0:	005b      	lslpl	r3, r3, #1
 800b7d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800b7d6:	0fda      	lsrs	r2, r3, #31
 800b7d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800b7dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	106d      	asrs	r5, r5, #1
 800b7e4:	005b      	lsls	r3, r3, #1
 800b7e6:	f04f 0e16 	mov.w	lr, #22
 800b7ea:	4684      	mov	ip, r0
 800b7ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b7f0:	eb0c 0401 	add.w	r4, ip, r1
 800b7f4:	4294      	cmp	r4, r2
 800b7f6:	bfde      	ittt	le
 800b7f8:	1b12      	suble	r2, r2, r4
 800b7fa:	eb04 0c01 	addle.w	ip, r4, r1
 800b7fe:	1840      	addle	r0, r0, r1
 800b800:	0052      	lsls	r2, r2, #1
 800b802:	f1be 0e01 	subs.w	lr, lr, #1
 800b806:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b80a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b80e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b812:	d1ed      	bne.n	800b7f0 <__ieee754_sqrt+0x94>
 800b814:	4671      	mov	r1, lr
 800b816:	2720      	movs	r7, #32
 800b818:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800b81c:	4562      	cmp	r2, ip
 800b81e:	eb04 060e 	add.w	r6, r4, lr
 800b822:	dc02      	bgt.n	800b82a <__ieee754_sqrt+0xce>
 800b824:	d113      	bne.n	800b84e <__ieee754_sqrt+0xf2>
 800b826:	429e      	cmp	r6, r3
 800b828:	d811      	bhi.n	800b84e <__ieee754_sqrt+0xf2>
 800b82a:	2e00      	cmp	r6, #0
 800b82c:	eb06 0e04 	add.w	lr, r6, r4
 800b830:	da43      	bge.n	800b8ba <__ieee754_sqrt+0x15e>
 800b832:	f1be 0f00 	cmp.w	lr, #0
 800b836:	db40      	blt.n	800b8ba <__ieee754_sqrt+0x15e>
 800b838:	f10c 0801 	add.w	r8, ip, #1
 800b83c:	eba2 020c 	sub.w	r2, r2, ip
 800b840:	429e      	cmp	r6, r3
 800b842:	bf88      	it	hi
 800b844:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b848:	1b9b      	subs	r3, r3, r6
 800b84a:	4421      	add	r1, r4
 800b84c:	46c4      	mov	ip, r8
 800b84e:	0052      	lsls	r2, r2, #1
 800b850:	3f01      	subs	r7, #1
 800b852:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b856:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b85a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b85e:	d1dd      	bne.n	800b81c <__ieee754_sqrt+0xc0>
 800b860:	4313      	orrs	r3, r2
 800b862:	d006      	beq.n	800b872 <__ieee754_sqrt+0x116>
 800b864:	1c4c      	adds	r4, r1, #1
 800b866:	bf13      	iteet	ne
 800b868:	3101      	addne	r1, #1
 800b86a:	3001      	addeq	r0, #1
 800b86c:	4639      	moveq	r1, r7
 800b86e:	f021 0101 	bicne.w	r1, r1, #1
 800b872:	1043      	asrs	r3, r0, #1
 800b874:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b878:	0849      	lsrs	r1, r1, #1
 800b87a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b87e:	07c2      	lsls	r2, r0, #31
 800b880:	bf48      	it	mi
 800b882:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b886:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800b88a:	460c      	mov	r4, r1
 800b88c:	463d      	mov	r5, r7
 800b88e:	e77f      	b.n	800b790 <__ieee754_sqrt+0x34>
 800b890:	0ada      	lsrs	r2, r3, #11
 800b892:	3815      	subs	r0, #21
 800b894:	055b      	lsls	r3, r3, #21
 800b896:	2a00      	cmp	r2, #0
 800b898:	d0fa      	beq.n	800b890 <__ieee754_sqrt+0x134>
 800b89a:	02d7      	lsls	r7, r2, #11
 800b89c:	d50a      	bpl.n	800b8b4 <__ieee754_sqrt+0x158>
 800b89e:	f1c1 0420 	rsb	r4, r1, #32
 800b8a2:	fa23 f404 	lsr.w	r4, r3, r4
 800b8a6:	1e4d      	subs	r5, r1, #1
 800b8a8:	408b      	lsls	r3, r1
 800b8aa:	4322      	orrs	r2, r4
 800b8ac:	1b41      	subs	r1, r0, r5
 800b8ae:	e788      	b.n	800b7c2 <__ieee754_sqrt+0x66>
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	e7f0      	b.n	800b896 <__ieee754_sqrt+0x13a>
 800b8b4:	0052      	lsls	r2, r2, #1
 800b8b6:	3101      	adds	r1, #1
 800b8b8:	e7ef      	b.n	800b89a <__ieee754_sqrt+0x13e>
 800b8ba:	46e0      	mov	r8, ip
 800b8bc:	e7be      	b.n	800b83c <__ieee754_sqrt+0xe0>
 800b8be:	bf00      	nop
 800b8c0:	7ff00000 	.word	0x7ff00000

0800b8c4 <_init>:
 800b8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8c6:	bf00      	nop
 800b8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ca:	bc08      	pop	{r3}
 800b8cc:	469e      	mov	lr, r3
 800b8ce:	4770      	bx	lr

0800b8d0 <_fini>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	bf00      	nop
 800b8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8d6:	bc08      	pop	{r3}
 800b8d8:	469e      	mov	lr, r3
 800b8da:	4770      	bx	lr
